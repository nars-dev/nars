/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var struct_pb = require('./struct_pb.js');
goog.exportSymbol('proto.nars.animated.Adaptable', null, global);
goog.exportSymbol('proto.nars.animated.Animation', null, global);
goog.exportSymbol('proto.nars.animated.AnimationState', null, global);
goog.exportSymbol('proto.nars.animated.BinaryOperator', null, global);
goog.exportSymbol('proto.nars.animated.BinaryOperatorType', null, global);
goog.exportSymbol('proto.nars.animated.Block', null, global);
goog.exportSymbol('proto.nars.animated.Call', null, global);
goog.exportSymbol('proto.nars.animated.Clock', null, global);
goog.exportSymbol('proto.nars.animated.ClockOperation', null, global);
goog.exportSymbol('proto.nars.animated.ClockOperationType', null, global);
goog.exportSymbol('proto.nars.animated.Color', null, global);
goog.exportSymbol('proto.nars.animated.Concat', null, global);
goog.exportSymbol('proto.nars.animated.Condition', null, global);
goog.exportSymbol('proto.nars.animated.Debug', null, global);
goog.exportSymbol('proto.nars.animated.DecayAnimation', null, global);
goog.exportSymbol('proto.nars.animated.DecayConfig', null, global);
goog.exportSymbol('proto.nars.animated.DiffClamp', null, global);
goog.exportSymbol('proto.nars.animated.EasingCustom', null, global);
goog.exportSymbol('proto.nars.animated.EasingFunction', null, global);
goog.exportSymbol('proto.nars.animated.EasingStatic', null, global);
goog.exportSymbol('proto.nars.animated.Extrapolate', null, global);
goog.exportSymbol('proto.nars.animated.ExtrapolateType', null, global);
goog.exportSymbol('proto.nars.animated.Interpolate', null, global);
goog.exportSymbol('proto.nars.animated.InterpolationConfig', null, global);
goog.exportSymbol('proto.nars.animated.ListValue', null, global);
goog.exportSymbol('proto.nars.animated.MultiOperator', null, global);
goog.exportSymbol('proto.nars.animated.MultiOperatorType', null, global);
goog.exportSymbol('proto.nars.animated.Node', null, global);
goog.exportSymbol('proto.nars.animated.OnChange', null, global);
goog.exportSymbol('proto.nars.animated.PhysicsAnimationState', null, global);
goog.exportSymbol('proto.nars.animated.Primitive', null, global);
goog.exportSymbol('proto.nars.animated.Setter', null, global);
goog.exportSymbol('proto.nars.animated.SpringAnimation', null, global);
goog.exportSymbol('proto.nars.animated.SpringConfig', null, global);
goog.exportSymbol('proto.nars.animated.Style', null, global);
goog.exportSymbol('proto.nars.animated.TimingAnimation', null, global);
goog.exportSymbol('proto.nars.animated.TimingConfig', null, global);
goog.exportSymbol('proto.nars.animated.TimingState', null, global);
goog.exportSymbol('proto.nars.animated.TopLevelNode', null, global);
goog.exportSymbol('proto.nars.animated.UnaryDerivedOperator', null, global);
goog.exportSymbol('proto.nars.animated.UnaryDerivedOperatorType', null, global);
goog.exportSymbol('proto.nars.animated.UnaryOperator', null, global);
goog.exportSymbol('proto.nars.animated.UnaryOperatorType', null, global);
goog.exportSymbol('proto.nars.animated.Value', null, global);
goog.exportSymbol('proto.nars.animated.ValueArgument', null, global);
goog.exportSymbol('proto.nars.animated.ValueOrAnimatedNode', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.EasingCustom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.EasingCustom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.EasingCustom.displayName = 'proto.nars.animated.EasingCustom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.EasingCustom.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.EasingCustom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.EasingCustom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.EasingCustom.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.nars.animated.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.EasingCustom}
 */
proto.nars.animated.EasingCustom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.EasingCustom;
  return proto.nars.animated.EasingCustom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.EasingCustom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.EasingCustom}
 */
proto.nars.animated.EasingCustom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Node;
      reader.readMessage(value,proto.nars.animated.Node.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.EasingCustom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.EasingCustom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.EasingCustom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.EasingCustom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Node result = 1;
 * @return {?proto.nars.animated.Node}
 */
proto.nars.animated.EasingCustom.prototype.getResult = function() {
  return /** @type{?proto.nars.animated.Node} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Node, 1));
};


/** @param {?proto.nars.animated.Node|undefined} value */
proto.nars.animated.EasingCustom.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.EasingCustom.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.EasingCustom.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.EasingStatic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.EasingStatic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.EasingStatic.displayName = 'proto.nars.animated.EasingStatic';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.EasingStatic.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.EasingStatic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.EasingStatic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.EasingStatic.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.EasingStatic}
 */
proto.nars.animated.EasingStatic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.EasingStatic;
  return proto.nars.animated.EasingStatic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.EasingStatic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.EasingStatic}
 */
proto.nars.animated.EasingStatic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.EasingStatic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.EasingStatic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.EasingStatic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.EasingStatic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.EasingFunction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nars.animated.EasingFunction.oneofGroups_);
};
goog.inherits(proto.nars.animated.EasingFunction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.EasingFunction.displayName = 'proto.nars.animated.EasingFunction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nars.animated.EasingFunction.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nars.animated.EasingFunction.ValueCase = {
  VALUE_NOT_SET: 0,
  BUILTIN: 1,
  CUSTOM: 2
};

/**
 * @return {proto.nars.animated.EasingFunction.ValueCase}
 */
proto.nars.animated.EasingFunction.prototype.getValueCase = function() {
  return /** @type {proto.nars.animated.EasingFunction.ValueCase} */(jspb.Message.computeOneofCase(this, proto.nars.animated.EasingFunction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.EasingFunction.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.EasingFunction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.EasingFunction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.EasingFunction.toObject = function(includeInstance, msg) {
  var f, obj = {
    builtin: (f = msg.getBuiltin()) && proto.nars.animated.EasingStatic.toObject(includeInstance, f),
    custom: (f = msg.getCustom()) && proto.nars.animated.EasingCustom.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.EasingFunction}
 */
proto.nars.animated.EasingFunction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.EasingFunction;
  return proto.nars.animated.EasingFunction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.EasingFunction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.EasingFunction}
 */
proto.nars.animated.EasingFunction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.EasingStatic;
      reader.readMessage(value,proto.nars.animated.EasingStatic.deserializeBinaryFromReader);
      msg.setBuiltin(value);
      break;
    case 2:
      var value = new proto.nars.animated.EasingCustom;
      reader.readMessage(value,proto.nars.animated.EasingCustom.deserializeBinaryFromReader);
      msg.setCustom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.EasingFunction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.EasingFunction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.EasingFunction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.EasingFunction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBuiltin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.EasingStatic.serializeBinaryToWriter
    );
  }
  f = message.getCustom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.EasingCustom.serializeBinaryToWriter
    );
  }
};


/**
 * optional EasingStatic builtin = 1;
 * @return {?proto.nars.animated.EasingStatic}
 */
proto.nars.animated.EasingFunction.prototype.getBuiltin = function() {
  return /** @type{?proto.nars.animated.EasingStatic} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.EasingStatic, 1));
};


/** @param {?proto.nars.animated.EasingStatic|undefined} value */
proto.nars.animated.EasingFunction.prototype.setBuiltin = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nars.animated.EasingFunction.oneofGroups_[0], value);
};


proto.nars.animated.EasingFunction.prototype.clearBuiltin = function() {
  this.setBuiltin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.EasingFunction.prototype.hasBuiltin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EasingCustom custom = 2;
 * @return {?proto.nars.animated.EasingCustom}
 */
proto.nars.animated.EasingFunction.prototype.getCustom = function() {
  return /** @type{?proto.nars.animated.EasingCustom} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.EasingCustom, 2));
};


/** @param {?proto.nars.animated.EasingCustom|undefined} value */
proto.nars.animated.EasingFunction.prototype.setCustom = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nars.animated.EasingFunction.oneofGroups_[0], value);
};


proto.nars.animated.EasingFunction.prototype.clearCustom = function() {
  this.setCustom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.EasingFunction.prototype.hasCustom = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.UnaryOperator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.UnaryOperator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.UnaryOperator.displayName = 'proto.nars.animated.UnaryOperator';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.UnaryOperator.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.UnaryOperator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.UnaryOperator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.UnaryOperator.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    operator: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.UnaryOperator}
 */
proto.nars.animated.UnaryOperator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.UnaryOperator;
  return proto.nars.animated.UnaryOperator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.UnaryOperator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.UnaryOperator}
 */
proto.nars.animated.UnaryOperator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.nars.animated.UnaryOperatorType} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.UnaryOperator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.UnaryOperator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.UnaryOperator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.UnaryOperator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Adaptable value = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.UnaryOperator.prototype.getValue = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.UnaryOperator.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.UnaryOperator.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.UnaryOperator.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UnaryOperatorType operator = 2;
 * @return {!proto.nars.animated.UnaryOperatorType}
 */
proto.nars.animated.UnaryOperator.prototype.getOperator = function() {
  return /** @type {!proto.nars.animated.UnaryOperatorType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.nars.animated.UnaryOperatorType} value */
proto.nars.animated.UnaryOperator.prototype.setOperator = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.MultiOperator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nars.animated.MultiOperator.repeatedFields_, null);
};
goog.inherits(proto.nars.animated.MultiOperator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.MultiOperator.displayName = 'proto.nars.animated.MultiOperator';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nars.animated.MultiOperator.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.MultiOperator.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.MultiOperator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.MultiOperator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.MultiOperator.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: (f = msg.getA()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    b: (f = msg.getB()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    othersList: jspb.Message.toObjectList(msg.getOthersList(),
    proto.nars.animated.Adaptable.toObject, includeInstance),
    operator: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.MultiOperator}
 */
proto.nars.animated.MultiOperator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.MultiOperator;
  return proto.nars.animated.MultiOperator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.MultiOperator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.MultiOperator}
 */
proto.nars.animated.MultiOperator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setA(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setB(value);
      break;
    case 3:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.addOthers(value);
      break;
    case 4:
      var value = /** @type {!proto.nars.animated.MultiOperatorType} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.MultiOperator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.MultiOperator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.MultiOperator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.MultiOperator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getB();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getOthersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional Adaptable a = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.MultiOperator.prototype.getA = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.MultiOperator.prototype.setA = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.MultiOperator.prototype.clearA = function() {
  this.setA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.MultiOperator.prototype.hasA = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Adaptable b = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.MultiOperator.prototype.getB = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.MultiOperator.prototype.setB = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.MultiOperator.prototype.clearB = function() {
  this.setB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.MultiOperator.prototype.hasB = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Adaptable others = 3;
 * @return {!Array<!proto.nars.animated.Adaptable>}
 */
proto.nars.animated.MultiOperator.prototype.getOthersList = function() {
  return /** @type{!Array<!proto.nars.animated.Adaptable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nars.animated.Adaptable, 3));
};


/** @param {!Array<!proto.nars.animated.Adaptable>} value */
proto.nars.animated.MultiOperator.prototype.setOthersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nars.animated.Adaptable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nars.animated.Adaptable}
 */
proto.nars.animated.MultiOperator.prototype.addOthers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nars.animated.Adaptable, opt_index);
};


proto.nars.animated.MultiOperator.prototype.clearOthersList = function() {
  this.setOthersList([]);
};


/**
 * optional MultiOperatorType operator = 4;
 * @return {!proto.nars.animated.MultiOperatorType}
 */
proto.nars.animated.MultiOperator.prototype.getOperator = function() {
  return /** @type {!proto.nars.animated.MultiOperatorType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.nars.animated.MultiOperatorType} value */
proto.nars.animated.MultiOperator.prototype.setOperator = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Condition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.Condition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Condition.displayName = 'proto.nars.animated.Condition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Condition.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Condition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Condition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Condition.toObject = function(includeInstance, msg) {
  var f, obj = {
    condition: (f = msg.getCondition()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    ifnode: (f = msg.getIfnode()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    elsenode: (f = msg.getElsenode()) && proto.nars.animated.Adaptable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Condition}
 */
proto.nars.animated.Condition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Condition;
  return proto.nars.animated.Condition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Condition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Condition}
 */
proto.nars.animated.Condition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setIfnode(value);
      break;
    case 3:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setElsenode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Condition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Condition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Condition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Condition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getIfnode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getElsenode();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Adaptable condition = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Condition.prototype.getCondition = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Condition.prototype.setCondition = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.Condition.prototype.clearCondition = function() {
  this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Condition.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Adaptable ifNode = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Condition.prototype.getIfnode = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Condition.prototype.setIfnode = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.Condition.prototype.clearIfnode = function() {
  this.setIfnode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Condition.prototype.hasIfnode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Adaptable elseNode = 3;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Condition.prototype.getElsenode = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 3));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Condition.prototype.setElsenode = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.Condition.prototype.clearElsenode = function() {
  this.setElsenode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Condition.prototype.hasElsenode = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nars.animated.Value.oneofGroups_);
};
goog.inherits(proto.nars.animated.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Value.displayName = 'proto.nars.animated.Value';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nars.animated.Value.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nars.animated.Value.InitialvalueCase = {
  INITIALVALUE_NOT_SET: 0,
  FLOAT: 1,
  STRING: 2,
  BOOL: 3
};

/**
 * @return {proto.nars.animated.Value.InitialvalueCase}
 */
proto.nars.animated.Value.prototype.getInitialvalueCase = function() {
  return /** @type {proto.nars.animated.Value.InitialvalueCase} */(jspb.Message.computeOneofCase(this, proto.nars.animated.Value.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_float: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    string: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bool: jspb.Message.getFieldWithDefault(msg, 3, false),
    nodeid: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Value}
 */
proto.nars.animated.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Value;
  return proto.nars.animated.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Value}
 */
proto.nars.animated.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBool(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional float float = 1;
 * @return {number}
 */
proto.nars.animated.Value.prototype.getFloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.nars.animated.Value.prototype.setFloat = function(value) {
  jspb.Message.setOneofField(this, 1, proto.nars.animated.Value.oneofGroups_[0], value);
};


proto.nars.animated.Value.prototype.clearFloat = function() {
  jspb.Message.setOneofField(this, 1, proto.nars.animated.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Value.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string string = 2;
 * @return {string}
 */
proto.nars.animated.Value.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nars.animated.Value.prototype.setString = function(value) {
  jspb.Message.setOneofField(this, 2, proto.nars.animated.Value.oneofGroups_[0], value);
};


proto.nars.animated.Value.prototype.clearString = function() {
  jspb.Message.setOneofField(this, 2, proto.nars.animated.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Value.prototype.hasString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool bool = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nars.animated.Value.prototype.getBool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.nars.animated.Value.prototype.setBool = function(value) {
  jspb.Message.setOneofField(this, 3, proto.nars.animated.Value.oneofGroups_[0], value);
};


proto.nars.animated.Value.prototype.clearBool = function() {
  jspb.Message.setOneofField(this, 3, proto.nars.animated.Value.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Value.prototype.hasBool = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 __nodeID = 4;
 * @return {number}
 */
proto.nars.animated.Value.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.nars.animated.Value.prototype.setNodeid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Setter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.Setter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Setter.displayName = 'proto.nars.animated.Setter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Setter.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Setter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Setter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Setter.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuetobeupdated: (f = msg.getValuetobeupdated()) && proto.nars.animated.Value.toObject(includeInstance, f),
    tovalue: (f = msg.getTovalue()) && proto.nars.animated.Adaptable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Setter}
 */
proto.nars.animated.Setter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Setter;
  return proto.nars.animated.Setter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Setter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Setter}
 */
proto.nars.animated.Setter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Value;
      reader.readMessage(value,proto.nars.animated.Value.deserializeBinaryFromReader);
      msg.setValuetobeupdated(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setTovalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Setter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Setter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Setter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Setter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuetobeupdated();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Value.serializeBinaryToWriter
    );
  }
  f = message.getTovalue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value valueToBeUpdated = 1;
 * @return {?proto.nars.animated.Value}
 */
proto.nars.animated.Setter.prototype.getValuetobeupdated = function() {
  return /** @type{?proto.nars.animated.Value} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Value, 1));
};


/** @param {?proto.nars.animated.Value|undefined} value */
proto.nars.animated.Setter.prototype.setValuetobeupdated = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.Setter.prototype.clearValuetobeupdated = function() {
  this.setValuetobeupdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Setter.prototype.hasValuetobeupdated = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Adaptable toValue = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Setter.prototype.getTovalue = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Setter.prototype.setTovalue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.Setter.prototype.clearTovalue = function() {
  this.setTovalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Setter.prototype.hasTovalue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.UnaryDerivedOperator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.UnaryDerivedOperator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.UnaryDerivedOperator.displayName = 'proto.nars.animated.UnaryDerivedOperator';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.UnaryDerivedOperator.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.UnaryDerivedOperator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.UnaryDerivedOperator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.UnaryDerivedOperator.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    operator: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.UnaryDerivedOperator}
 */
proto.nars.animated.UnaryDerivedOperator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.UnaryDerivedOperator;
  return proto.nars.animated.UnaryDerivedOperator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.UnaryDerivedOperator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.UnaryDerivedOperator}
 */
proto.nars.animated.UnaryDerivedOperator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {!proto.nars.animated.UnaryDerivedOperatorType} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.UnaryDerivedOperator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.UnaryDerivedOperator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.UnaryDerivedOperator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.UnaryDerivedOperator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Adaptable value = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.UnaryDerivedOperator.prototype.getValue = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.UnaryDerivedOperator.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.UnaryDerivedOperator.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.UnaryDerivedOperator.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UnaryDerivedOperatorType operator = 2;
 * @return {!proto.nars.animated.UnaryDerivedOperatorType}
 */
proto.nars.animated.UnaryDerivedOperator.prototype.getOperator = function() {
  return /** @type {!proto.nars.animated.UnaryDerivedOperatorType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.nars.animated.UnaryDerivedOperatorType} value */
proto.nars.animated.UnaryDerivedOperator.prototype.setOperator = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.BinaryOperator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.BinaryOperator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.BinaryOperator.displayName = 'proto.nars.animated.BinaryOperator';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.BinaryOperator.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.BinaryOperator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.BinaryOperator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.BinaryOperator.toObject = function(includeInstance, msg) {
  var f, obj = {
    operator: jspb.Message.getFieldWithDefault(msg, 1, 0),
    left: (f = msg.getLeft()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.nars.animated.Adaptable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.BinaryOperator}
 */
proto.nars.animated.BinaryOperator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.BinaryOperator;
  return proto.nars.animated.BinaryOperator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.BinaryOperator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.BinaryOperator}
 */
proto.nars.animated.BinaryOperator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nars.animated.BinaryOperatorType} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 3:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.BinaryOperator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.BinaryOperator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.BinaryOperator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.BinaryOperator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * optional BinaryOperatorType operator = 1;
 * @return {!proto.nars.animated.BinaryOperatorType}
 */
proto.nars.animated.BinaryOperator.prototype.getOperator = function() {
  return /** @type {!proto.nars.animated.BinaryOperatorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.nars.animated.BinaryOperatorType} value */
proto.nars.animated.BinaryOperator.prototype.setOperator = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Adaptable left = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.BinaryOperator.prototype.getLeft = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.BinaryOperator.prototype.setLeft = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.BinaryOperator.prototype.clearLeft = function() {
  this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.BinaryOperator.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Adaptable right = 3;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.BinaryOperator.prototype.getRight = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 3));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.BinaryOperator.prototype.setRight = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.BinaryOperator.prototype.clearRight = function() {
  this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.BinaryOperator.prototype.hasRight = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Color = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.Color, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Color.displayName = 'proto.nars.animated.Color';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Color.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Color.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Color} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Color.toObject = function(includeInstance, msg) {
  var f, obj = {
    r: (f = msg.getR()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    g: (f = msg.getG()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    b: (f = msg.getB()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    alpha: (f = msg.getAlpha()) && proto.nars.animated.Adaptable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Color}
 */
proto.nars.animated.Color.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Color;
  return proto.nars.animated.Color.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Color} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Color}
 */
proto.nars.animated.Color.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setR(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setG(value);
      break;
    case 3:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setB(value);
      break;
    case 4:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setAlpha(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Color.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Color.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Color} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Color.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getR();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getG();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getB();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getAlpha();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Adaptable r = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Color.prototype.getR = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Color.prototype.setR = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.Color.prototype.clearR = function() {
  this.setR(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Color.prototype.hasR = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Adaptable g = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Color.prototype.getG = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Color.prototype.setG = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.Color.prototype.clearG = function() {
  this.setG(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Color.prototype.hasG = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Adaptable b = 3;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Color.prototype.getB = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 3));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Color.prototype.setB = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.Color.prototype.clearB = function() {
  this.setB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Color.prototype.hasB = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Adaptable alpha = 4;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Color.prototype.getAlpha = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 4));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Color.prototype.setAlpha = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.nars.animated.Color.prototype.clearAlpha = function() {
  this.setAlpha(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Color.prototype.hasAlpha = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.DiffClamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.DiffClamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.DiffClamp.displayName = 'proto.nars.animated.DiffClamp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.DiffClamp.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.DiffClamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.DiffClamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.DiffClamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    minval: (f = msg.getMinval()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    maxval: (f = msg.getMaxval()) && proto.nars.animated.Adaptable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.DiffClamp}
 */
proto.nars.animated.DiffClamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.DiffClamp;
  return proto.nars.animated.DiffClamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.DiffClamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.DiffClamp}
 */
proto.nars.animated.DiffClamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setMinval(value);
      break;
    case 3:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setMaxval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.DiffClamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.DiffClamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.DiffClamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.DiffClamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getMinval();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getMaxval();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Adaptable value = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.DiffClamp.prototype.getValue = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.DiffClamp.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.DiffClamp.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.DiffClamp.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Adaptable minVal = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.DiffClamp.prototype.getMinval = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.DiffClamp.prototype.setMinval = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.DiffClamp.prototype.clearMinval = function() {
  this.setMinval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.DiffClamp.prototype.hasMinval = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Adaptable maxVal = 3;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.DiffClamp.prototype.getMaxval = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 3));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.DiffClamp.prototype.setMaxval = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.DiffClamp.prototype.clearMaxval = function() {
  this.setMaxval(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.DiffClamp.prototype.hasMaxval = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Extrapolate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.Extrapolate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Extrapolate.displayName = 'proto.nars.animated.Extrapolate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Extrapolate.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Extrapolate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Extrapolate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Extrapolate.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Extrapolate}
 */
proto.nars.animated.Extrapolate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Extrapolate;
  return proto.nars.animated.Extrapolate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Extrapolate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Extrapolate}
 */
proto.nars.animated.Extrapolate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nars.animated.ExtrapolateType} */ (reader.readEnum());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Extrapolate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Extrapolate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Extrapolate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Extrapolate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ExtrapolateType value = 1;
 * @return {!proto.nars.animated.ExtrapolateType}
 */
proto.nars.animated.Extrapolate.prototype.getValue = function() {
  return /** @type {!proto.nars.animated.ExtrapolateType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.nars.animated.ExtrapolateType} value */
proto.nars.animated.Extrapolate.prototype.setValue = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.InterpolationConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nars.animated.InterpolationConfig.repeatedFields_, null);
};
goog.inherits(proto.nars.animated.InterpolationConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.InterpolationConfig.displayName = 'proto.nars.animated.InterpolationConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nars.animated.InterpolationConfig.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.InterpolationConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.InterpolationConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.InterpolationConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.InterpolationConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputrangeList: jspb.Message.toObjectList(msg.getInputrangeList(),
    proto.nars.animated.Adaptable.toObject, includeInstance),
    outputrangeList: jspb.Message.toObjectList(msg.getOutputrangeList(),
    proto.nars.animated.Adaptable.toObject, includeInstance),
    extrapolate: (f = msg.getExtrapolate()) && proto.nars.animated.Extrapolate.toObject(includeInstance, f),
    extrapolateleft: (f = msg.getExtrapolateleft()) && proto.nars.animated.Extrapolate.toObject(includeInstance, f),
    extrapolateright: (f = msg.getExtrapolateright()) && proto.nars.animated.Extrapolate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.InterpolationConfig}
 */
proto.nars.animated.InterpolationConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.InterpolationConfig;
  return proto.nars.animated.InterpolationConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.InterpolationConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.InterpolationConfig}
 */
proto.nars.animated.InterpolationConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.addInputrange(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.addOutputrange(value);
      break;
    case 3:
      var value = new proto.nars.animated.Extrapolate;
      reader.readMessage(value,proto.nars.animated.Extrapolate.deserializeBinaryFromReader);
      msg.setExtrapolate(value);
      break;
    case 4:
      var value = new proto.nars.animated.Extrapolate;
      reader.readMessage(value,proto.nars.animated.Extrapolate.deserializeBinaryFromReader);
      msg.setExtrapolateleft(value);
      break;
    case 5:
      var value = new proto.nars.animated.Extrapolate;
      reader.readMessage(value,proto.nars.animated.Extrapolate.deserializeBinaryFromReader);
      msg.setExtrapolateright(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.InterpolationConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.InterpolationConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.InterpolationConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.InterpolationConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputrangeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getOutputrangeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getExtrapolate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.Extrapolate.serializeBinaryToWriter
    );
  }
  f = message.getExtrapolateleft();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nars.animated.Extrapolate.serializeBinaryToWriter
    );
  }
  f = message.getExtrapolateright();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nars.animated.Extrapolate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Adaptable inputRange = 1;
 * @return {!Array<!proto.nars.animated.Adaptable>}
 */
proto.nars.animated.InterpolationConfig.prototype.getInputrangeList = function() {
  return /** @type{!Array<!proto.nars.animated.Adaptable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {!Array<!proto.nars.animated.Adaptable>} value */
proto.nars.animated.InterpolationConfig.prototype.setInputrangeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nars.animated.Adaptable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nars.animated.Adaptable}
 */
proto.nars.animated.InterpolationConfig.prototype.addInputrange = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nars.animated.Adaptable, opt_index);
};


proto.nars.animated.InterpolationConfig.prototype.clearInputrangeList = function() {
  this.setInputrangeList([]);
};


/**
 * repeated Adaptable outputRange = 2;
 * @return {!Array<!proto.nars.animated.Adaptable>}
 */
proto.nars.animated.InterpolationConfig.prototype.getOutputrangeList = function() {
  return /** @type{!Array<!proto.nars.animated.Adaptable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {!Array<!proto.nars.animated.Adaptable>} value */
proto.nars.animated.InterpolationConfig.prototype.setOutputrangeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nars.animated.Adaptable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nars.animated.Adaptable}
 */
proto.nars.animated.InterpolationConfig.prototype.addOutputrange = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nars.animated.Adaptable, opt_index);
};


proto.nars.animated.InterpolationConfig.prototype.clearOutputrangeList = function() {
  this.setOutputrangeList([]);
};


/**
 * optional Extrapolate extrapolate = 3;
 * @return {?proto.nars.animated.Extrapolate}
 */
proto.nars.animated.InterpolationConfig.prototype.getExtrapolate = function() {
  return /** @type{?proto.nars.animated.Extrapolate} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Extrapolate, 3));
};


/** @param {?proto.nars.animated.Extrapolate|undefined} value */
proto.nars.animated.InterpolationConfig.prototype.setExtrapolate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.InterpolationConfig.prototype.clearExtrapolate = function() {
  this.setExtrapolate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.InterpolationConfig.prototype.hasExtrapolate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Extrapolate extrapolateLeft = 4;
 * @return {?proto.nars.animated.Extrapolate}
 */
proto.nars.animated.InterpolationConfig.prototype.getExtrapolateleft = function() {
  return /** @type{?proto.nars.animated.Extrapolate} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Extrapolate, 4));
};


/** @param {?proto.nars.animated.Extrapolate|undefined} value */
proto.nars.animated.InterpolationConfig.prototype.setExtrapolateleft = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.nars.animated.InterpolationConfig.prototype.clearExtrapolateleft = function() {
  this.setExtrapolateleft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.InterpolationConfig.prototype.hasExtrapolateleft = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Extrapolate extrapolateRight = 5;
 * @return {?proto.nars.animated.Extrapolate}
 */
proto.nars.animated.InterpolationConfig.prototype.getExtrapolateright = function() {
  return /** @type{?proto.nars.animated.Extrapolate} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Extrapolate, 5));
};


/** @param {?proto.nars.animated.Extrapolate|undefined} value */
proto.nars.animated.InterpolationConfig.prototype.setExtrapolateright = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.nars.animated.InterpolationConfig.prototype.clearExtrapolateright = function() {
  this.setExtrapolateright(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.InterpolationConfig.prototype.hasExtrapolateright = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Interpolate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.Interpolate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Interpolate.displayName = 'proto.nars.animated.Interpolate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Interpolate.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Interpolate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Interpolate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Interpolate.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.nars.animated.InterpolationConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Interpolate}
 */
proto.nars.animated.Interpolate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Interpolate;
  return proto.nars.animated.Interpolate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Interpolate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Interpolate}
 */
proto.nars.animated.Interpolate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.nars.animated.InterpolationConfig;
      reader.readMessage(value,proto.nars.animated.InterpolationConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Interpolate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Interpolate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Interpolate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Interpolate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.InterpolationConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Adaptable value = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.Interpolate.prototype.getValue = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.Interpolate.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.Interpolate.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Interpolate.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InterpolationConfig config = 2;
 * @return {?proto.nars.animated.InterpolationConfig}
 */
proto.nars.animated.Interpolate.prototype.getConfig = function() {
  return /** @type{?proto.nars.animated.InterpolationConfig} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.InterpolationConfig, 2));
};


/** @param {?proto.nars.animated.InterpolationConfig|undefined} value */
proto.nars.animated.Interpolate.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.Interpolate.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Interpolate.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nars.animated.Block.repeatedFields_, null);
};
goog.inherits(proto.nars.animated.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Block.displayName = 'proto.nars.animated.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nars.animated.Block.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.nars.animated.Adaptable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Block}
 */
proto.nars.animated.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Block;
  return proto.nars.animated.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Block}
 */
proto.nars.animated.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Adaptable values = 1;
 * @return {!Array<!proto.nars.animated.Adaptable>}
 */
proto.nars.animated.Block.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.nars.animated.Adaptable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {!Array<!proto.nars.animated.Adaptable>} value */
proto.nars.animated.Block.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nars.animated.Adaptable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nars.animated.Adaptable}
 */
proto.nars.animated.Block.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nars.animated.Adaptable, opt_index);
};


proto.nars.animated.Block.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Concat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nars.animated.Concat.repeatedFields_, null);
};
goog.inherits(proto.nars.animated.Concat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Concat.displayName = 'proto.nars.animated.Concat';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nars.animated.Concat.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Concat.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Concat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Concat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Concat.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.nars.animated.Adaptable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Concat}
 */
proto.nars.animated.Concat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Concat;
  return proto.nars.animated.Concat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Concat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Concat}
 */
proto.nars.animated.Concat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Concat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Concat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Concat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Concat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Adaptable values = 1;
 * @return {!Array<!proto.nars.animated.Adaptable>}
 */
proto.nars.animated.Concat.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.nars.animated.Adaptable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {!Array<!proto.nars.animated.Adaptable>} value */
proto.nars.animated.Concat.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nars.animated.Adaptable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nars.animated.Adaptable}
 */
proto.nars.animated.Concat.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nars.animated.Adaptable, opt_index);
};


proto.nars.animated.Concat.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nars.animated.Node.oneofGroups_);
};
goog.inherits(proto.nars.animated.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Node.displayName = 'proto.nars.animated.Node';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nars.animated.Node.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]];

/**
 * @enum {number}
 */
proto.nars.animated.Node.InnernodeCase = {
  INNERNODE_NOT_SET: 0,
  COND: 1,
  UNARY: 2,
  MULTI: 3,
  SETTER: 4,
  BINARY: 5,
  DERIVEDUNARY: 6,
  ANIMATION: 7,
  BLOCK: 8,
  VALUE: 9,
  CONCAT: 10,
  CALL: 11,
  DEBUG: 12,
  ONCHANGE: 13,
  CLOCKOPERATION: 14,
  CLOCK: 15,
  INTERPOLATE: 16,
  COLOR: 17,
  DIFFCLAMP: 18
};

/**
 * @return {proto.nars.animated.Node.InnernodeCase}
 */
proto.nars.animated.Node.prototype.getInnernodeCase = function() {
  return /** @type {proto.nars.animated.Node.InnernodeCase} */(jspb.Message.computeOneofCase(this, proto.nars.animated.Node.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    cond: (f = msg.getCond()) && proto.nars.animated.Condition.toObject(includeInstance, f),
    unary: (f = msg.getUnary()) && proto.nars.animated.UnaryOperator.toObject(includeInstance, f),
    multi: (f = msg.getMulti()) && proto.nars.animated.MultiOperator.toObject(includeInstance, f),
    setter: (f = msg.getSetter()) && proto.nars.animated.Setter.toObject(includeInstance, f),
    binary: (f = msg.getBinary()) && proto.nars.animated.BinaryOperator.toObject(includeInstance, f),
    derivedunary: (f = msg.getDerivedunary()) && proto.nars.animated.UnaryDerivedOperator.toObject(includeInstance, f),
    animation: (f = msg.getAnimation()) && proto.nars.animated.Animation.toObject(includeInstance, f),
    block: (f = msg.getBlock()) && proto.nars.animated.Block.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.nars.animated.Value.toObject(includeInstance, f),
    concat: (f = msg.getConcat()) && proto.nars.animated.Concat.toObject(includeInstance, f),
    call: (f = msg.getCall()) && proto.nars.animated.Call.toObject(includeInstance, f),
    debug: (f = msg.getDebug()) && proto.nars.animated.Debug.toObject(includeInstance, f),
    onchange: (f = msg.getOnchange()) && proto.nars.animated.OnChange.toObject(includeInstance, f),
    clockoperation: (f = msg.getClockoperation()) && proto.nars.animated.ClockOperation.toObject(includeInstance, f),
    clock: (f = msg.getClock()) && proto.nars.animated.Clock.toObject(includeInstance, f),
    interpolate: (f = msg.getInterpolate()) && proto.nars.animated.Interpolate.toObject(includeInstance, f),
    color: (f = msg.getColor()) && proto.nars.animated.Color.toObject(includeInstance, f),
    diffclamp: (f = msg.getDiffclamp()) && proto.nars.animated.DiffClamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Node}
 */
proto.nars.animated.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Node;
  return proto.nars.animated.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Node}
 */
proto.nars.animated.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Condition;
      reader.readMessage(value,proto.nars.animated.Condition.deserializeBinaryFromReader);
      msg.setCond(value);
      break;
    case 2:
      var value = new proto.nars.animated.UnaryOperator;
      reader.readMessage(value,proto.nars.animated.UnaryOperator.deserializeBinaryFromReader);
      msg.setUnary(value);
      break;
    case 3:
      var value = new proto.nars.animated.MultiOperator;
      reader.readMessage(value,proto.nars.animated.MultiOperator.deserializeBinaryFromReader);
      msg.setMulti(value);
      break;
    case 4:
      var value = new proto.nars.animated.Setter;
      reader.readMessage(value,proto.nars.animated.Setter.deserializeBinaryFromReader);
      msg.setSetter(value);
      break;
    case 5:
      var value = new proto.nars.animated.BinaryOperator;
      reader.readMessage(value,proto.nars.animated.BinaryOperator.deserializeBinaryFromReader);
      msg.setBinary(value);
      break;
    case 6:
      var value = new proto.nars.animated.UnaryDerivedOperator;
      reader.readMessage(value,proto.nars.animated.UnaryDerivedOperator.deserializeBinaryFromReader);
      msg.setDerivedunary(value);
      break;
    case 7:
      var value = new proto.nars.animated.Animation;
      reader.readMessage(value,proto.nars.animated.Animation.deserializeBinaryFromReader);
      msg.setAnimation(value);
      break;
    case 8:
      var value = new proto.nars.animated.Block;
      reader.readMessage(value,proto.nars.animated.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 9:
      var value = new proto.nars.animated.Value;
      reader.readMessage(value,proto.nars.animated.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 10:
      var value = new proto.nars.animated.Concat;
      reader.readMessage(value,proto.nars.animated.Concat.deserializeBinaryFromReader);
      msg.setConcat(value);
      break;
    case 11:
      var value = new proto.nars.animated.Call;
      reader.readMessage(value,proto.nars.animated.Call.deserializeBinaryFromReader);
      msg.setCall(value);
      break;
    case 12:
      var value = new proto.nars.animated.Debug;
      reader.readMessage(value,proto.nars.animated.Debug.deserializeBinaryFromReader);
      msg.setDebug(value);
      break;
    case 13:
      var value = new proto.nars.animated.OnChange;
      reader.readMessage(value,proto.nars.animated.OnChange.deserializeBinaryFromReader);
      msg.setOnchange(value);
      break;
    case 14:
      var value = new proto.nars.animated.ClockOperation;
      reader.readMessage(value,proto.nars.animated.ClockOperation.deserializeBinaryFromReader);
      msg.setClockoperation(value);
      break;
    case 15:
      var value = new proto.nars.animated.Clock;
      reader.readMessage(value,proto.nars.animated.Clock.deserializeBinaryFromReader);
      msg.setClock(value);
      break;
    case 16:
      var value = new proto.nars.animated.Interpolate;
      reader.readMessage(value,proto.nars.animated.Interpolate.deserializeBinaryFromReader);
      msg.setInterpolate(value);
      break;
    case 17:
      var value = new proto.nars.animated.Color;
      reader.readMessage(value,proto.nars.animated.Color.deserializeBinaryFromReader);
      msg.setColor(value);
      break;
    case 18:
      var value = new proto.nars.animated.DiffClamp;
      reader.readMessage(value,proto.nars.animated.DiffClamp.deserializeBinaryFromReader);
      msg.setDiffclamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCond();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Condition.serializeBinaryToWriter
    );
  }
  f = message.getUnary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.UnaryOperator.serializeBinaryToWriter
    );
  }
  f = message.getMulti();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.MultiOperator.serializeBinaryToWriter
    );
  }
  f = message.getSetter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nars.animated.Setter.serializeBinaryToWriter
    );
  }
  f = message.getBinary();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nars.animated.BinaryOperator.serializeBinaryToWriter
    );
  }
  f = message.getDerivedunary();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nars.animated.UnaryDerivedOperator.serializeBinaryToWriter
    );
  }
  f = message.getAnimation();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.nars.animated.Animation.serializeBinaryToWriter
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.nars.animated.Block.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.nars.animated.Value.serializeBinaryToWriter
    );
  }
  f = message.getConcat();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.nars.animated.Concat.serializeBinaryToWriter
    );
  }
  f = message.getCall();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.nars.animated.Call.serializeBinaryToWriter
    );
  }
  f = message.getDebug();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.nars.animated.Debug.serializeBinaryToWriter
    );
  }
  f = message.getOnchange();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.nars.animated.OnChange.serializeBinaryToWriter
    );
  }
  f = message.getClockoperation();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.nars.animated.ClockOperation.serializeBinaryToWriter
    );
  }
  f = message.getClock();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.nars.animated.Clock.serializeBinaryToWriter
    );
  }
  f = message.getInterpolate();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.nars.animated.Interpolate.serializeBinaryToWriter
    );
  }
  f = message.getColor();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.nars.animated.Color.serializeBinaryToWriter
    );
  }
  f = message.getDiffclamp();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.nars.animated.DiffClamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Condition cond = 1;
 * @return {?proto.nars.animated.Condition}
 */
proto.nars.animated.Node.prototype.getCond = function() {
  return /** @type{?proto.nars.animated.Condition} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Condition, 1));
};


/** @param {?proto.nars.animated.Condition|undefined} value */
proto.nars.animated.Node.prototype.setCond = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearCond = function() {
  this.setCond(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasCond = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UnaryOperator unary = 2;
 * @return {?proto.nars.animated.UnaryOperator}
 */
proto.nars.animated.Node.prototype.getUnary = function() {
  return /** @type{?proto.nars.animated.UnaryOperator} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.UnaryOperator, 2));
};


/** @param {?proto.nars.animated.UnaryOperator|undefined} value */
proto.nars.animated.Node.prototype.setUnary = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearUnary = function() {
  this.setUnary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasUnary = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MultiOperator multi = 3;
 * @return {?proto.nars.animated.MultiOperator}
 */
proto.nars.animated.Node.prototype.getMulti = function() {
  return /** @type{?proto.nars.animated.MultiOperator} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.MultiOperator, 3));
};


/** @param {?proto.nars.animated.MultiOperator|undefined} value */
proto.nars.animated.Node.prototype.setMulti = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearMulti = function() {
  this.setMulti(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasMulti = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Setter setter = 4;
 * @return {?proto.nars.animated.Setter}
 */
proto.nars.animated.Node.prototype.getSetter = function() {
  return /** @type{?proto.nars.animated.Setter} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Setter, 4));
};


/** @param {?proto.nars.animated.Setter|undefined} value */
proto.nars.animated.Node.prototype.setSetter = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearSetter = function() {
  this.setSetter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasSetter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BinaryOperator binary = 5;
 * @return {?proto.nars.animated.BinaryOperator}
 */
proto.nars.animated.Node.prototype.getBinary = function() {
  return /** @type{?proto.nars.animated.BinaryOperator} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.BinaryOperator, 5));
};


/** @param {?proto.nars.animated.BinaryOperator|undefined} value */
proto.nars.animated.Node.prototype.setBinary = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearBinary = function() {
  this.setBinary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasBinary = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional UnaryDerivedOperator derivedUnary = 6;
 * @return {?proto.nars.animated.UnaryDerivedOperator}
 */
proto.nars.animated.Node.prototype.getDerivedunary = function() {
  return /** @type{?proto.nars.animated.UnaryDerivedOperator} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.UnaryDerivedOperator, 6));
};


/** @param {?proto.nars.animated.UnaryDerivedOperator|undefined} value */
proto.nars.animated.Node.prototype.setDerivedunary = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearDerivedunary = function() {
  this.setDerivedunary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasDerivedunary = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Animation animation = 7;
 * @return {?proto.nars.animated.Animation}
 */
proto.nars.animated.Node.prototype.getAnimation = function() {
  return /** @type{?proto.nars.animated.Animation} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Animation, 7));
};


/** @param {?proto.nars.animated.Animation|undefined} value */
proto.nars.animated.Node.prototype.setAnimation = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearAnimation = function() {
  this.setAnimation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasAnimation = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Block block = 8;
 * @return {?proto.nars.animated.Block}
 */
proto.nars.animated.Node.prototype.getBlock = function() {
  return /** @type{?proto.nars.animated.Block} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Block, 8));
};


/** @param {?proto.nars.animated.Block|undefined} value */
proto.nars.animated.Node.prototype.setBlock = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Value value = 9;
 * @return {?proto.nars.animated.Value}
 */
proto.nars.animated.Node.prototype.getValue = function() {
  return /** @type{?proto.nars.animated.Value} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Value, 9));
};


/** @param {?proto.nars.animated.Value|undefined} value */
proto.nars.animated.Node.prototype.setValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasValue = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Concat concat = 10;
 * @return {?proto.nars.animated.Concat}
 */
proto.nars.animated.Node.prototype.getConcat = function() {
  return /** @type{?proto.nars.animated.Concat} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Concat, 10));
};


/** @param {?proto.nars.animated.Concat|undefined} value */
proto.nars.animated.Node.prototype.setConcat = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearConcat = function() {
  this.setConcat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasConcat = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Call call = 11;
 * @return {?proto.nars.animated.Call}
 */
proto.nars.animated.Node.prototype.getCall = function() {
  return /** @type{?proto.nars.animated.Call} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Call, 11));
};


/** @param {?proto.nars.animated.Call|undefined} value */
proto.nars.animated.Node.prototype.setCall = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearCall = function() {
  this.setCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasCall = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Debug debug = 12;
 * @return {?proto.nars.animated.Debug}
 */
proto.nars.animated.Node.prototype.getDebug = function() {
  return /** @type{?proto.nars.animated.Debug} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Debug, 12));
};


/** @param {?proto.nars.animated.Debug|undefined} value */
proto.nars.animated.Node.prototype.setDebug = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearDebug = function() {
  this.setDebug(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasDebug = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional OnChange onChange = 13;
 * @return {?proto.nars.animated.OnChange}
 */
proto.nars.animated.Node.prototype.getOnchange = function() {
  return /** @type{?proto.nars.animated.OnChange} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.OnChange, 13));
};


/** @param {?proto.nars.animated.OnChange|undefined} value */
proto.nars.animated.Node.prototype.setOnchange = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearOnchange = function() {
  this.setOnchange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasOnchange = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ClockOperation clockOperation = 14;
 * @return {?proto.nars.animated.ClockOperation}
 */
proto.nars.animated.Node.prototype.getClockoperation = function() {
  return /** @type{?proto.nars.animated.ClockOperation} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.ClockOperation, 14));
};


/** @param {?proto.nars.animated.ClockOperation|undefined} value */
proto.nars.animated.Node.prototype.setClockoperation = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearClockoperation = function() {
  this.setClockoperation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasClockoperation = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Clock clock = 15;
 * @return {?proto.nars.animated.Clock}
 */
proto.nars.animated.Node.prototype.getClock = function() {
  return /** @type{?proto.nars.animated.Clock} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Clock, 15));
};


/** @param {?proto.nars.animated.Clock|undefined} value */
proto.nars.animated.Node.prototype.setClock = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearClock = function() {
  this.setClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasClock = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional Interpolate interpolate = 16;
 * @return {?proto.nars.animated.Interpolate}
 */
proto.nars.animated.Node.prototype.getInterpolate = function() {
  return /** @type{?proto.nars.animated.Interpolate} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Interpolate, 16));
};


/** @param {?proto.nars.animated.Interpolate|undefined} value */
proto.nars.animated.Node.prototype.setInterpolate = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearInterpolate = function() {
  this.setInterpolate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasInterpolate = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Color color = 17;
 * @return {?proto.nars.animated.Color}
 */
proto.nars.animated.Node.prototype.getColor = function() {
  return /** @type{?proto.nars.animated.Color} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Color, 17));
};


/** @param {?proto.nars.animated.Color|undefined} value */
proto.nars.animated.Node.prototype.setColor = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearColor = function() {
  this.setColor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasColor = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional DiffClamp diffClamp = 18;
 * @return {?proto.nars.animated.DiffClamp}
 */
proto.nars.animated.Node.prototype.getDiffclamp = function() {
  return /** @type{?proto.nars.animated.DiffClamp} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.DiffClamp, 18));
};


/** @param {?proto.nars.animated.DiffClamp|undefined} value */
proto.nars.animated.Node.prototype.setDiffclamp = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.nars.animated.Node.oneofGroups_[0], value);
};


proto.nars.animated.Node.prototype.clearDiffclamp = function() {
  this.setDiffclamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Node.prototype.hasDiffclamp = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.ValueArgument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.ValueArgument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.ValueArgument.displayName = 'proto.nars.animated.ValueArgument';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.ValueArgument.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.ValueArgument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.ValueArgument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.ValueArgument.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.ValueArgument}
 */
proto.nars.animated.ValueArgument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.ValueArgument;
  return proto.nars.animated.ValueArgument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.ValueArgument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.ValueArgument}
 */
proto.nars.animated.ValueArgument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.ValueArgument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.ValueArgument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.ValueArgument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.ValueArgument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.nars.animated.ValueArgument.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nars.animated.ValueArgument.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Primitive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nars.animated.Primitive.oneofGroups_);
};
goog.inherits(proto.nars.animated.Primitive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Primitive.displayName = 'proto.nars.animated.Primitive';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nars.animated.Primitive.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nars.animated.Primitive.ValueCase = {
  VALUE_NOT_SET: 0,
  FLOAT: 1,
  STRING: 2,
  BOOL: 3
};

/**
 * @return {proto.nars.animated.Primitive.ValueCase}
 */
proto.nars.animated.Primitive.prototype.getValueCase = function() {
  return /** @type {proto.nars.animated.Primitive.ValueCase} */(jspb.Message.computeOneofCase(this, proto.nars.animated.Primitive.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Primitive.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Primitive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Primitive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Primitive.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_float: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    string: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bool: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Primitive}
 */
proto.nars.animated.Primitive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Primitive;
  return proto.nars.animated.Primitive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Primitive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Primitive}
 */
proto.nars.animated.Primitive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Primitive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Primitive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Primitive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Primitive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional float float = 1;
 * @return {number}
 */
proto.nars.animated.Primitive.prototype.getFloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.nars.animated.Primitive.prototype.setFloat = function(value) {
  jspb.Message.setOneofField(this, 1, proto.nars.animated.Primitive.oneofGroups_[0], value);
};


proto.nars.animated.Primitive.prototype.clearFloat = function() {
  jspb.Message.setOneofField(this, 1, proto.nars.animated.Primitive.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Primitive.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string string = 2;
 * @return {string}
 */
proto.nars.animated.Primitive.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nars.animated.Primitive.prototype.setString = function(value) {
  jspb.Message.setOneofField(this, 2, proto.nars.animated.Primitive.oneofGroups_[0], value);
};


proto.nars.animated.Primitive.prototype.clearString = function() {
  jspb.Message.setOneofField(this, 2, proto.nars.animated.Primitive.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Primitive.prototype.hasString = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool bool = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nars.animated.Primitive.prototype.getBool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.nars.animated.Primitive.prototype.setBool = function(value) {
  jspb.Message.setOneofField(this, 3, proto.nars.animated.Primitive.oneofGroups_[0], value);
};


proto.nars.animated.Primitive.prototype.clearBool = function() {
  jspb.Message.setOneofField(this, 3, proto.nars.animated.Primitive.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Primitive.prototype.hasBool = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Adaptable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nars.animated.Adaptable.oneofGroups_);
};
goog.inherits(proto.nars.animated.Adaptable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Adaptable.displayName = 'proto.nars.animated.Adaptable';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nars.animated.Adaptable.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nars.animated.Adaptable.ContainerCase = {
  CONTAINER_NOT_SET: 0,
  PRIMITIVE: 1,
  NODE: 2
};

/**
 * @return {proto.nars.animated.Adaptable.ContainerCase}
 */
proto.nars.animated.Adaptable.prototype.getContainerCase = function() {
  return /** @type {proto.nars.animated.Adaptable.ContainerCase} */(jspb.Message.computeOneofCase(this, proto.nars.animated.Adaptable.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Adaptable.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Adaptable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Adaptable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Adaptable.toObject = function(includeInstance, msg) {
  var f, obj = {
    primitive: (f = msg.getPrimitive()) && proto.nars.animated.Primitive.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.nars.animated.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Adaptable}
 */
proto.nars.animated.Adaptable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Adaptable;
  return proto.nars.animated.Adaptable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Adaptable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Adaptable}
 */
proto.nars.animated.Adaptable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Primitive;
      reader.readMessage(value,proto.nars.animated.Primitive.deserializeBinaryFromReader);
      msg.setPrimitive(value);
      break;
    case 2:
      var value = new proto.nars.animated.Node;
      reader.readMessage(value,proto.nars.animated.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Adaptable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Adaptable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Adaptable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Adaptable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrimitive();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Primitive.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional Primitive primitive = 1;
 * @return {?proto.nars.animated.Primitive}
 */
proto.nars.animated.Adaptable.prototype.getPrimitive = function() {
  return /** @type{?proto.nars.animated.Primitive} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Primitive, 1));
};


/** @param {?proto.nars.animated.Primitive|undefined} value */
proto.nars.animated.Adaptable.prototype.setPrimitive = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nars.animated.Adaptable.oneofGroups_[0], value);
};


proto.nars.animated.Adaptable.prototype.clearPrimitive = function() {
  this.setPrimitive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Adaptable.prototype.hasPrimitive = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Node node = 2;
 * @return {?proto.nars.animated.Node}
 */
proto.nars.animated.Adaptable.prototype.getNode = function() {
  return /** @type{?proto.nars.animated.Node} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Node, 2));
};


/** @param {?proto.nars.animated.Node|undefined} value */
proto.nars.animated.Adaptable.prototype.setNode = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nars.animated.Adaptable.oneofGroups_[0], value);
};


proto.nars.animated.Adaptable.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Adaptable.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Call = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nars.animated.Call.repeatedFields_, null);
};
goog.inherits(proto.nars.animated.Call, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Call.displayName = 'proto.nars.animated.Call';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nars.animated.Call.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Call.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Call.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Call} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Call.toObject = function(includeInstance, msg) {
  var f, obj = {
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.nars.animated.Adaptable.toObject, includeInstance),
    callid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Call}
 */
proto.nars.animated.Call.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Call;
  return proto.nars.animated.Call.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Call} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Call}
 */
proto.nars.animated.Call.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Call.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Call.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Call} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Call.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getCallid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Adaptable args = 1;
 * @return {!Array<!proto.nars.animated.Adaptable>}
 */
proto.nars.animated.Call.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.nars.animated.Adaptable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {!Array<!proto.nars.animated.Adaptable>} value */
proto.nars.animated.Call.prototype.setArgsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nars.animated.Adaptable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nars.animated.Adaptable}
 */
proto.nars.animated.Call.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nars.animated.Adaptable, opt_index);
};


proto.nars.animated.Call.prototype.clearArgsList = function() {
  this.setArgsList([]);
};


/**
 * optional int32 callId = 2;
 * @return {number}
 */
proto.nars.animated.Call.prototype.getCallid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nars.animated.Call.prototype.setCallid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Debug = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.Debug, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Debug.displayName = 'proto.nars.animated.Debug';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Debug.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Debug.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Debug} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Debug.toObject = function(includeInstance, msg) {
  var f, obj = {
    debugmessage: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.nars.animated.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Debug}
 */
proto.nars.animated.Debug.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Debug;
  return proto.nars.animated.Debug.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Debug} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Debug}
 */
proto.nars.animated.Debug.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebugmessage(value);
      break;
    case 2:
      var value = new proto.nars.animated.Node;
      reader.readMessage(value,proto.nars.animated.Node.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Debug.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Debug.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Debug} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Debug.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebugmessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Node.serializeBinaryToWriter
    );
  }
};


/**
 * optional string debugMessage = 1;
 * @return {string}
 */
proto.nars.animated.Debug.prototype.getDebugmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nars.animated.Debug.prototype.setDebugmessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Node value = 2;
 * @return {?proto.nars.animated.Node}
 */
proto.nars.animated.Debug.prototype.getValue = function() {
  return /** @type{?proto.nars.animated.Node} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Node, 2));
};


/** @param {?proto.nars.animated.Node|undefined} value */
proto.nars.animated.Debug.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.Debug.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Debug.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.OnChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.OnChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.OnChange.displayName = 'proto.nars.animated.OnChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.OnChange.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.OnChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.OnChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.OnChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.nars.animated.Adaptable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.OnChange}
 */
proto.nars.animated.OnChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.OnChange;
  return proto.nars.animated.OnChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.OnChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.OnChange}
 */
proto.nars.animated.OnChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.OnChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.OnChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.OnChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.OnChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Adaptable value = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.OnChange.prototype.getValue = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.OnChange.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.OnChange.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.OnChange.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Adaptable action = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.OnChange.prototype.getAction = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.OnChange.prototype.setAction = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.OnChange.prototype.clearAction = function() {
  this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.OnChange.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Clock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.Clock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Clock.displayName = 'proto.nars.animated.Clock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Clock.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Clock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Clock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Clock.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Clock}
 */
proto.nars.animated.Clock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Clock;
  return proto.nars.animated.Clock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Clock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Clock}
 */
proto.nars.animated.Clock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Clock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Clock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Clock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Clock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 __nodeID = 1;
 * @return {number}
 */
proto.nars.animated.Clock.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nars.animated.Clock.prototype.setNodeid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.ClockOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.ClockOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.ClockOperation.displayName = 'proto.nars.animated.ClockOperation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.ClockOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.ClockOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.ClockOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.ClockOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    clock: (f = msg.getClock()) && proto.nars.animated.Clock.toObject(includeInstance, f),
    operation: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.ClockOperation}
 */
proto.nars.animated.ClockOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.ClockOperation;
  return proto.nars.animated.ClockOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.ClockOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.ClockOperation}
 */
proto.nars.animated.ClockOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Clock;
      reader.readMessage(value,proto.nars.animated.Clock.deserializeBinaryFromReader);
      msg.setClock(value);
      break;
    case 2:
      var value = /** @type {!proto.nars.animated.ClockOperationType} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.ClockOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.ClockOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.ClockOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.ClockOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Clock.serializeBinaryToWriter
    );
  }
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional Clock clock = 1;
 * @return {?proto.nars.animated.Clock}
 */
proto.nars.animated.ClockOperation.prototype.getClock = function() {
  return /** @type{?proto.nars.animated.Clock} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Clock, 1));
};


/** @param {?proto.nars.animated.Clock|undefined} value */
proto.nars.animated.ClockOperation.prototype.setClock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.ClockOperation.prototype.clearClock = function() {
  this.setClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ClockOperation.prototype.hasClock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClockOperationType operation = 2;
 * @return {!proto.nars.animated.ClockOperationType}
 */
proto.nars.animated.ClockOperation.prototype.getOperation = function() {
  return /** @type {!proto.nars.animated.ClockOperationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.nars.animated.ClockOperationType} value */
proto.nars.animated.ClockOperation.prototype.setOperation = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.AnimationState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.AnimationState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.AnimationState.displayName = 'proto.nars.animated.AnimationState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.AnimationState.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.AnimationState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.AnimationState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.AnimationState.toObject = function(includeInstance, msg) {
  var f, obj = {
    finished: (f = msg.getFinished()) && proto.nars.animated.Value.toObject(includeInstance, f),
    position: (f = msg.getPosition()) && proto.nars.animated.Value.toObject(includeInstance, f),
    time: (f = msg.getTime()) && proto.nars.animated.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.AnimationState}
 */
proto.nars.animated.AnimationState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.AnimationState;
  return proto.nars.animated.AnimationState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.AnimationState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.AnimationState}
 */
proto.nars.animated.AnimationState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Value;
      reader.readMessage(value,proto.nars.animated.Value.deserializeBinaryFromReader);
      msg.setFinished(value);
      break;
    case 2:
      var value = new proto.nars.animated.Value;
      reader.readMessage(value,proto.nars.animated.Value.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = new proto.nars.animated.Value;
      reader.readMessage(value,proto.nars.animated.Value.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.AnimationState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.AnimationState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.AnimationState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.AnimationState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFinished();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Value.serializeBinaryToWriter
    );
  }
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Value.serializeBinaryToWriter
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Value finished = 1;
 * @return {?proto.nars.animated.Value}
 */
proto.nars.animated.AnimationState.prototype.getFinished = function() {
  return /** @type{?proto.nars.animated.Value} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Value, 1));
};


/** @param {?proto.nars.animated.Value|undefined} value */
proto.nars.animated.AnimationState.prototype.setFinished = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.AnimationState.prototype.clearFinished = function() {
  this.setFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.AnimationState.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value position = 2;
 * @return {?proto.nars.animated.Value}
 */
proto.nars.animated.AnimationState.prototype.getPosition = function() {
  return /** @type{?proto.nars.animated.Value} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Value, 2));
};


/** @param {?proto.nars.animated.Value|undefined} value */
proto.nars.animated.AnimationState.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.AnimationState.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.AnimationState.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Value time = 3;
 * @return {?proto.nars.animated.Value}
 */
proto.nars.animated.AnimationState.prototype.getTime = function() {
  return /** @type{?proto.nars.animated.Value} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Value, 3));
};


/** @param {?proto.nars.animated.Value|undefined} value */
proto.nars.animated.AnimationState.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.AnimationState.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.AnimationState.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.PhysicsAnimationState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.PhysicsAnimationState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.PhysicsAnimationState.displayName = 'proto.nars.animated.PhysicsAnimationState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.PhysicsAnimationState.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.PhysicsAnimationState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.PhysicsAnimationState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.PhysicsAnimationState.toObject = function(includeInstance, msg) {
  var f, obj = {
    animation: (f = msg.getAnimation()) && proto.nars.animated.AnimationState.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && proto.nars.animated.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.PhysicsAnimationState}
 */
proto.nars.animated.PhysicsAnimationState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.PhysicsAnimationState;
  return proto.nars.animated.PhysicsAnimationState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.PhysicsAnimationState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.PhysicsAnimationState}
 */
proto.nars.animated.PhysicsAnimationState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.AnimationState;
      reader.readMessage(value,proto.nars.animated.AnimationState.deserializeBinaryFromReader);
      msg.setAnimation(value);
      break;
    case 2:
      var value = new proto.nars.animated.Value;
      reader.readMessage(value,proto.nars.animated.Value.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.PhysicsAnimationState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.PhysicsAnimationState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.PhysicsAnimationState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.PhysicsAnimationState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnimation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.AnimationState.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional AnimationState animation = 1;
 * @return {?proto.nars.animated.AnimationState}
 */
proto.nars.animated.PhysicsAnimationState.prototype.getAnimation = function() {
  return /** @type{?proto.nars.animated.AnimationState} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.AnimationState, 1));
};


/** @param {?proto.nars.animated.AnimationState|undefined} value */
proto.nars.animated.PhysicsAnimationState.prototype.setAnimation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.PhysicsAnimationState.prototype.clearAnimation = function() {
  this.setAnimation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.PhysicsAnimationState.prototype.hasAnimation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value velocity = 2;
 * @return {?proto.nars.animated.Value}
 */
proto.nars.animated.PhysicsAnimationState.prototype.getVelocity = function() {
  return /** @type{?proto.nars.animated.Value} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Value, 2));
};


/** @param {?proto.nars.animated.Value|undefined} value */
proto.nars.animated.PhysicsAnimationState.prototype.setVelocity = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.PhysicsAnimationState.prototype.clearVelocity = function() {
  this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.PhysicsAnimationState.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.DecayConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.DecayConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.DecayConfig.displayName = 'proto.nars.animated.DecayConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.DecayConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.DecayConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.DecayConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.DecayConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    deceleration: (f = msg.getDeceleration()) && proto.nars.animated.Adaptable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.DecayConfig}
 */
proto.nars.animated.DecayConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.DecayConfig;
  return proto.nars.animated.DecayConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.DecayConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.DecayConfig}
 */
proto.nars.animated.DecayConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setDeceleration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.DecayConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.DecayConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.DecayConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.DecayConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeceleration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Adaptable deceleration = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.DecayConfig.prototype.getDeceleration = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.DecayConfig.prototype.setDeceleration = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.DecayConfig.prototype.clearDeceleration = function() {
  this.setDeceleration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.DecayConfig.prototype.hasDeceleration = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.DecayAnimation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.DecayAnimation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.DecayAnimation.displayName = 'proto.nars.animated.DecayAnimation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.DecayAnimation.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.DecayAnimation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.DecayAnimation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.DecayAnimation.toObject = function(includeInstance, msg) {
  var f, obj = {
    clock: (f = msg.getClock()) && proto.nars.animated.Clock.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.nars.animated.PhysicsAnimationState.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.nars.animated.DecayConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.DecayAnimation}
 */
proto.nars.animated.DecayAnimation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.DecayAnimation;
  return proto.nars.animated.DecayAnimation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.DecayAnimation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.DecayAnimation}
 */
proto.nars.animated.DecayAnimation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Clock;
      reader.readMessage(value,proto.nars.animated.Clock.deserializeBinaryFromReader);
      msg.setClock(value);
      break;
    case 2:
      var value = new proto.nars.animated.PhysicsAnimationState;
      reader.readMessage(value,proto.nars.animated.PhysicsAnimationState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 3:
      var value = new proto.nars.animated.DecayConfig;
      reader.readMessage(value,proto.nars.animated.DecayConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.DecayAnimation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.DecayAnimation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.DecayAnimation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.DecayAnimation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Clock.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.PhysicsAnimationState.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.DecayConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Clock clock = 1;
 * @return {?proto.nars.animated.Clock}
 */
proto.nars.animated.DecayAnimation.prototype.getClock = function() {
  return /** @type{?proto.nars.animated.Clock} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Clock, 1));
};


/** @param {?proto.nars.animated.Clock|undefined} value */
proto.nars.animated.DecayAnimation.prototype.setClock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.DecayAnimation.prototype.clearClock = function() {
  this.setClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.DecayAnimation.prototype.hasClock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PhysicsAnimationState state = 2;
 * @return {?proto.nars.animated.PhysicsAnimationState}
 */
proto.nars.animated.DecayAnimation.prototype.getState = function() {
  return /** @type{?proto.nars.animated.PhysicsAnimationState} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.PhysicsAnimationState, 2));
};


/** @param {?proto.nars.animated.PhysicsAnimationState|undefined} value */
proto.nars.animated.DecayAnimation.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.DecayAnimation.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.DecayAnimation.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DecayConfig config = 3;
 * @return {?proto.nars.animated.DecayConfig}
 */
proto.nars.animated.DecayAnimation.prototype.getConfig = function() {
  return /** @type{?proto.nars.animated.DecayConfig} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.DecayConfig, 3));
};


/** @param {?proto.nars.animated.DecayConfig|undefined} value */
proto.nars.animated.DecayAnimation.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.DecayAnimation.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.DecayAnimation.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.TimingState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.TimingState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.TimingState.displayName = 'proto.nars.animated.TimingState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.TimingState.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.TimingState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.TimingState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.TimingState.toObject = function(includeInstance, msg) {
  var f, obj = {
    animation: (f = msg.getAnimation()) && proto.nars.animated.AnimationState.toObject(includeInstance, f),
    frametime: (f = msg.getFrametime()) && proto.nars.animated.Value.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.TimingState}
 */
proto.nars.animated.TimingState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.TimingState;
  return proto.nars.animated.TimingState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.TimingState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.TimingState}
 */
proto.nars.animated.TimingState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.AnimationState;
      reader.readMessage(value,proto.nars.animated.AnimationState.deserializeBinaryFromReader);
      msg.setAnimation(value);
      break;
    case 2:
      var value = new proto.nars.animated.Value;
      reader.readMessage(value,proto.nars.animated.Value.deserializeBinaryFromReader);
      msg.setFrametime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.TimingState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.TimingState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.TimingState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.TimingState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnimation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.AnimationState.serializeBinaryToWriter
    );
  }
  f = message.getFrametime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional AnimationState animation = 1;
 * @return {?proto.nars.animated.AnimationState}
 */
proto.nars.animated.TimingState.prototype.getAnimation = function() {
  return /** @type{?proto.nars.animated.AnimationState} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.AnimationState, 1));
};


/** @param {?proto.nars.animated.AnimationState|undefined} value */
proto.nars.animated.TimingState.prototype.setAnimation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.TimingState.prototype.clearAnimation = function() {
  this.setAnimation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TimingState.prototype.hasAnimation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Value frameTime = 2;
 * @return {?proto.nars.animated.Value}
 */
proto.nars.animated.TimingState.prototype.getFrametime = function() {
  return /** @type{?proto.nars.animated.Value} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Value, 2));
};


/** @param {?proto.nars.animated.Value|undefined} value */
proto.nars.animated.TimingState.prototype.setFrametime = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.TimingState.prototype.clearFrametime = function() {
  this.setFrametime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TimingState.prototype.hasFrametime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.TimingConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.TimingConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.TimingConfig.displayName = 'proto.nars.animated.TimingConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.TimingConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.TimingConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.TimingConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.TimingConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    tovalue: (f = msg.getTovalue()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    duration: (f = msg.getDuration()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    easing: (f = msg.getEasing()) && proto.nars.animated.EasingFunction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.TimingConfig}
 */
proto.nars.animated.TimingConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.TimingConfig;
  return proto.nars.animated.TimingConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.TimingConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.TimingConfig}
 */
proto.nars.animated.TimingConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setTovalue(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setDuration(value);
      break;
    case 3:
      var value = new proto.nars.animated.EasingFunction;
      reader.readMessage(value,proto.nars.animated.EasingFunction.deserializeBinaryFromReader);
      msg.setEasing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.TimingConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.TimingConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.TimingConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.TimingConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTovalue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getDuration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getEasing();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.EasingFunction.serializeBinaryToWriter
    );
  }
};


/**
 * optional Adaptable toValue = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.TimingConfig.prototype.getTovalue = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.TimingConfig.prototype.setTovalue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.TimingConfig.prototype.clearTovalue = function() {
  this.setTovalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TimingConfig.prototype.hasTovalue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Adaptable duration = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.TimingConfig.prototype.getDuration = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.TimingConfig.prototype.setDuration = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.TimingConfig.prototype.clearDuration = function() {
  this.setDuration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TimingConfig.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EasingFunction easing = 3;
 * @return {?proto.nars.animated.EasingFunction}
 */
proto.nars.animated.TimingConfig.prototype.getEasing = function() {
  return /** @type{?proto.nars.animated.EasingFunction} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.EasingFunction, 3));
};


/** @param {?proto.nars.animated.EasingFunction|undefined} value */
proto.nars.animated.TimingConfig.prototype.setEasing = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.TimingConfig.prototype.clearEasing = function() {
  this.setEasing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TimingConfig.prototype.hasEasing = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.TimingAnimation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.TimingAnimation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.TimingAnimation.displayName = 'proto.nars.animated.TimingAnimation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.TimingAnimation.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.TimingAnimation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.TimingAnimation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.TimingAnimation.toObject = function(includeInstance, msg) {
  var f, obj = {
    clock: (f = msg.getClock()) && proto.nars.animated.Clock.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.nars.animated.TimingState.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.nars.animated.TimingConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.TimingAnimation}
 */
proto.nars.animated.TimingAnimation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.TimingAnimation;
  return proto.nars.animated.TimingAnimation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.TimingAnimation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.TimingAnimation}
 */
proto.nars.animated.TimingAnimation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Clock;
      reader.readMessage(value,proto.nars.animated.Clock.deserializeBinaryFromReader);
      msg.setClock(value);
      break;
    case 2:
      var value = new proto.nars.animated.TimingState;
      reader.readMessage(value,proto.nars.animated.TimingState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 3:
      var value = new proto.nars.animated.TimingConfig;
      reader.readMessage(value,proto.nars.animated.TimingConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.TimingAnimation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.TimingAnimation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.TimingAnimation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.TimingAnimation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Clock.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.TimingState.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.TimingConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Clock clock = 1;
 * @return {?proto.nars.animated.Clock}
 */
proto.nars.animated.TimingAnimation.prototype.getClock = function() {
  return /** @type{?proto.nars.animated.Clock} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Clock, 1));
};


/** @param {?proto.nars.animated.Clock|undefined} value */
proto.nars.animated.TimingAnimation.prototype.setClock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.TimingAnimation.prototype.clearClock = function() {
  this.setClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TimingAnimation.prototype.hasClock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimingState state = 2;
 * @return {?proto.nars.animated.TimingState}
 */
proto.nars.animated.TimingAnimation.prototype.getState = function() {
  return /** @type{?proto.nars.animated.TimingState} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.TimingState, 2));
};


/** @param {?proto.nars.animated.TimingState|undefined} value */
proto.nars.animated.TimingAnimation.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.TimingAnimation.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TimingAnimation.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TimingConfig config = 3;
 * @return {?proto.nars.animated.TimingConfig}
 */
proto.nars.animated.TimingAnimation.prototype.getConfig = function() {
  return /** @type{?proto.nars.animated.TimingConfig} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.TimingConfig, 3));
};


/** @param {?proto.nars.animated.TimingConfig|undefined} value */
proto.nars.animated.TimingAnimation.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.TimingAnimation.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TimingAnimation.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.SpringConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.SpringConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.SpringConfig.displayName = 'proto.nars.animated.SpringConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.SpringConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.SpringConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.SpringConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.SpringConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    damping: (f = msg.getDamping()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    mass: (f = msg.getMass()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    stiffness: (f = msg.getStiffness()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    overshootclamping: (f = msg.getOvershootclamping()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    restspeedthreshold: (f = msg.getRestspeedthreshold()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    restdisplacementthreshold: (f = msg.getRestdisplacementthreshold()) && proto.nars.animated.Adaptable.toObject(includeInstance, f),
    tovalue: (f = msg.getTovalue()) && proto.nars.animated.Adaptable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.SpringConfig}
 */
proto.nars.animated.SpringConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.SpringConfig;
  return proto.nars.animated.SpringConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.SpringConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.SpringConfig}
 */
proto.nars.animated.SpringConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setDamping(value);
      break;
    case 2:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setMass(value);
      break;
    case 3:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setStiffness(value);
      break;
    case 4:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setOvershootclamping(value);
      break;
    case 5:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setRestspeedthreshold(value);
      break;
    case 6:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setRestdisplacementthreshold(value);
      break;
    case 7:
      var value = new proto.nars.animated.Adaptable;
      reader.readMessage(value,proto.nars.animated.Adaptable.deserializeBinaryFromReader);
      msg.setTovalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.SpringConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.SpringConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.SpringConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.SpringConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDamping();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getMass();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getStiffness();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getOvershootclamping();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getRestspeedthreshold();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getRestdisplacementthreshold();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
  f = message.getTovalue();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.nars.animated.Adaptable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Adaptable damping = 1;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.SpringConfig.prototype.getDamping = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 1));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.SpringConfig.prototype.setDamping = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.SpringConfig.prototype.clearDamping = function() {
  this.setDamping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringConfig.prototype.hasDamping = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Adaptable mass = 2;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.SpringConfig.prototype.getMass = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 2));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.SpringConfig.prototype.setMass = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.SpringConfig.prototype.clearMass = function() {
  this.setMass(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringConfig.prototype.hasMass = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Adaptable stiffness = 3;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.SpringConfig.prototype.getStiffness = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 3));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.SpringConfig.prototype.setStiffness = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.SpringConfig.prototype.clearStiffness = function() {
  this.setStiffness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringConfig.prototype.hasStiffness = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Adaptable overshootClamping = 4;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.SpringConfig.prototype.getOvershootclamping = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 4));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.SpringConfig.prototype.setOvershootclamping = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.nars.animated.SpringConfig.prototype.clearOvershootclamping = function() {
  this.setOvershootclamping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringConfig.prototype.hasOvershootclamping = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Adaptable restSpeedThreshold = 5;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.SpringConfig.prototype.getRestspeedthreshold = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 5));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.SpringConfig.prototype.setRestspeedthreshold = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.nars.animated.SpringConfig.prototype.clearRestspeedthreshold = function() {
  this.setRestspeedthreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringConfig.prototype.hasRestspeedthreshold = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Adaptable restDisplacementThreshold = 6;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.SpringConfig.prototype.getRestdisplacementthreshold = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 6));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.SpringConfig.prototype.setRestdisplacementthreshold = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.nars.animated.SpringConfig.prototype.clearRestdisplacementthreshold = function() {
  this.setRestdisplacementthreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringConfig.prototype.hasRestdisplacementthreshold = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Adaptable toValue = 7;
 * @return {?proto.nars.animated.Adaptable}
 */
proto.nars.animated.SpringConfig.prototype.getTovalue = function() {
  return /** @type{?proto.nars.animated.Adaptable} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Adaptable, 7));
};


/** @param {?proto.nars.animated.Adaptable|undefined} value */
proto.nars.animated.SpringConfig.prototype.setTovalue = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.nars.animated.SpringConfig.prototype.clearTovalue = function() {
  this.setTovalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringConfig.prototype.hasTovalue = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.SpringAnimation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.SpringAnimation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.SpringAnimation.displayName = 'proto.nars.animated.SpringAnimation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.SpringAnimation.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.SpringAnimation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.SpringAnimation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.SpringAnimation.toObject = function(includeInstance, msg) {
  var f, obj = {
    clock: (f = msg.getClock()) && proto.nars.animated.Clock.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.nars.animated.PhysicsAnimationState.toObject(includeInstance, f),
    config: (f = msg.getConfig()) && proto.nars.animated.SpringConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.SpringAnimation}
 */
proto.nars.animated.SpringAnimation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.SpringAnimation;
  return proto.nars.animated.SpringAnimation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.SpringAnimation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.SpringAnimation}
 */
proto.nars.animated.SpringAnimation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Clock;
      reader.readMessage(value,proto.nars.animated.Clock.deserializeBinaryFromReader);
      msg.setClock(value);
      break;
    case 2:
      var value = new proto.nars.animated.PhysicsAnimationState;
      reader.readMessage(value,proto.nars.animated.PhysicsAnimationState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 3:
      var value = new proto.nars.animated.SpringConfig;
      reader.readMessage(value,proto.nars.animated.SpringConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.SpringAnimation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.SpringAnimation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.SpringAnimation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.SpringAnimation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Clock.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.PhysicsAnimationState.serializeBinaryToWriter
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.SpringConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional Clock clock = 1;
 * @return {?proto.nars.animated.Clock}
 */
proto.nars.animated.SpringAnimation.prototype.getClock = function() {
  return /** @type{?proto.nars.animated.Clock} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Clock, 1));
};


/** @param {?proto.nars.animated.Clock|undefined} value */
proto.nars.animated.SpringAnimation.prototype.setClock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.SpringAnimation.prototype.clearClock = function() {
  this.setClock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringAnimation.prototype.hasClock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PhysicsAnimationState state = 2;
 * @return {?proto.nars.animated.PhysicsAnimationState}
 */
proto.nars.animated.SpringAnimation.prototype.getState = function() {
  return /** @type{?proto.nars.animated.PhysicsAnimationState} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.PhysicsAnimationState, 2));
};


/** @param {?proto.nars.animated.PhysicsAnimationState|undefined} value */
proto.nars.animated.SpringAnimation.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.nars.animated.SpringAnimation.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringAnimation.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SpringConfig config = 3;
 * @return {?proto.nars.animated.SpringConfig}
 */
proto.nars.animated.SpringAnimation.prototype.getConfig = function() {
  return /** @type{?proto.nars.animated.SpringConfig} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.SpringConfig, 3));
};


/** @param {?proto.nars.animated.SpringConfig|undefined} value */
proto.nars.animated.SpringAnimation.prototype.setConfig = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.nars.animated.SpringAnimation.prototype.clearConfig = function() {
  this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.SpringAnimation.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Animation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nars.animated.Animation.oneofGroups_);
};
goog.inherits(proto.nars.animated.Animation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Animation.displayName = 'proto.nars.animated.Animation';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nars.animated.Animation.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nars.animated.Animation.AnimationCase = {
  ANIMATION_NOT_SET: 0,
  DECAY: 1,
  TIMING: 2,
  SPRING: 3
};

/**
 * @return {proto.nars.animated.Animation.AnimationCase}
 */
proto.nars.animated.Animation.prototype.getAnimationCase = function() {
  return /** @type {proto.nars.animated.Animation.AnimationCase} */(jspb.Message.computeOneofCase(this, proto.nars.animated.Animation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Animation.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Animation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Animation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Animation.toObject = function(includeInstance, msg) {
  var f, obj = {
    decay: (f = msg.getDecay()) && proto.nars.animated.DecayAnimation.toObject(includeInstance, f),
    timing: (f = msg.getTiming()) && proto.nars.animated.TimingAnimation.toObject(includeInstance, f),
    spring: (f = msg.getSpring()) && proto.nars.animated.SpringAnimation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Animation}
 */
proto.nars.animated.Animation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Animation;
  return proto.nars.animated.Animation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Animation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Animation}
 */
proto.nars.animated.Animation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.DecayAnimation;
      reader.readMessage(value,proto.nars.animated.DecayAnimation.deserializeBinaryFromReader);
      msg.setDecay(value);
      break;
    case 2:
      var value = new proto.nars.animated.TimingAnimation;
      reader.readMessage(value,proto.nars.animated.TimingAnimation.deserializeBinaryFromReader);
      msg.setTiming(value);
      break;
    case 3:
      var value = new proto.nars.animated.SpringAnimation;
      reader.readMessage(value,proto.nars.animated.SpringAnimation.deserializeBinaryFromReader);
      msg.setSpring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Animation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Animation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Animation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Animation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.DecayAnimation.serializeBinaryToWriter
    );
  }
  f = message.getTiming();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nars.animated.TimingAnimation.serializeBinaryToWriter
    );
  }
  f = message.getSpring();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nars.animated.SpringAnimation.serializeBinaryToWriter
    );
  }
};


/**
 * optional DecayAnimation decay = 1;
 * @return {?proto.nars.animated.DecayAnimation}
 */
proto.nars.animated.Animation.prototype.getDecay = function() {
  return /** @type{?proto.nars.animated.DecayAnimation} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.DecayAnimation, 1));
};


/** @param {?proto.nars.animated.DecayAnimation|undefined} value */
proto.nars.animated.Animation.prototype.setDecay = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.nars.animated.Animation.oneofGroups_[0], value);
};


proto.nars.animated.Animation.prototype.clearDecay = function() {
  this.setDecay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Animation.prototype.hasDecay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TimingAnimation timing = 2;
 * @return {?proto.nars.animated.TimingAnimation}
 */
proto.nars.animated.Animation.prototype.getTiming = function() {
  return /** @type{?proto.nars.animated.TimingAnimation} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.TimingAnimation, 2));
};


/** @param {?proto.nars.animated.TimingAnimation|undefined} value */
proto.nars.animated.Animation.prototype.setTiming = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nars.animated.Animation.oneofGroups_[0], value);
};


proto.nars.animated.Animation.prototype.clearTiming = function() {
  this.setTiming(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Animation.prototype.hasTiming = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SpringAnimation spring = 3;
 * @return {?proto.nars.animated.SpringAnimation}
 */
proto.nars.animated.Animation.prototype.getSpring = function() {
  return /** @type{?proto.nars.animated.SpringAnimation} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.SpringAnimation, 3));
};


/** @param {?proto.nars.animated.SpringAnimation|undefined} value */
proto.nars.animated.Animation.prototype.setSpring = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.nars.animated.Animation.oneofGroups_[0], value);
};


proto.nars.animated.Animation.prototype.clearSpring = function() {
  this.setSpring(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.Animation.prototype.hasSpring = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.ListValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nars.animated.ListValue.repeatedFields_, null);
};
goog.inherits(proto.nars.animated.ListValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.ListValue.displayName = 'proto.nars.animated.ListValue';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nars.animated.ListValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.ListValue.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.ListValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.ListValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.ListValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.nars.animated.ValueOrAnimatedNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.ListValue}
 */
proto.nars.animated.ListValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.ListValue;
  return proto.nars.animated.ListValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.ListValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.ListValue}
 */
proto.nars.animated.ListValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.ValueOrAnimatedNode;
      reader.readMessage(value,proto.nars.animated.ValueOrAnimatedNode.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.ListValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.ListValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.ListValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.ListValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nars.animated.ValueOrAnimatedNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ValueOrAnimatedNode values = 1;
 * @return {!Array<!proto.nars.animated.ValueOrAnimatedNode>}
 */
proto.nars.animated.ListValue.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.nars.animated.ValueOrAnimatedNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nars.animated.ValueOrAnimatedNode, 1));
};


/** @param {!Array<!proto.nars.animated.ValueOrAnimatedNode>} value */
proto.nars.animated.ListValue.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nars.animated.ValueOrAnimatedNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nars.animated.ValueOrAnimatedNode}
 */
proto.nars.animated.ListValue.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nars.animated.ValueOrAnimatedNode, opt_index);
};


proto.nars.animated.ListValue.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.TopLevelNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.TopLevelNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.TopLevelNode.displayName = 'proto.nars.animated.TopLevelNode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.TopLevelNode.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.TopLevelNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.TopLevelNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.TopLevelNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    node: (f = msg.getNode()) && proto.nars.animated.Node.toObject(includeInstance, f),
    nodeid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.TopLevelNode}
 */
proto.nars.animated.TopLevelNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.TopLevelNode;
  return proto.nars.animated.TopLevelNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.TopLevelNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.TopLevelNode}
 */
proto.nars.animated.TopLevelNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nars.animated.Node;
      reader.readMessage(value,proto.nars.animated.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.TopLevelNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.TopLevelNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.TopLevelNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.TopLevelNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nars.animated.Node.serializeBinaryToWriter
    );
  }
  f = message.getNodeid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Node node = 1;
 * @return {?proto.nars.animated.Node}
 */
proto.nars.animated.TopLevelNode.prototype.getNode = function() {
  return /** @type{?proto.nars.animated.Node} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Node, 1));
};


/** @param {?proto.nars.animated.Node|undefined} value */
proto.nars.animated.TopLevelNode.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.nars.animated.TopLevelNode.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.TopLevelNode.prototype.hasNode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 __nodeID = 2;
 * @return {number}
 */
proto.nars.animated.TopLevelNode.prototype.getNodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nars.animated.TopLevelNode.prototype.setNodeid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.ValueOrAnimatedNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_);
};
goog.inherits(proto.nars.animated.ValueOrAnimatedNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.ValueOrAnimatedNode.displayName = 'proto.nars.animated.ValueOrAnimatedNode';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nars.animated.ValueOrAnimatedNode.oneofGroups_ = [[1,2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.nars.animated.ValueOrAnimatedNode.KindCase = {
  KIND_NOT_SET: 0,
  NULL_VALUE: 1,
  NUMBER_VALUE: 2,
  STRING_VALUE: 3,
  BOOL_VALUE: 4,
  STYLE_VALUE: 5,
  LIST_VALUE: 6,
  UNDEFINED_VALUE: 7,
  NODE: 8
};

/**
 * @return {proto.nars.animated.ValueOrAnimatedNode.KindCase}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getKindCase = function() {
  return /** @type {proto.nars.animated.ValueOrAnimatedNode.KindCase} */(jspb.Message.computeOneofCase(this, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.ValueOrAnimatedNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.ValueOrAnimatedNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.ValueOrAnimatedNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    nullValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numberValue: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    stringValue: jspb.Message.getFieldWithDefault(msg, 3, ""),
    boolValue: jspb.Message.getFieldWithDefault(msg, 4, false),
    styleValue: (f = msg.getStyleValue()) && proto.nars.animated.Style.toObject(includeInstance, f),
    listValue: (f = msg.getListValue()) && proto.nars.animated.ListValue.toObject(includeInstance, f),
    undefinedValue: jspb.Message.getFieldWithDefault(msg, 7, 0),
    node: (f = msg.getNode()) && proto.nars.animated.TopLevelNode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.ValueOrAnimatedNode}
 */
proto.nars.animated.ValueOrAnimatedNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.ValueOrAnimatedNode;
  return proto.nars.animated.ValueOrAnimatedNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.ValueOrAnimatedNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.ValueOrAnimatedNode}
 */
proto.nars.animated.ValueOrAnimatedNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.google_mirror.protobuf.NullValue} */ (reader.readEnum());
      msg.setNullValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumberValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 5:
      var value = new proto.nars.animated.Style;
      reader.readMessage(value,proto.nars.animated.Style.deserializeBinaryFromReader);
      msg.setStyleValue(value);
      break;
    case 6:
      var value = new proto.nars.animated.ListValue;
      reader.readMessage(value,proto.nars.animated.ListValue.deserializeBinaryFromReader);
      msg.setListValue(value);
      break;
    case 7:
      var value = /** @type {!proto.google_mirror.protobuf.UndefinedValue} */ (reader.readEnum());
      msg.setUndefinedValue(value);
      break;
    case 8:
      var value = new proto.nars.animated.TopLevelNode;
      reader.readMessage(value,proto.nars.animated.TopLevelNode.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.ValueOrAnimatedNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.ValueOrAnimatedNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.ValueOrAnimatedNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.google_mirror.protobuf.NullValue} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getStyleValue();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nars.animated.Style.serializeBinaryToWriter
    );
  }
  f = message.getListValue();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nars.animated.ListValue.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.google_mirror.protobuf.UndefinedValue} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.nars.animated.TopLevelNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional google_mirror.protobuf.NullValue null_value = 1;
 * @return {!proto.google_mirror.protobuf.NullValue}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getNullValue = function() {
  return /** @type {!proto.google_mirror.protobuf.NullValue} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.google_mirror.protobuf.NullValue} value */
proto.nars.animated.ValueOrAnimatedNode.prototype.setNullValue = function(value) {
  jspb.Message.setOneofField(this, 1, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], value);
};


proto.nars.animated.ValueOrAnimatedNode.prototype.clearNullValue = function() {
  jspb.Message.setOneofField(this, 1, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.hasNullValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double number_value = 2;
 * @return {number}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getNumberValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.nars.animated.ValueOrAnimatedNode.prototype.setNumberValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], value);
};


proto.nars.animated.ValueOrAnimatedNode.prototype.clearNumberValue = function() {
  jspb.Message.setOneofField(this, 2, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.hasNumberValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string string_value = 3;
 * @return {string}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nars.animated.ValueOrAnimatedNode.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], value);
};


proto.nars.animated.ValueOrAnimatedNode.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 3, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_value = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.nars.animated.ValueOrAnimatedNode.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 4, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], value);
};


proto.nars.animated.ValueOrAnimatedNode.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 4, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Style style_value = 5;
 * @return {?proto.nars.animated.Style}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getStyleValue = function() {
  return /** @type{?proto.nars.animated.Style} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.Style, 5));
};


/** @param {?proto.nars.animated.Style|undefined} value */
proto.nars.animated.ValueOrAnimatedNode.prototype.setStyleValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], value);
};


proto.nars.animated.ValueOrAnimatedNode.prototype.clearStyleValue = function() {
  this.setStyleValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.hasStyleValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ListValue list_value = 6;
 * @return {?proto.nars.animated.ListValue}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getListValue = function() {
  return /** @type{?proto.nars.animated.ListValue} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.ListValue, 6));
};


/** @param {?proto.nars.animated.ListValue|undefined} value */
proto.nars.animated.ValueOrAnimatedNode.prototype.setListValue = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], value);
};


proto.nars.animated.ValueOrAnimatedNode.prototype.clearListValue = function() {
  this.setListValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.hasListValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google_mirror.protobuf.UndefinedValue undefined_value = 7;
 * @return {!proto.google_mirror.protobuf.UndefinedValue}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getUndefinedValue = function() {
  return /** @type {!proto.google_mirror.protobuf.UndefinedValue} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.google_mirror.protobuf.UndefinedValue} value */
proto.nars.animated.ValueOrAnimatedNode.prototype.setUndefinedValue = function(value) {
  jspb.Message.setOneofField(this, 7, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], value);
};


proto.nars.animated.ValueOrAnimatedNode.prototype.clearUndefinedValue = function() {
  jspb.Message.setOneofField(this, 7, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.hasUndefinedValue = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TopLevelNode node = 8;
 * @return {?proto.nars.animated.TopLevelNode}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.getNode = function() {
  return /** @type{?proto.nars.animated.TopLevelNode} */ (
    jspb.Message.getWrapperField(this, proto.nars.animated.TopLevelNode, 8));
};


/** @param {?proto.nars.animated.TopLevelNode|undefined} value */
proto.nars.animated.ValueOrAnimatedNode.prototype.setNode = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.nars.animated.ValueOrAnimatedNode.oneofGroups_[0], value);
};


proto.nars.animated.ValueOrAnimatedNode.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.nars.animated.ValueOrAnimatedNode.prototype.hasNode = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nars.animated.Style = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nars.animated.Style, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nars.animated.Style.displayName = 'proto.nars.animated.Style';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nars.animated.Style.prototype.toObject = function(opt_includeInstance) {
  return proto.nars.animated.Style.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nars.animated.Style} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Style.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsMap: (f = msg.getFieldsMap()) ? f.toObject(includeInstance, proto.nars.animated.ValueOrAnimatedNode.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nars.animated.Style}
 */
proto.nars.animated.Style.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nars.animated.Style;
  return proto.nars.animated.Style.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nars.animated.Style} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nars.animated.Style}
 */
proto.nars.animated.Style.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFieldsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.nars.animated.ValueOrAnimatedNode.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nars.animated.Style.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nars.animated.Style.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nars.animated.Style} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nars.animated.Style.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.nars.animated.ValueOrAnimatedNode.serializeBinaryToWriter);
  }
};


/**
 * map<string, ValueOrAnimatedNode> fields = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.nars.animated.ValueOrAnimatedNode>}
 */
proto.nars.animated.Style.prototype.getFieldsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.nars.animated.ValueOrAnimatedNode>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.nars.animated.ValueOrAnimatedNode));
};


proto.nars.animated.Style.prototype.clearFieldsMap = function() {
  this.getFieldsMap().clear();
};


/**
 * @enum {number}
 */
proto.nars.animated.UnaryOperatorType = {
  SQRT: 0,
  LOG: 1,
  SIN: 2,
  COS: 3,
  TAN: 4,
  ACOS: 5,
  ASIN: 6,
  ATAN: 7,
  EXP: 8,
  ROUND: 9,
  FLOOR: 10,
  CEIL: 11,
  DEFINED: 12,
  NOT: 13
};

/**
 * @enum {number}
 */
proto.nars.animated.MultiOperatorType = {
  ADD: 0,
  SUB: 1,
  MULTIPLY: 2,
  DIVIDE: 3,
  POW: 4,
  MODULO: 5,
  AND: 6,
  OR: 7
};

/**
 * @enum {number}
 */
proto.nars.animated.UnaryDerivedOperatorType = {
  ABS: 0,
  ACC: 1,
  DIFF: 2
};

/**
 * @enum {number}
 */
proto.nars.animated.BinaryOperatorType = {
  MAX: 0,
  MIN: 1,
  LESSTHAN: 2,
  EQ: 3,
  GREATERTHAN: 4,
  LESSOREQ: 5,
  GREATEROREQ: 6,
  NEQ: 7
};

/**
 * @enum {number}
 */
proto.nars.animated.ExtrapolateType = {
  EXTEND: 0,
  CLAMP: 1,
  IDENTITY: 2
};

/**
 * @enum {number}
 */
proto.nars.animated.ClockOperationType = {
  START: 0,
  STOP: 1,
  ISRUNNING: 2
};

goog.object.extend(exports, proto.nars.animated);
