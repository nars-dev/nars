{"version":3,"sources":["Colors.tsx","Form.tsx","../common/src/Config.ts","postGenerator.js","components/Loading.tsx","components/TextPost.tsx","components/ImagePost.tsx","Feed.tsx","ProgressBar.tsx","index.tsx"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","faker","require","PostType","generatePosts","randomPostGenerators","type","Text","text","lorem","sentence","id","random","uuid","Image","src","image","imageUrl","Array","from","length","map","assign","Math","floor"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["export const offWhite = \"rgb(245,248,249)\";\nexport const dark = \"#283336\";\nexport const darkGreen = \"#169099\";\nexport const green = \"#24B7B2\";\nexport const lightGreen = \"#99D8B7\";\nexport const yellow = \"#E5BA39\";\nexport const orange = \"#E57A2D\";\n","import * as React from \"react\";\nimport { offWhite, yellow } from \"./Colors\";\nimport {\n  StyleSheet,\n  FlatList,\n  TextInput,\n  View,\n  Switch,\n  Text,\n  TouchableOpacity,\n} from \"nars\";\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 20,\n  },\n  textInput: {\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 3,\n    fontSize: 16,\n    fontFamily: \"Fira Code\",\n    color: offWhite,\n    backgroundColor: \"#369DA5\",\n  },\n  isCompany: {\n    fontSize: 16,\n    fontFamily: \"Fira Code\",\n    color: offWhite,\n  },\n  submitText: {\n    borderRadius: 3,\n    fontSize: 16,\n    fontFamily: \"Fira Code\",\n    color: offWhite,\n    textAlign: \"center\",\n    paddingVertical: 15,\n    paddingHorizontal: 28,\n    backgroundColor: yellow,\n  },\n  elementContainer: {\n    paddingTop: 20,\n  },\n  companySwitchContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  centeredContents: { alignItems: \"center\" },\n});\n\nenum FieldType {\n  Bool,\n  String,\n  Submit,\n}\n\ntype Field = { key: string } & (\n  | { fieldType: FieldType.String; name: string }\n  | { fieldType: FieldType.Bool; onSet: (_: boolean) => void; value: boolean }\n  | { fieldType: FieldType.Submit; onSubmit: () => void });\n\nconst toField = (field: string): Field => ({\n  key: field,\n  fieldType: FieldType.String,\n  name: field,\n});\n\nconst computeFields = (isCompany: boolean) => ({\n  general: [\"name\", \"surname\", \"email\", \"role\"].map(toField),\n  userSpecific: isCompany\n    ? [\"Tax#\", \"Number of employees\"].map(toField)\n    : [\"ID number\", \"birthdate\"].map(toField),\n});\n\nconst renderItem = ({ item }: { item: Field }) => {\n  switch (item.fieldType) {\n    case FieldType.String:\n      return (\n        <View style={styles.elementContainer}>\n          <TextInput\n            placeholderTextColor={\"#7AC7CC\"}\n            style={styles.textInput}\n            placeholder={item.name}\n            value={\"\"}\n          />\n        </View>\n      );\n    case FieldType.Bool:\n      return (\n        <View style={styles.elementContainer}>\n          <View style={styles.companySwitchContainer}>\n            <Text style={styles.isCompany}>{\"Are you a company\"}</Text>\n            <Switch onValueChange={item.onSet} value={item.value} />\n          </View>\n        </View>\n      );\n    case FieldType.Submit:\n      return (\n        <TouchableOpacity>\n          <View style={[styles.elementContainer, styles.centeredContents]}>\n            <Text style={styles.submitText}>{\"Submit\"}</Text>\n          </View>\n        </TouchableOpacity>\n      );\n    default:\n      throw \"Unreachable\";\n  }\n};\n\nfunction Form(props: { isCompany?: boolean }) {\n  const [isCompany, setIsCompany] = React.useState(Boolean(props.isCompany));\n  const fields = computeFields(isCompany);\n  return (\n    <FlatList\n      data={\n        [\n          ...fields.general,\n          {\n            fieldType: FieldType.Bool,\n            onSet: setIsCompany,\n            value: isCompany,\n            key: \"Is Company\",\n          },\n          ...fields.userSpecific,\n          { fieldType: FieldType.Submit, key: \"Submit\" },\n        ] as Field[]\n      }\n      keyExtractor={({ item: { key } }) => key}\n      renderItem={renderItem}\n    />\n  );\n}\n\nexport default Form;\n","import { InputProp } from \"nars-common\";\n\n/*\n * Define Routes and the props\n */\nexport const config = {\n  Form: {\n    isCompany: InputProp.optional(InputProp.boolean)\n  },\n  Feed: {\n    backgroundColor: InputProp.string\n  },\n  ProgressBar: {\n    height: InputProp.number\n  },\n};\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst faker = __importStar(require(\"faker\"));\nvar PostType;\n(function (PostType) {\n    PostType[PostType[\"Text\"] = 0] = \"Text\";\n    PostType[PostType[\"Image\"] = 1] = \"Image\";\n    PostType[PostType[\"Loading\"] = 2] = \"Loading\";\n})(PostType = exports.PostType || (exports.PostType = {}));\nexports.generatePosts = () => {\n    const randomPostGenerators = [\n        () => ({\n            type: PostType.Text,\n            text: faker.lorem.sentence(),\n            id: faker.random.uuid(),\n        }),\n        () => ({\n            type: PostType.Image,\n            src: faker.image.imageUrl(),\n            text: faker.lorem.sentence(),\n            id: faker.random.uuid(),\n        }),\n    ];\n    const getRandomPost = () => (Object.assign({}, randomPostGenerators[Math.floor(Math.random() * randomPostGenerators.length)]()));\n    return Array.from({ length: 7 }).map(getRandomPost);\n};\n","import * as React from \"react\";\nimport { StyleSheet, View } from \"nars\";\n\nconst Loading = () => (\n  <View style={styles.elementContainer}>\n    <View style={styles.contentContainer}>\n      <View style={styles.fakeImage} />\n      <View style={styles.textPlaceholdersContainer}>\n        <View style={styles.titlePlaceholder} />\n        <View style={styles.subtitlePlaceholder} />\n      </View>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    flexDirection: \"row\",\n  },\n  elementContainer: {\n    paddingTop: 20,\n  },\n  fakeImage: {\n    width: 43,\n    height: 43,\n    borderRadius: 3,\n    backgroundColor: \"#EAEDEE\",\n  },\n  textPlaceholdersContainer: {\n    flex: 1,\n    justifyContent: \"space-between\",\n    marginLeft: 8,\n  },\n  titlePlaceholder: {\n    width: \"30%\",\n    height: 22,\n    borderRadius: 3,\n    backgroundColor: \"#EAEDEE\",\n    marginBottom: 8,\n  },\n  subtitlePlaceholder: {\n    width: \"60%\",\n    height: 22,\n    borderRadius: 3,\n    backgroundColor: \"#EAEDEE\",\n  },\n});\n\nexport default Loading;\n","import * as React from \"react\";\nimport { StyleSheet, View, Text } from \"nars\";\nimport { dark, offWhite } from \"../Colors\";\n\nconst TextPost = ({ text }: { text: string }) => (\n  <View style={styles.elementContainer}>\n    <Text style={textPostStyles.text}>{text}</Text>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 20,\n  },\n  elementContainer: {\n    paddingTop: 20,\n  },\n});\n\nconst textPostStyles = StyleSheet.create({\n  text: {\n    fontSize: 16,\n    fontFamily: \"Fira Code\",\n    color: dark,\n    padding: 16,\n    backgroundColor: offWhite,\n    borderRadius: 3,\n  },\n});\n\nexport default TextPost;\n","import * as React from \"react\";\nimport { StyleSheet, View, Text, Image } from \"nars\";\n\nimport { offWhite, dark } from \"../Colors\";\n\ninterface Props {\n  imageSrc: string;\n  caption: string;\n}\n\nconst ImagePost = ({ imageSrc, caption }: Props) => (\n  <View style={styles.elementContainer}>\n    <View style={styles.contentContainer}>\n      <Image style={styles.image} source={imageSrc} />\n      <Text style={styles.text}>{caption}</Text>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 16,\n    fontFamily: \"Fira Code\",\n    color: dark,\n    paddingTop: 16,\n  },\n  image: {\n    width: \"100%\",\n    height: undefined,\n    aspectRatio: 29 / 18,\n  },\n  elementContainer: {\n    paddingTop: 20,\n  },\n  contentContainer: {\n    padding: 16,\n    backgroundColor: offWhite,\n    borderRadius: 3,\n  },\n});\n\nexport default ImagePost;\n","import * as React from \"react\";\nimport { FlatList } from \"nars\";\n\nimport { Post, PostType, generatePosts } from \"./postGenerator\";\nimport Loading from \"./components/Loading\";\nimport TextPost from \"./components/TextPost\";\nimport ImagePost from \"./components/ImagePost\";\n\nconst renderItem = ({ item }: { item: Post }) => {\n  switch (item.type) {\n    case PostType.Text:\n      return <TextPost text={item.text} />;\n    case PostType.Image:\n      return <ImagePost imageSrc={item.src} caption={item.text} />;\n    case PostType.Loading:\n      return <Loading />;\n  }\n};\n\nfunction Feed(props: { backgroundColor: string }) {\n  const [posts, setPosts] = React.useState(generatePosts);\n  const loadMore = () => {\n    setPosts([...posts, ...generatePosts()]);\n  };\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setPosts([...posts, ...generatePosts()]);\n    }, 1000);\n  }, []);\n\n  return (\n    <FlatList\n      style={{ backgroundColor: props.backgroundColor }}\n      onEndReached={loadMore}\n      onEndReachedThreshold={0.3}\n      data={[...posts, { id: \"loading\", type: PostType.Loading }] as Post[]}\n      keyExtractor={item => item.item.id}\n      renderItem={renderItem}\n    />\n  );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport { View, Animated } from \"nars\";\n\nconst {\n  Value,\n  set,\n  cond,\n  startClock,\n  clockRunning,\n  timing,\n  debug,\n  stopClock,\n  block,\n  concat,\n  add,\n} = Animated;\n\nfunction runTiming(\n  clock: Animated.Clock,\n  value: Animated.Value<number>,\n  dest: Animated.Value<number>\n) {\n  const state = {\n    finished: new Value(0),\n    position: value,\n    time: new Value(0),\n    frameTime: new Value(0),\n  };\n\n  const config = {\n    duration: 200,\n    toValue: dest,\n    /* Easing should return Animated.Node, that's why we have the noop add */\n    easing: (x: Animated.Adaptable<number>) => add(x, 0),\n  };\n\n  return block([\n    cond(clockRunning(clock), 0, [\n      // If the clock isn't running we reset all the animation params and start the clock\n      set(state.finished, 0),\n      set(state.time, 0),\n      set(state.position, value),\n      set(state.frameTime, 0),\n      set(config.toValue, dest),\n      startClock(clock),\n    ]),\n    // we run the step here that is going to update position\n    timing(clock, state, config),\n    // if the animation is over we stop the clock\n    cond(state.finished, debug(\"stop clock\", stopClock(clock))),\n    // we made the block return the updated position\n    state.position,\n  ]);\n}\n\ntype Props = {\n  height: number;\n};\n\nconst ProgressBar = (props: Props) => {\n  const progressValue = 1;\n  const [animation] = React.useState(() => new Value<number>(0));\n  const [transX] = React.useState(() => {\n    const clock = new Animated.Clock();\n    const progress = new Value(0);\n    const transX = runTiming(clock, progress, animation);\n    return transX;\n  });\n  React.useEffect(() => {\n    animation.setValue(100);\n  }, [progressValue]);\n\n  const progressStyle = {\n    width: concat(transX, \"%\"),\n    backgroundColor: \"white\",\n    height: props.height,\n    borderRadius: 2,\n  };\n  return (\n    <View\n      style={[\n        {\n          backgroundColor: \"red\",\n          width: 100,\n          height: 30,\n        },\n      ]}\n    >\n      <Animated.View style={progressStyle} />\n    </View>\n  );\n};\n\nexport default ProgressBar;\n","import { Static } from \"nars\";\nimport { Server } from \"ws\";\nimport Form from \"./Form\";\nimport { config } from \"../common\";\nimport Feed from \"./Feed\";\nimport ProgressBar from \"./ProgressBar\";\n\n/* Define which component is rendered per given route */\nconst components = {\n  Form: Form,\n  Feed: Feed,\n  ProgressBar: ProgressBar\n};\n\n/* Create a router. config and components have to match! */\nconst router = Static.createRouter(config, components);\n\n/* Create a server */\nconst webSocketServer = new Server({ port: 9000 });\n\n/* Start listening for incoming requests */\nStatic.attatchListener(webSocketServer, router);\n"]}