// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function encode(instance, registerCallback, updateAnimatedValue) {
  if (typeof instance === "number") {
    return /* Suspended */0;
  } else if (instance.tag) {
    var inst = instance[0];
    var children = encodeArray(inst.children, registerCallback, updateAnimatedValue);
    if (children) {
      var bridge = {
        registerCallback: registerCallback,
        updateAnimatedValue: updateAnimatedValue
      };
      return /* Encoded */[Curry._4(inst.encode, inst.key, inst.props, bridge, children[0])];
    } else {
      return /* Suspended */0;
    }
  } else {
    return /* Encoded */[{
              key: undefined,
              value: /* `RawText */[
                -687863147,
                instance[0]
              ]
            }];
  }
}

function encodeArray(instances, registerCallback, updateAnimatedValue) {
  var length = instances.length;
  var resultArray = new Array(length);
  var _index = 0;
  while(true) {
    var index = _index;
    if (index === length) {
      return /* Encoded */[resultArray];
    } else {
      var current = Caml_array.caml_array_get(instances, index);
      var match = encode(current, registerCallback, updateAnimatedValue);
      if (match) {
        Caml_array.caml_array_set(resultArray, index, match[0]);
        _index = index + 1 | 0;
        continue ;
      } else {
        return /* Suspended */0;
      }
    }
  };
}

var Struct = /* alias */0;

var waitComponentName = "Wait";

exports.Struct = Struct;
exports.encode = encode;
exports.encodeArray = encodeArray;
exports.waitComponentName = waitComponentName;
/* No side effect */
