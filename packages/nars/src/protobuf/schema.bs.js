// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Struct = require("./struct.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_module = require("bs-platform/lib/js/caml_module.js");
var Nars_animated = require("./nars_animated.bs.js");
var Spec$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/spec.bs.js");
var Result$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/result.bs.js");
var Serialize$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/serialize.bs.js");
var Deserialize$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/deserialize.bs.js");

var Imported$primemodules = {
  Struct: /* alias */0,
  Nars_animated: /* alias */0
};

var StringValue = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      32,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Int32Value = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      53,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Callback = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      74,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var LocalProp = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      95,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var FloatValue = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      116,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var CustomComponent = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      137,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var View = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      158,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var FlatList = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      179,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var TouchableOpacity = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      200,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var RawText = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      221,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var $$Text = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      242,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var TextInput = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      263,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Switch = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      284,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var $$Image = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      305,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var ReactElement = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      326,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Unmount = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      347,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Render = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      368,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Call = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      389,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var ClientToServer = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      410,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var $$Error = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      431,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Update = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      452,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var ServerToClient = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      473,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var AnimatedView = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      494,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var AnimatedText = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      515,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var AnimatedImage = Caml_module.init_mod(/* tuple */[
      "schema.ml",
      536,
      6
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

function name$prime(param) {
  return "schema.StringValue";
}

var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec);

function to_proto(t) {
  return Curry._2(serialize, /* [] */0, t);
}

function constructor(_extensions, a) {
  return a;
}

var spec$1 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$1, constructor);

function from_proto(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), StringValue, {
      name$prime: name$prime,
      to_proto: to_proto,
      from_proto: from_proto
    });

function name$prime$1(param) {
  return "schema.Int32Value";
}

var spec$2 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$1 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$2);

function to_proto$1(t) {
  return Curry._2(serialize$1, /* [] */0, t);
}

function constructor$1(_extensions, a) {
  return a;
}

var spec$3 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$1 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$3, constructor$1);

function from_proto$1(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$1, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Int32Value, {
      name$prime: name$prime$1,
      to_proto: to_proto$1,
      from_proto: from_proto$1
    });

function name$prime$2(param) {
  return "schema.Callback";
}

var spec$4 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$2 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$4);

function to_proto$2(t) {
  return Curry._2(serialize$2, /* [] */0, t);
}

function constructor$2(_extensions, a) {
  return a;
}

var spec$5 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$2 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$5, constructor$2);

function from_proto$2(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$2, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Callback, {
      name$prime: name$prime$2,
      to_proto: to_proto$2,
      from_proto: from_proto$2
    });

function name$prime$3(param) {
  return "schema.LocalProp";
}

var spec$6 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.string,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$3 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$6);

function to_proto$3(t) {
  var f$prime = serialize$3;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.localKey, param.propKey);
}

function constructor$3(_extensions, localKey, propKey) {
  return {
          localKey: localKey,
          propKey: propKey
        };
}

var spec$7 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.string,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$3 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$7, constructor$3);

function from_proto$3(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$3, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), LocalProp, {
      name$prime: name$prime$3,
      to_proto: to_proto$3,
      from_proto: from_proto$3
    });

function name$prime$4(param) {
  return "schema.FloatValue";
}

var spec$8 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.$$float,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$4 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$8);

function to_proto$4(t) {
  return Curry._2(serialize$4, /* [] */0, t);
}

function constructor$4(_extensions, a) {
  return a;
}

var spec$9 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.$$float,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$4 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$9, constructor$4);

function from_proto$4(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$4, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), FloatValue, {
      name$prime: name$prime$4,
      to_proto: to_proto$4,
      from_proto: from_proto$4
    });

function name$prime$5(param) {
  return "schema.CustomComponent";
}

var spec$10 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.bytes,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$5 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$10);

function to_proto$5(t) {
  var f$prime = serialize$5;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.type_id, param.contents);
}

function constructor$5(_extensions, type_id, contents) {
  return {
          type_id: type_id,
          contents: contents
        };
}

var spec$11 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.bytes,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$5 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$11, constructor$5);

function from_proto$5(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$5, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), CustomComponent, {
      name$prime: name$prime$5,
      to_proto: to_proto$5,
      from_proto: from_proto$5
    });

function name$prime$6(param) {
  return "schema.View";
}

var spec$12 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(ReactElement.to_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$6 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$12);

function to_proto$6(t) {
  var f$prime = serialize$6;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.style, param.children);
}

function constructor$6(_extensions, style, children) {
  return {
          style: style,
          children: children
        };
}

var spec$13 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(ReactElement.from_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$6 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$13, constructor$6);

function from_proto$6(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$6, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), View, {
      name$prime: name$prime$6,
      to_proto: to_proto$6,
      from_proto: from_proto$6
    });

function name$prime$7(param) {
  return "schema.FlatList";
}

var spec$14 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Callback.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Int32Value.to_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                              return Curry._1(ReactElement.to_proto, t);
                            })),
                      Spec$Ocamlprotocplugin.Serialize.C.not_packed
                    ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(LocalProp.to_proto, t);
                                })),
                          Spec$Ocamlprotocplugin.Serialize.C.not_packed
                        ]), Spec$Ocamlprotocplugin.Serialize.C.nil)))));

var serialize$7 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$14);

function to_proto$7(t) {
  var f$prime = serialize$7;
  var param = t;
  return Curry._6(f$prime, /* [] */0, param.style, param.onEndReached, param.onEndReachedThreshold, param.children, param.localProps);
}

function constructor$7(_extensions, style, onEndReached, onEndReachedThreshold, children, localProps) {
  return {
          style: style,
          onEndReached: onEndReached,
          onEndReachedThreshold: onEndReachedThreshold,
          children: children,
          localProps: localProps
        };
}

var spec$15 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Callback.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Int32Value.from_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                              return Curry._1(ReactElement.from_proto, t);
                            })),
                      Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                    ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                  return Curry._1(LocalProp.from_proto, t);
                                })),
                          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)))));

var deserialize$7 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$15, constructor$7);

function from_proto$7(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$7, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), FlatList, {
      name$prime: name$prime$7,
      to_proto: to_proto$7,
      from_proto: from_proto$7
    });

function name$prime$8(param) {
  return "schema.TouchableOpacity";
}

var spec$16 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Callback.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(ReactElement.to_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(LocalProp.to_proto, t);
                        })),
                  Spec$Ocamlprotocplugin.Serialize.C.not_packed
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$8 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$16);

function to_proto$8(t) {
  var f$prime = serialize$8;
  var param = t;
  return Curry._4(f$prime, /* [] */0, param.onPress, param.children, param.localProps);
}

function constructor$8(_extensions, onPress, children, localProps) {
  return {
          onPress: onPress,
          children: children,
          localProps: localProps
        };
}

var spec$17 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Callback.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(ReactElement.from_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(LocalProp.from_proto, t);
                        })),
                  Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$8 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$17, constructor$8);

function from_proto$8(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$8, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), TouchableOpacity, {
      name$prime: name$prime$8,
      to_proto: to_proto$8,
      from_proto: from_proto$8
    });

function name$prime$9(param) {
  return "schema.RawText";
}

var spec$18 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$9 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$18);

function to_proto$9(t) {
  return Curry._2(serialize$9, /* [] */0, t);
}

function constructor$9(_extensions, a) {
  return a;
}

var spec$19 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$9 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$19, constructor$9);

function from_proto$9(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$9, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), RawText, {
      name$prime: name$prime$9,
      to_proto: to_proto$9,
      from_proto: from_proto$9
    });

function name$prime$10(param) {
  return "schema.Text";
}

var spec$20 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(ReactElement.to_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Int32Value.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$10 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$20);

function to_proto$10(t) {
  var f$prime = serialize$10;
  var param = t;
  return Curry._4(f$prime, /* [] */0, param.style, param.children, param.numberOfLines);
}

function constructor$10(_extensions, style, children, numberOfLines) {
  return {
          style: style,
          children: children,
          numberOfLines: numberOfLines
        };
}

var spec$21 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(ReactElement.from_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Int32Value.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$10 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$21, constructor$10);

function from_proto$10(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$10, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), $$Text, {
      name$prime: name$prime$10,
      to_proto: to_proto$10,
      from_proto: from_proto$10
    });

function name$prime$11(param) {
  return "schema.TextInput";
}

var spec$22 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(StringValue.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(StringValue.to_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
                      4,
                      Spec$Ocamlprotocplugin.Serialize.C.string,
                      Spec$Ocamlprotocplugin.Serialize.C.proto3
                    ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(LocalProp.to_proto, t);
                                })),
                          Spec$Ocamlprotocplugin.Serialize.C.not_packed
                        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                              6,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                      return Curry._1(Callback.to_proto, t);
                                    }))
                            ]), Spec$Ocamlprotocplugin.Serialize.C.nil))))));

var serialize$11 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$22);

function to_proto$11(t) {
  var f$prime = serialize$11;
  var param = t;
  return Curry._7(f$prime, /* [] */0, param.style, param.placeholderTextColor, param.placeholder, param.value, param.localProps, param.onValueChange);
}

function constructor$11(_extensions, style, placeholderTextColor, placeholder, value, localProps, onValueChange) {
  return {
          style: style,
          placeholderTextColor: placeholderTextColor,
          placeholder: placeholder,
          value: value,
          localProps: localProps,
          onValueChange: onValueChange
        };
}

var spec$23 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(StringValue.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(StringValue.from_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
                      4,
                      Spec$Ocamlprotocplugin.Deserialize.C.string,
                      Spec$Ocamlprotocplugin.Deserialize.C.proto3
                    ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                  return Curry._1(LocalProp.from_proto, t);
                                })),
                          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                              6,
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                      return Curry._1(Callback.from_proto, t);
                                    }))
                            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil))))));

var deserialize$11 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$23, constructor$11);

function from_proto$11(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$11, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), TextInput, {
      name$prime: name$prime$11,
      to_proto: to_proto$11,
      from_proto: from_proto$11
    });

function name$prime$12(param) {
  return "schema.Switch";
}

var spec$24 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.bool,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Callback.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$12 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$24);

function to_proto$12(t) {
  var f$prime = serialize$12;
  var param = t;
  return Curry._4(f$prime, /* [] */0, param.style, param.value, param.onValueChange);
}

function constructor$12(_extensions, style, value, onValueChange) {
  return {
          style: style,
          value: value,
          onValueChange: onValueChange
        };
}

var spec$25 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.bool,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Callback.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$12 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$25, constructor$12);

function from_proto$12(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$12, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Switch, {
      name$prime: name$prime$12,
      to_proto: to_proto$12,
      from_proto: from_proto$12
    });

function name$prime$13(param) {
  return "schema.Image";
}

var spec$26 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.string,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$13 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$26);

function to_proto$13(t) {
  var f$prime = serialize$13;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.style, param.sourceURLString);
}

function constructor$13(_extensions, style, sourceURLString) {
  return {
          style: style,
          sourceURLString: sourceURLString
        };
}

var spec$27 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Struct.Google_mirror.Protobuf.Struct.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.string,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$13 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$27, constructor$13);

function from_proto$13(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$13, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), $$Image, {
      name$prime: name$prime$13,
      to_proto: to_proto$13,
      from_proto: from_proto$13
    });

function name$prime$14(param) {
  return "schema.ReactElement";
}

var spec$28 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(StringValue.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                if (typeof param === "number") {
                  return Pervasives.failwith("This case should never _ever_ happen");
                } else {
                  var variant = param[0];
                  if (variant >= -193011497) {
                    if (variant >= -99762668) {
                      if (variant >= 958946949) {
                        if (variant >= 1034091928) {
                          return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                      13,
                                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                              return Curry._1(AnimatedImage.to_proto, t);
                                            })),
                                      param[1]
                                    ]);
                        } else {
                          return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                      3,
                                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                              return Curry._1(View.to_proto, t);
                                            })),
                                      param[1]
                                    ]);
                        }
                      } else if (variant >= 936573133) {
                        return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                    7,
                                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                            return Curry._1($$Text.to_proto, t);
                                          })),
                                    param[1]
                                  ]);
                      } else {
                        return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                    9,
                                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                            return Curry._1(Switch.to_proto, t);
                                          })),
                                    param[1]
                                  ]);
                      }
                    } else if (variant >= -119655427) {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  6,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(TextInput.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  4,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(FlatList.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    }
                  } else if (variant >= -687863147) {
                    if (variant >= -207705400) {
                      if (variant >= -198771759) {
                        return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                    2,
                                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                            return Curry._1(CustomComponent.to_proto, t);
                                          })),
                                    param[1]
                                  ]);
                      } else {
                        return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                    12,
                                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                            return Curry._1(AnimatedView.to_proto, t);
                                          })),
                                    param[1]
                                  ]);
                      }
                    } else if (variant >= -230079216) {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  11,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(AnimatedText.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  8,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(RawText.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    }
                  } else if (variant >= -711832046) {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                5,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                        return Curry._1(TouchableOpacity.to_proto, t);
                                      })),
                                param[1]
                              ]);
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                10,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                        return Curry._1($$Image.to_proto, t);
                                      })),
                                param[1]
                              ]);
                  }
                }
              })), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$14 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$28);

function to_proto$14(t) {
  var f$prime = serialize$14;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.key, param.value);
}

function constructor$14(_extensions, key, value) {
  return {
          key: key,
          value: value
        };
}

var spec$29 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(StringValue.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    2,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                            return Curry._1(CustomComponent.from_proto, t);
                          })),
                    (function (v) {
                        return /* `Custom */[
                                -198771759,
                                v
                              ];
                      })
                  ]),
              /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      3,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                              return Curry._1(View.from_proto, t);
                            })),
                      (function (v) {
                          return /* `View */[
                                  958946949,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        4,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                return Curry._1(FlatList.from_proto, t);
                              })),
                        (function (v) {
                            return /* `FlatList */[
                                    -193011497,
                                    v
                                  ];
                          })
                      ]),
                  /* :: */[
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                  return Curry._1(TouchableOpacity.from_proto, t);
                                })),
                          (function (v) {
                              return /* `TouchableOpacity */[
                                      -711832046,
                                      v
                                    ];
                            })
                        ]),
                    /* :: */[
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                            6,
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                    return Curry._1(TextInput.from_proto, t);
                                  })),
                            (function (v) {
                                return /* `TextInput */[
                                        -119655427,
                                        v
                                      ];
                              })
                          ]),
                      /* :: */[
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                              7,
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                      return Curry._1($$Text.from_proto, t);
                                    })),
                              (function (v) {
                                  return /* `Text */[
                                          936573133,
                                          v
                                        ];
                                })
                            ]),
                        /* :: */[
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                8,
                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                        return Curry._1(RawText.from_proto, t);
                                      })),
                                (function (v) {
                                    return /* `RawText */[
                                            -687863147,
                                            v
                                          ];
                                  })
                              ]),
                          /* :: */[
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                  9,
                                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                          return Curry._1(Switch.from_proto, t);
                                        })),
                                  (function (v) {
                                      return /* `Switch */[
                                              -99762668,
                                              v
                                            ];
                                    })
                                ]),
                            /* :: */[
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                    10,
                                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                            return Curry._1($$Image.from_proto, t);
                                          })),
                                    (function (v) {
                                        return /* `Image */[
                                                -795439301,
                                                v
                                              ];
                                      })
                                  ]),
                              /* :: */[
                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                      11,
                                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                              return Curry._1(AnimatedText.from_proto, t);
                                            })),
                                      (function (v) {
                                          return /* `AnimatedText */[
                                                  -230079216,
                                                  v
                                                ];
                                        })
                                    ]),
                                /* :: */[
                                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                        12,
                                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                                return Curry._1(AnimatedView.from_proto, t);
                                              })),
                                        (function (v) {
                                            return /* `AnimatedView */[
                                                    -207705400,
                                                    v
                                                  ];
                                          })
                                      ]),
                                  /* :: */[
                                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                          13,
                                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                                  return Curry._1(AnimatedImage.from_proto, t);
                                                })),
                                          (function (v) {
                                              return /* `AnimatedImage */[
                                                      1034091928,
                                                      v
                                                    ];
                                            })
                                        ]),
                                    /* [] */0
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$14 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$29, constructor$14);

function from_proto$14(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$14, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), ReactElement, {
      name$prime: name$prime$14,
      to_proto: to_proto$14,
      from_proto: from_proto$14
    });

function name$prime$15(param) {
  return "schema.Unmount";
}

var spec$30 = Spec$Ocamlprotocplugin.Serialize.C.nil;

var serialize$15 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$30);

function to_proto$15(t) {
  return Curry._1(serialize$15, /* [] */0);
}

function constructor$15(_extension) {
  return /* () */0;
}

var spec$31 = Spec$Ocamlprotocplugin.Deserialize.C.nil;

var deserialize$15 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$31, constructor$15);

function from_proto$15(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$15, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Unmount, {
      name$prime: name$prime$15,
      to_proto: to_proto$15,
      from_proto: from_proto$15
    });

function name$prime$16(param) {
  return "schema.Render";
}

var spec$32 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Struct.Google_mirror.Protobuf.Struct.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                  3,
                  Spec$Ocamlprotocplugin.Serialize.C.string,
                  Spec$Ocamlprotocplugin.Serialize.C.packed
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$16 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$32);

function to_proto$16(t) {
  var f$prime = serialize$16;
  var param = t;
  return Curry._4(f$prime, /* [] */0, param.name, param.props, param.localProps);
}

function constructor$16(_extensions, name, props, localProps) {
  return {
          name: name,
          props: props,
          localProps: localProps
        };
}

var spec$33 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Struct.Google_mirror.Protobuf.Struct.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                  3,
                  Spec$Ocamlprotocplugin.Deserialize.C.string,
                  Spec$Ocamlprotocplugin.Deserialize.C.packed
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$16 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$33, constructor$16);

function from_proto$16(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$16, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Render, {
      name$prime: name$prime$16,
      to_proto: to_proto$16,
      from_proto: from_proto$16
    });

function name$prime$17(param) {
  return "schema.Call";
}

var spec$34 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Struct.Google_mirror.Protobuf.Struct.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$17 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$34);

function to_proto$17(t) {
  var f$prime = serialize$17;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.messageId, param.args);
}

function constructor$17(_extensions, messageId, args) {
  return {
          messageId: messageId,
          args: args
        };
}

var spec$35 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Struct.Google_mirror.Protobuf.Struct.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$17 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$35, constructor$17);

function from_proto$17(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$17, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Call, {
      name$prime: name$prime$17,
      to_proto: to_proto$17,
      from_proto: from_proto$17
    });

function name$prime$18(param) {
  return "schema.ClientToServer";
}

var spec$36 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                if (typeof param === "number") {
                  return Pervasives.failwith("This case should never _ever_ happen");
                } else {
                  var variant = param[0];
                  if (variant !== 747848894) {
                    if (variant >= 968744822) {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  3,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(Render.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  2,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(Unmount.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    }
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                4,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                        return Curry._1(Call.to_proto, t);
                                      })),
                                param[1]
                              ]);
                  }
                }
              })), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$18 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$36);

function to_proto$18(t) {
  var f$prime = serialize$18;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.rootId, param.value);
}

function constructor$18(_extensions, rootId, value) {
  return {
          rootId: rootId,
          value: value
        };
}

var spec$37 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    2,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                            return Curry._1(Unmount.from_proto, t);
                          })),
                    (function (v) {
                        return /* `Unmount */[
                                -699977536,
                                v
                              ];
                      })
                  ]),
              /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      3,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                              return Curry._1(Render.from_proto, t);
                            })),
                      (function (v) {
                          return /* `Render */[
                                  968744822,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        4,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                return Curry._1(Call.from_proto, t);
                              })),
                        (function (v) {
                            return /* `Call */[
                                    747848894,
                                    v
                                  ];
                          })
                      ]),
                  /* [] */0
                ]
              ]
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$18 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$37, constructor$18);

function from_proto$18(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$18, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), ClientToServer, {
      name$prime: name$prime$18,
      to_proto: to_proto$18,
      from_proto: from_proto$18
    });

function name$prime$19(param) {
  return "schema.Error";
}

var spec$38 = Spec$Ocamlprotocplugin.Serialize.C.nil;

var serialize$19 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$38);

function to_proto$19(t) {
  return Curry._1(serialize$19, /* [] */0);
}

function constructor$19(_extension) {
  return /* () */0;
}

var spec$39 = Spec$Ocamlprotocplugin.Deserialize.C.nil;

var deserialize$19 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$39, constructor$19);

function from_proto$19(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$19, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), $$Error, {
      name$prime: name$prime$19,
      to_proto: to_proto$19,
      from_proto: from_proto$19
    });

function name$prime$20(param) {
  return "schema.Update";
}

var spec$40 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(ReactElement.to_proto, t);
                })),
          Spec$Ocamlprotocplugin.Serialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$20 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$40);

function to_proto$20(t) {
  return Curry._2(serialize$20, /* [] */0, t);
}

function constructor$20(_extensions, a) {
  return a;
}

var spec$41 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(ReactElement.from_proto, t);
                })),
          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$20 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$41, constructor$20);

function from_proto$20(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$20, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Update, {
      name$prime: name$prime$20,
      to_proto: to_proto$20,
      from_proto: from_proto$20
    });

function name$prime$21(param) {
  return "schema.ServerToClient";
}

var spec$42 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                if (typeof param === "number") {
                  return Pervasives.failwith("This case should never _ever_ happen");
                } else {
                  var variant = param[0];
                  if (variant !== 106380200) {
                    if (variant >= 999946793) {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  3,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(Update.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  4,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(Nars_animated.Nars.Animated.ValueUpdate.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    }
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                2,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                        return Curry._1($$Error.to_proto, t);
                                      })),
                                param[1]
                              ]);
                  }
                }
              })), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$21 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$42);

function to_proto$21(t) {
  var f$prime = serialize$21;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.rootId, param.value);
}

function constructor$21(_extensions, rootId, value) {
  return {
          rootId: rootId,
          value: value
        };
}

var spec$43 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    2,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                            return Curry._1($$Error.from_proto, t);
                          })),
                    (function (v) {
                        return /* `Error */[
                                106380200,
                                v
                              ];
                      })
                  ]),
              /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      3,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                              return Curry._1(Update.from_proto, t);
                            })),
                      (function (v) {
                          return /* `Update */[
                                  999946793,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        4,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                return Curry._1(Nars_animated.Nars.Animated.ValueUpdate.from_proto, t);
                              })),
                        (function (v) {
                            return /* `AnimatedValueUpdate */[
                                    -20525481,
                                    v
                                  ];
                          })
                      ]),
                  /* [] */0
                ]
              ]
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$21 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$43, constructor$21);

function from_proto$21(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$21, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), ServerToClient, {
      name$prime: name$prime$21,
      to_proto: to_proto$21,
      from_proto: from_proto$21
    });

function name$prime$22(param) {
  return "schema.AnimatedView";
}

var spec$44 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Nars_animated.Nars.Animated.Style.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(ReactElement.to_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$22 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$44);

function to_proto$22(t) {
  var f$prime = serialize$22;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.style, param.children);
}

function constructor$22(_extensions, style, children) {
  return {
          style: style,
          children: children
        };
}

var spec$45 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Nars_animated.Nars.Animated.Style.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(ReactElement.from_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$22 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$45, constructor$22);

function from_proto$22(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$22, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), AnimatedView, {
      name$prime: name$prime$22,
      to_proto: to_proto$22,
      from_proto: from_proto$22
    });

function name$prime$23(param) {
  return "schema.AnimatedText";
}

var spec$46 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Nars_animated.Nars.Animated.Style.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(ReactElement.to_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$23 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$46);

function to_proto$23(t) {
  var f$prime = serialize$23;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.style, param.children);
}

function constructor$23(_extensions, style, children) {
  return {
          style: style,
          children: children
        };
}

var spec$47 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Nars_animated.Nars.Animated.Style.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(ReactElement.from_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$23 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$47, constructor$23);

function from_proto$23(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$23, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), AnimatedText, {
      name$prime: name$prime$23,
      to_proto: to_proto$23,
      from_proto: from_proto$23
    });

function name$prime$24(param) {
  return "schema.AnimatedImage";
}

var spec$48 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Nars_animated.Nars.Animated.Style.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.string,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$24 = Serialize$Ocamlprotocplugin.serialize(/* [] */0, spec$48);

function to_proto$24(t) {
  var f$prime = serialize$24;
  var param = t;
  return Curry._3(f$prime, /* [] */0, param.style, param.sourceURLString);
}

function constructor$24(_extensions, style, sourceURLString) {
  return {
          style: style,
          sourceURLString: sourceURLString
        };
}

var spec$49 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Nars_animated.Nars.Animated.Style.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.string,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$24 = Deserialize$Ocamlprotocplugin.deserialize(/* [] */0, spec$49, constructor$24);

function from_proto$24(writer) {
  return Result$Ocamlprotocplugin.open_error(Curry._1(deserialize$24, writer));
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), AnimatedImage, {
      name$prime: name$prime$24,
      to_proto: to_proto$24,
      from_proto: from_proto$24
    });

exports.Imported$primemodules = Imported$primemodules;
exports.StringValue = StringValue;
exports.Int32Value = Int32Value;
exports.Callback = Callback;
exports.LocalProp = LocalProp;
exports.FloatValue = FloatValue;
exports.CustomComponent = CustomComponent;
exports.View = View;
exports.FlatList = FlatList;
exports.TouchableOpacity = TouchableOpacity;
exports.RawText = RawText;
exports.$$Text = $$Text;
exports.TextInput = TextInput;
exports.Switch = Switch;
exports.$$Image = $$Image;
exports.ReactElement = ReactElement;
exports.Unmount = Unmount;
exports.Render = Render;
exports.Call = Call;
exports.ClientToServer = ClientToServer;
exports.$$Error = $$Error;
exports.Update = Update;
exports.ServerToClient = ServerToClient;
exports.AnimatedView = AnimatedView;
exports.AnimatedText = AnimatedText;
exports.AnimatedImage = AnimatedImage;
/* StringValue Not a pure module */
