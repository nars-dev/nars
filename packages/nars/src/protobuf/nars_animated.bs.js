// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Struct = require("./struct.bs.js");
var Caml_module = require("bs-platform/lib/js/caml_module.js");
var Spec$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/spec.bs.js");
var Serialize$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/serialize.bs.js");
var Deserialize$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/deserialize.bs.js");

var UnaryOperatorType = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      25,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]));

var MultiOperatorType = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      65,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]));

var UnaryDerivedOperatorType = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      93,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]));

var BinaryOperatorType = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      111,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]));

var ExtrapolateType = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      139,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]));

var ClockOperationType = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      157,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]));

var EasingCustom = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      176,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var EasingStatic = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      197,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var EasingFunction = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      218,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var UnaryOperator = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      239,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var MultiOperator = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      260,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Condition = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      281,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Value = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      302,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Setter = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      323,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var UnaryDerivedOperator = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      344,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var BinaryOperator = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      365,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Color = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      386,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var DiffClamp = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      407,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Extrapolate = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      428,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var InterpolationConfig = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      449,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Interpolate = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      470,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Block$1 = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      491,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Concat = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      512,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var $$Node = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      533,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var ValueArgument = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      554,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Primitive = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      575,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Adaptable = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      596,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Call = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      617,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Debug = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      638,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var OnChange = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      659,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Clock = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      680,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var ClockOperation = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      701,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var AnimationState = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      722,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var PhysicsAnimationState = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      743,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var DecayConfig = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      764,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var DecayAnimation = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      785,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var TimingState = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      806,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var TimingConfig = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      827,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var TimingAnimation = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      848,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var SpringConfig = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      869,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var SpringAnimation = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      890,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Animation = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      911,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var ListValue = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      932,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var TopLevelNode = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      953,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var ValueOrAnimatedNode = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      974,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var Style = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      1001,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Module */Block.__(0, [/* array */[
                  /* tuple */[
                    /* Function */0,
                    "name'"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "to_proto"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "from_proto"
                  ]
                ]]),
            "FieldsEntry"
          ],
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

var ValueUpdate = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      1043,
      10
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

function to_int(param) {
  return param;
}

function from_int(n) {
  switch (n) {
    case 0 :
        return /* Ok */Block.__(0, [/* Sqrt */0]);
    case 1 :
        return /* Ok */Block.__(0, [/* Log */1]);
    case 2 :
        return /* Ok */Block.__(0, [/* Sin */2]);
    case 3 :
        return /* Ok */Block.__(0, [/* Cos */3]);
    case 4 :
        return /* Ok */Block.__(0, [/* Tan */4]);
    case 5 :
        return /* Ok */Block.__(0, [/* Acos */5]);
    case 6 :
        return /* Ok */Block.__(0, [/* Asin */6]);
    case 7 :
        return /* Ok */Block.__(0, [/* Atan */7]);
    case 8 :
        return /* Ok */Block.__(0, [/* Exp */8]);
    case 9 :
        return /* Ok */Block.__(0, [/* Round */9]);
    case 10 :
        return /* Ok */Block.__(0, [/* Floor */10]);
    case 11 :
        return /* Ok */Block.__(0, [/* Ceil */11]);
    case 12 :
        return /* Ok */Block.__(0, [/* Defined */12]);
    case 13 :
        return /* Ok */Block.__(0, [/* Not */13]);
    default:
      return /* Error */Block.__(1, [/* `Unknown_enum_value */[
                  353152616,
                  n
                ]]);
  }
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]), UnaryOperatorType, {
      to_int: to_int,
      from_int: from_int
    });

function to_int$1(param) {
  return param;
}

function from_int$1(n) {
  switch (n) {
    case 0 :
        return /* Ok */Block.__(0, [/* Add */0]);
    case 1 :
        return /* Ok */Block.__(0, [/* Sub */1]);
    case 2 :
        return /* Ok */Block.__(0, [/* Multiply */2]);
    case 3 :
        return /* Ok */Block.__(0, [/* Divide */3]);
    case 4 :
        return /* Ok */Block.__(0, [/* Pow */4]);
    case 5 :
        return /* Ok */Block.__(0, [/* Modulo */5]);
    case 6 :
        return /* Ok */Block.__(0, [/* And */6]);
    case 7 :
        return /* Ok */Block.__(0, [/* Or */7]);
    default:
      return /* Error */Block.__(1, [/* `Unknown_enum_value */[
                  353152616,
                  n
                ]]);
  }
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]), MultiOperatorType, {
      to_int: to_int$1,
      from_int: from_int$1
    });

function to_int$2(param) {
  return param;
}

function from_int$2(n) {
  switch (n) {
    case 0 :
        return /* Ok */Block.__(0, [/* Abs */0]);
    case 1 :
        return /* Ok */Block.__(0, [/* Acc */1]);
    case 2 :
        return /* Ok */Block.__(0, [/* Diff */2]);
    default:
      return /* Error */Block.__(1, [/* `Unknown_enum_value */[
                  353152616,
                  n
                ]]);
  }
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]), UnaryDerivedOperatorType, {
      to_int: to_int$2,
      from_int: from_int$2
    });

function to_int$3(param) {
  return param;
}

function from_int$3(n) {
  switch (n) {
    case 0 :
        return /* Ok */Block.__(0, [/* Max */0]);
    case 1 :
        return /* Ok */Block.__(0, [/* Min */1]);
    case 2 :
        return /* Ok */Block.__(0, [/* LessThan */2]);
    case 3 :
        return /* Ok */Block.__(0, [/* Eq */3]);
    case 4 :
        return /* Ok */Block.__(0, [/* GreaterThan */4]);
    case 5 :
        return /* Ok */Block.__(0, [/* LessOrEq */5]);
    case 6 :
        return /* Ok */Block.__(0, [/* GreaterOrEq */6]);
    case 7 :
        return /* Ok */Block.__(0, [/* Neq */7]);
    default:
      return /* Error */Block.__(1, [/* `Unknown_enum_value */[
                  353152616,
                  n
                ]]);
  }
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]), BinaryOperatorType, {
      to_int: to_int$3,
      from_int: from_int$3
    });

function to_int$4(param) {
  return param;
}

function from_int$4(n) {
  switch (n) {
    case 0 :
        return /* Ok */Block.__(0, [/* Extend */0]);
    case 1 :
        return /* Ok */Block.__(0, [/* Clamp */1]);
    case 2 :
        return /* Ok */Block.__(0, [/* Identity */2]);
    default:
      return /* Error */Block.__(1, [/* `Unknown_enum_value */[
                  353152616,
                  n
                ]]);
  }
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]), ExtrapolateType, {
      to_int: to_int$4,
      from_int: from_int$4
    });

function to_int$5(param) {
  return param;
}

function from_int$5(n) {
  switch (n) {
    case 0 :
        return /* Ok */Block.__(0, [/* Start */0]);
    case 1 :
        return /* Ok */Block.__(0, [/* Stop */1]);
    case 2 :
        return /* Ok */Block.__(0, [/* IsRunning */2]);
    default:
      return /* Error */Block.__(1, [/* `Unknown_enum_value */[
                  353152616,
                  n
                ]]);
  }
}

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "to_int"
          ],
          /* tuple */[
            /* Function */0,
            "from_int"
          ]
        ]]), ClockOperationType, {
      to_int: to_int$5,
      from_int: from_int$5
    });

function name$prime(param) {
  return "Nars_animated.nars.animated.EasingCustom";
}

var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1($$Node.to_proto, t);
                }))
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize = Serialize$Ocamlprotocplugin.serialize(spec);

function to_proto(t) {
  return Curry._2(serialize, /* () */0, t);
}

function constructor(a) {
  return a;
}

var spec$1 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1($$Node.from_proto, t);
                }))
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec$1, constructor);

var from_proto = Curry.__1(deserialize);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), EasingCustom, {
      name$prime: name$prime,
      to_proto: to_proto,
      from_proto: from_proto
    });

function name$prime$1(param) {
  return "Nars_animated.nars.animated.EasingStatic";
}

var spec$2 = Spec$Ocamlprotocplugin.Serialize.C.nil;

var serialize$1 = Serialize$Ocamlprotocplugin.serialize(spec$2);

function to_proto$1(t) {
  return Curry._1(serialize$1, /* () */0);
}

var spec$3 = Spec$Ocamlprotocplugin.Deserialize.C.nil;

var deserialize$1 = Deserialize$Ocamlprotocplugin.deserialize(spec$3, /* () */0);

var from_proto$1 = Curry.__1(deserialize$1);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), EasingStatic, {
      name$prime: name$prime$1,
      to_proto: to_proto$1,
      from_proto: from_proto$1
    });

function name$prime$2(param) {
  return "Nars_animated.nars.animated.EasingFunction";
}

var spec$4 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
            if (param[0] >= 1024993923) {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          1,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(EasingStatic.to_proto, t);
                                })),
                          param[1]
                        ]);
            } else {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          2,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(EasingCustom.to_proto, t);
                                })),
                          param[1]
                        ]);
            }
          })), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$2 = Serialize$Ocamlprotocplugin.serialize(spec$4);

function to_proto$2(t) {
  return Curry._2(serialize$2, /* () */0, t);
}

function constructor$1(a) {
  return a;
}

var spec$5 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                1,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                        return Curry._1(EasingStatic.from_proto, t);
                      })),
                (function (v) {
                    return /* `Builtin */[
                            1024993923,
                            v
                          ];
                  })
              ]),
          /* :: */[
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                  2,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(EasingCustom.from_proto, t);
                        })),
                  (function (v) {
                      return /* `Custom */[
                              -198771759,
                              v
                            ];
                    })
                ]),
            /* [] */0
          ]
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$2 = Deserialize$Ocamlprotocplugin.deserialize(spec$5, constructor$1);

var from_proto$2 = Curry.__1(deserialize$2);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), EasingFunction, {
      name$prime: name$prime$2,
      to_proto: to_proto$2,
      from_proto: from_proto$2
    });

function name$prime$3(param) {
  return "Nars_animated.nars.animated.UnaryOperator";
}

var spec$6 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.$$enum, UnaryOperatorType.to_int),
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$3 = Serialize$Ocamlprotocplugin.serialize(spec$6);

function to_proto$3(t) {
  var f$prime = Curry._1(serialize$3, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.value, param.operator);
}

function constructor$2(value, operator) {
  return {
          value: value,
          operator: operator
        };
}

var spec$7 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.$$enum, UnaryOperatorType.from_int),
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$3 = Deserialize$Ocamlprotocplugin.deserialize(spec$7, constructor$2);

var from_proto$3 = Curry.__1(deserialize$3);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), UnaryOperator, {
      name$prime: name$prime$3,
      to_proto: to_proto$3,
      from_proto: from_proto$3
    });

function name$prime$4(param) {
  return "Nars_animated.nars.animated.MultiOperator";
}

var spec$8 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Adaptable.to_proto, t);
                        })),
                  Spec$Ocamlprotocplugin.Serialize.C.not_packed
                ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.$$enum, MultiOperatorType.to_int),
                      Spec$Ocamlprotocplugin.Serialize.C.proto3
                    ]), Spec$Ocamlprotocplugin.Serialize.C.nil))));

var serialize$4 = Serialize$Ocamlprotocplugin.serialize(spec$8);

function to_proto$4(t) {
  var f$prime = Curry._1(serialize$4, /* () */0);
  var param = t;
  return Curry._4(f$prime, param.a, param.b, param.others, param.operator);
}

function constructor$3(a, b, others, operator) {
  return {
          a: a,
          b: b,
          others: others,
          operator: operator
        };
}

var spec$9 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Adaptable.from_proto, t);
                        })),
                  Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.$$enum, MultiOperatorType.from_int),
                      Spec$Ocamlprotocplugin.Deserialize.C.proto3
                    ]), Spec$Ocamlprotocplugin.Deserialize.C.nil))));

var deserialize$4 = Deserialize$Ocamlprotocplugin.deserialize(spec$9, constructor$3);

var from_proto$4 = Curry.__1(deserialize$4);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), MultiOperator, {
      name$prime: name$prime$4,
      to_proto: to_proto$4,
      from_proto: from_proto$4
    });

function name$prime$5(param) {
  return "Nars_animated.nars.animated.Condition";
}

var spec$10 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Adaptable.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$5 = Serialize$Ocamlprotocplugin.serialize(spec$10);

function to_proto$5(t) {
  var f$prime = Curry._1(serialize$5, /* () */0);
  var param = t;
  return Curry._3(f$prime, param.condition, param.ifNode, param.elseNode);
}

function constructor$4(condition, ifNode, elseNode) {
  return {
          condition: condition,
          ifNode: ifNode,
          elseNode: elseNode
        };
}

var spec$11 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Adaptable.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$5 = Deserialize$Ocamlprotocplugin.deserialize(spec$11, constructor$4);

var from_proto$5 = Curry.__1(deserialize$5);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Condition, {
      name$prime: name$prime$5,
      to_proto: to_proto$5,
      from_proto: from_proto$5
    });

function name$prime$6(param) {
  return "Nars_animated.nars.animated.Value";
}

var spec$12 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
            var variant = param[0];
            if (variant !== 365180284) {
              if (variant >= 737456202) {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            3,
                            Spec$Ocamlprotocplugin.Serialize.C.bool,
                            param[1]
                          ]);
              } else {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            2,
                            Spec$Ocamlprotocplugin.Serialize.C.string,
                            param[1]
                          ]);
              }
            } else {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          1,
                          Spec$Ocamlprotocplugin.Serialize.C.$$float,
                          param[1]
                        ]);
            }
          })), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              4,
              Spec$Ocamlprotocplugin.Serialize.C.int32_int,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$6 = Serialize$Ocamlprotocplugin.serialize(spec$12);

function to_proto$6(t) {
  var f$prime = Curry._1(serialize$6, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.initialValue, param.__nodeID);
}

function constructor$5(initialValue, __nodeID) {
  return {
          initialValue: initialValue,
          __nodeID: __nodeID
        };
}

var spec$13 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                1,
                Spec$Ocamlprotocplugin.Deserialize.C.$$float,
                (function (v) {
                    return /* `Float */[
                            365180284,
                            v
                          ];
                  })
              ]),
          /* :: */[
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                  2,
                  Spec$Ocamlprotocplugin.Deserialize.C.string,
                  (function (v) {
                      return /* `String */[
                              -976970511,
                              v
                            ];
                    })
                ]),
            /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    3,
                    Spec$Ocamlprotocplugin.Deserialize.C.bool,
                    (function (v) {
                        return /* `Bool */[
                                737456202,
                                v
                              ];
                      })
                  ]),
              /* [] */0
            ]
          ]
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              4,
              Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$6 = Deserialize$Ocamlprotocplugin.deserialize(spec$13, constructor$5);

var from_proto$6 = Curry.__1(deserialize$6);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Value, {
      name$prime: name$prime$6,
      to_proto: to_proto$6,
      from_proto: from_proto$6
    });

function name$prime$7(param) {
  return "Nars_animated.nars.animated.Setter";
}

var spec$14 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Value.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$7 = Serialize$Ocamlprotocplugin.serialize(spec$14);

function to_proto$7(t) {
  var f$prime = Curry._1(serialize$7, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.valueToBeUpdated, param.toValue);
}

function constructor$6(valueToBeUpdated, toValue) {
  return {
          valueToBeUpdated: valueToBeUpdated,
          toValue: toValue
        };
}

var spec$15 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Value.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$7 = Deserialize$Ocamlprotocplugin.deserialize(spec$15, constructor$6);

var from_proto$7 = Curry.__1(deserialize$7);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Setter, {
      name$prime: name$prime$7,
      to_proto: to_proto$7,
      from_proto: from_proto$7
    });

function name$prime$8(param) {
  return "Nars_animated.nars.animated.UnaryDerivedOperator";
}

var spec$16 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.$$enum, UnaryDerivedOperatorType.to_int),
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$8 = Serialize$Ocamlprotocplugin.serialize(spec$16);

function to_proto$8(t) {
  var f$prime = Curry._1(serialize$8, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.value, param.operator);
}

function constructor$7(value, operator) {
  return {
          value: value,
          operator: operator
        };
}

var spec$17 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.$$enum, UnaryDerivedOperatorType.from_int),
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$8 = Deserialize$Ocamlprotocplugin.deserialize(spec$17, constructor$7);

var from_proto$8 = Curry.__1(deserialize$8);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), UnaryDerivedOperator, {
      name$prime: name$prime$8,
      to_proto: to_proto$8,
      from_proto: from_proto$8
    });

function name$prime$9(param) {
  return "Nars_animated.nars.animated.BinaryOperator";
}

var spec$18 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.$$enum, BinaryOperatorType.to_int),
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Adaptable.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$9 = Serialize$Ocamlprotocplugin.serialize(spec$18);

function to_proto$9(t) {
  var f$prime = Curry._1(serialize$9, /* () */0);
  var param = t;
  return Curry._3(f$prime, param.operator, param.left, param.right);
}

function constructor$8(operator, left, right) {
  return {
          operator: operator,
          left: left,
          right: right
        };
}

var spec$19 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.$$enum, BinaryOperatorType.from_int),
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Adaptable.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$9 = Deserialize$Ocamlprotocplugin.deserialize(spec$19, constructor$8);

var from_proto$9 = Curry.__1(deserialize$9);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), BinaryOperator, {
      name$prime: name$prime$9,
      to_proto: to_proto$9,
      from_proto: from_proto$9
    });

function name$prime$10(param) {
  return "Nars_animated.nars.animated.Color";
}

var spec$20 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Adaptable.to_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                              return Curry._1(Adaptable.to_proto, t);
                            }))
                    ]), Spec$Ocamlprotocplugin.Serialize.C.nil))));

var serialize$10 = Serialize$Ocamlprotocplugin.serialize(spec$20);

function to_proto$10(t) {
  var f$prime = Curry._1(serialize$10, /* () */0);
  var param = t;
  return Curry._4(f$prime, param.r, param.g, param.b, param.alpha);
}

function constructor$9(r, g, b, alpha) {
  return {
          r: r,
          g: g,
          b: b,
          alpha: alpha
        };
}

var spec$21 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Adaptable.from_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                              return Curry._1(Adaptable.from_proto, t);
                            }))
                    ]), Spec$Ocamlprotocplugin.Deserialize.C.nil))));

var deserialize$10 = Deserialize$Ocamlprotocplugin.deserialize(spec$21, constructor$9);

var from_proto$10 = Curry.__1(deserialize$10);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Color, {
      name$prime: name$prime$10,
      to_proto: to_proto$10,
      from_proto: from_proto$10
    });

function name$prime$11(param) {
  return "Nars_animated.nars.animated.DiffClamp";
}

var spec$22 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Adaptable.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$11 = Serialize$Ocamlprotocplugin.serialize(spec$22);

function to_proto$11(t) {
  var f$prime = Curry._1(serialize$11, /* () */0);
  var param = t;
  return Curry._3(f$prime, param.value, param.minVal, param.maxVal);
}

function constructor$10(value, minVal, maxVal) {
  return {
          value: value,
          minVal: minVal,
          maxVal: maxVal
        };
}

var spec$23 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Adaptable.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$11 = Deserialize$Ocamlprotocplugin.deserialize(spec$23, constructor$10);

var from_proto$11 = Curry.__1(deserialize$11);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), DiffClamp, {
      name$prime: name$prime$11,
      to_proto: to_proto$11,
      from_proto: from_proto$11
    });

function name$prime$12(param) {
  return "Nars_animated.nars.animated.Extrapolate";
}

var spec$24 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.$$enum, ExtrapolateType.to_int),
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$12 = Serialize$Ocamlprotocplugin.serialize(spec$24);

function to_proto$12(t) {
  return Curry._2(serialize$12, /* () */0, t);
}

function constructor$11(a) {
  return a;
}

var spec$25 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.$$enum, ExtrapolateType.from_int),
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$12 = Deserialize$Ocamlprotocplugin.deserialize(spec$25, constructor$11);

var from_proto$12 = Curry.__1(deserialize$12);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Extrapolate, {
      name$prime: name$prime$12,
      to_proto: to_proto$12,
      from_proto: from_proto$12
    });

function name$prime$13(param) {
  return "Nars_animated.nars.animated.InterpolationConfig";
}

var spec$26 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                })),
          Spec$Ocamlprotocplugin.Serialize.C.not_packed
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Extrapolate.to_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                              return Curry._1(Extrapolate.to_proto, t);
                            }))
                    ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(Extrapolate.to_proto, t);
                                }))
                        ]), Spec$Ocamlprotocplugin.Serialize.C.nil)))));

var serialize$13 = Serialize$Ocamlprotocplugin.serialize(spec$26);

function to_proto$13(t) {
  var f$prime = Curry._1(serialize$13, /* () */0);
  var param = t;
  return Curry._5(f$prime, param.inputRange, param.outputRange, param.extrapolate, param.extrapolateLeft, param.extrapolateRight);
}

function constructor$12(inputRange, outputRange, extrapolate, extrapolateLeft, extrapolateRight) {
  return {
          inputRange: inputRange,
          outputRange: outputRange,
          extrapolate: extrapolate,
          extrapolateLeft: extrapolateLeft,
          extrapolateRight: extrapolateRight
        };
}

var spec$27 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                })),
          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    })),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Extrapolate.from_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                              return Curry._1(Extrapolate.from_proto, t);
                            }))
                    ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                  return Curry._1(Extrapolate.from_proto, t);
                                }))
                        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)))));

var deserialize$13 = Deserialize$Ocamlprotocplugin.deserialize(spec$27, constructor$12);

var from_proto$13 = Curry.__1(deserialize$13);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), InterpolationConfig, {
      name$prime: name$prime$13,
      to_proto: to_proto$13,
      from_proto: from_proto$13
    });

function name$prime$14(param) {
  return "Nars_animated.nars.animated.Interpolate";
}

var spec$28 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(InterpolationConfig.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$14 = Serialize$Ocamlprotocplugin.serialize(spec$28);

function to_proto$14(t) {
  var f$prime = Curry._1(serialize$14, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.value, param.config);
}

function constructor$13(value, config) {
  return {
          value: value,
          config: config
        };
}

var spec$29 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(InterpolationConfig.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$14 = Deserialize$Ocamlprotocplugin.deserialize(spec$29, constructor$13);

var from_proto$14 = Curry.__1(deserialize$14);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Interpolate, {
      name$prime: name$prime$14,
      to_proto: to_proto$14,
      from_proto: from_proto$14
    });

function name$prime$15(param) {
  return "Nars_animated.nars.animated.Block";
}

var spec$30 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                })),
          Spec$Ocamlprotocplugin.Serialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$15 = Serialize$Ocamlprotocplugin.serialize(spec$30);

function to_proto$15(t) {
  return Curry._2(serialize$15, /* () */0, t);
}

function constructor$14(a) {
  return a;
}

var spec$31 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                })),
          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$15 = Deserialize$Ocamlprotocplugin.deserialize(spec$31, constructor$14);

var from_proto$15 = Curry.__1(deserialize$15);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Block$1, {
      name$prime: name$prime$15,
      to_proto: to_proto$15,
      from_proto: from_proto$15
    });

function name$prime$16(param) {
  return "Nars_animated.nars.animated.Concat";
}

var spec$32 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                })),
          Spec$Ocamlprotocplugin.Serialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$16 = Serialize$Ocamlprotocplugin.serialize(spec$32);

function to_proto$16(t) {
  return Curry._2(serialize$16, /* () */0, t);
}

function constructor$15(a) {
  return a;
}

var spec$33 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                })),
          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$16 = Deserialize$Ocamlprotocplugin.deserialize(spec$33, constructor$15);

var from_proto$16 = Curry.__1(deserialize$16);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Concat, {
      name$prime: name$prime$16,
      to_proto: to_proto$16,
      from_proto: from_proto$16
    });

function name$prime$17(param) {
  return "Nars_animated.nars.animated.Node";
}

var spec$34 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
            var variant = param[0];
            if (variant >= -60523212) {
              if (variant >= 605857695) {
                if (variant !== 747848894) {
                  if (variant >= 860533910) {
                    if (variant >= 974046607) {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  2,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(UnaryOperator.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  18,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(DiffClamp.to_proto, t);
                                        })),
                                  param[1]
                                ]);
                    }
                  } else if (variant >= 748545538) {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                1,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                        return Curry._1(Condition.to_proto, t);
                                      })),
                                param[1]
                              ]);
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                4,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                        return Curry._1(Setter.to_proto, t);
                                      })),
                                param[1]
                              ]);
                  }
                } else {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              11,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                      return Curry._1(Call.to_proto, t);
                                    })),
                              param[1]
                            ]);
                }
              } else if (variant >= 564146209) {
                if (variant >= 595786329) {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              3,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                      return Curry._1(MultiOperator.to_proto, t);
                                    })),
                              param[1]
                            ]);
                } else {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              5,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                      return Curry._1(BinaryOperator.to_proto, t);
                                    })),
                              param[1]
                            ]);
                }
              } else if (variant >= 56978593) {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            16,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                    return Curry._1(Interpolate.to_proto, t);
                                  })),
                            param[1]
                          ]);
              } else {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            10,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                    return Curry._1(Concat.to_proto, t);
                                  })),
                            param[1]
                          ]);
              }
            } else if (variant >= -578166461) {
              if (variant !== -364068301) {
                if (variant >= -272748366) {
                  if (variant >= -254721009) {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                13,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                        return Curry._1(OnChange.to_proto, t);
                                      })),
                                param[1]
                              ]);
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                6,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                        return Curry._1(UnaryDerivedOperator.to_proto, t);
                                      })),
                                param[1]
                              ]);
                  }
                } else if (variant >= -318255388) {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              7,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                      return Curry._1(Animation.to_proto, t);
                                    })),
                              param[1]
                            ]);
                } else {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              17,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                      return Curry._1(Color.to_proto, t);
                                    })),
                              param[1]
                            ]);
                }
              } else {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            12,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                    return Curry._1(Debug.to_proto, t);
                                  })),
                            param[1]
                          ]);
              }
            } else if (variant >= -641121127) {
              if (variant >= -611288658) {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            15,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                    return Curry._1(Clock.to_proto, t);
                                  })),
                            param[1]
                          ]);
              } else {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            14,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                    return Curry._1(ClockOperation.to_proto, t);
                                  })),
                            param[1]
                          ]);
              }
            } else if (variant >= -936778451) {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          8,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(Block$1.to_proto, t);
                                })),
                          param[1]
                        ]);
            } else {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          9,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(Value.to_proto, t);
                                })),
                          param[1]
                        ]);
            }
          })), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$17 = Serialize$Ocamlprotocplugin.serialize(spec$34);

function to_proto$17(t) {
  return Curry._2(serialize$17, /* () */0, t);
}

function constructor$16(a) {
  return a;
}

var spec$35 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                1,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                        return Curry._1(Condition.from_proto, t);
                      })),
                (function (v) {
                    return /* `Cond */[
                            748545538,
                            v
                          ];
                  })
              ]),
          /* :: */[
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                  2,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(UnaryOperator.from_proto, t);
                        })),
                  (function (v) {
                      return /* `Unary */[
                              974046607,
                              v
                            ];
                    })
                ]),
            /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                            return Curry._1(MultiOperator.from_proto, t);
                          })),
                    (function (v) {
                        return /* `Multi */[
                                595786329,
                                v
                              ];
                      })
                  ]),
              /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                              return Curry._1(Setter.from_proto, t);
                            })),
                      (function (v) {
                          return /* `Setter */[
                                  605857695,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        5,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                return Curry._1(BinaryOperator.from_proto, t);
                              })),
                        (function (v) {
                            return /* `Binary */[
                                    564146209,
                                    v
                                  ];
                          })
                      ]),
                  /* :: */[
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                          6,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                  return Curry._1(UnaryDerivedOperator.from_proto, t);
                                })),
                          (function (v) {
                              return /* `DerivedUnary */[
                                      -272748366,
                                      v
                                    ];
                            })
                        ]),
                    /* :: */[
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                            7,
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                    return Curry._1(Animation.from_proto, t);
                                  })),
                            (function (v) {
                                return /* `Animation */[
                                        -318255388,
                                        v
                                      ];
                              })
                          ]),
                      /* :: */[
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                              8,
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                      return Curry._1(Block$1.from_proto, t);
                                    })),
                              (function (v) {
                                  return /* `Block */[
                                          -936778451,
                                          v
                                        ];
                                })
                            ]),
                        /* :: */[
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                9,
                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                        return Curry._1(Value.from_proto, t);
                                      })),
                                (function (v) {
                                    return /* `Value */[
                                            -991563951,
                                            v
                                          ];
                                  })
                              ]),
                          /* :: */[
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                  10,
                                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                          return Curry._1(Concat.from_proto, t);
                                        })),
                                  (function (v) {
                                      return /* `Concat */[
                                              -60523212,
                                              v
                                            ];
                                    })
                                ]),
                            /* :: */[
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                    11,
                                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                            return Curry._1(Call.from_proto, t);
                                          })),
                                    (function (v) {
                                        return /* `Call */[
                                                747848894,
                                                v
                                              ];
                                      })
                                  ]),
                              /* :: */[
                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                      12,
                                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                              return Curry._1(Debug.from_proto, t);
                                            })),
                                      (function (v) {
                                          return /* `Debug */[
                                                  -364068301,
                                                  v
                                                ];
                                        })
                                    ]),
                                /* :: */[
                                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                        13,
                                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                                return Curry._1(OnChange.from_proto, t);
                                              })),
                                        (function (v) {
                                            return /* `OnChange */[
                                                    -254721009,
                                                    v
                                                  ];
                                          })
                                      ]),
                                  /* :: */[
                                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                          14,
                                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                                  return Curry._1(ClockOperation.from_proto, t);
                                                })),
                                          (function (v) {
                                              return /* `ClockOperation */[
                                                      -641121127,
                                                      v
                                                    ];
                                            })
                                        ]),
                                    /* :: */[
                                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                            15,
                                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                                    return Curry._1(Clock.from_proto, t);
                                                  })),
                                            (function (v) {
                                                return /* `Clock */[
                                                        -611288658,
                                                        v
                                                      ];
                                              })
                                          ]),
                                      /* :: */[
                                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                              16,
                                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                                      return Curry._1(Interpolate.from_proto, t);
                                                    })),
                                              (function (v) {
                                                  return /* `Interpolate */[
                                                          56978593,
                                                          v
                                                        ];
                                                })
                                            ]),
                                        /* :: */[
                                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                                17,
                                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                                        return Curry._1(Color.from_proto, t);
                                                      })),
                                                (function (v) {
                                                    return /* `Color */[
                                                            -578166461,
                                                            v
                                                          ];
                                                  })
                                              ]),
                                          /* :: */[
                                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                                  18,
                                                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                                          return Curry._1(DiffClamp.from_proto, t);
                                                        })),
                                                  (function (v) {
                                                      return /* `DiffClamp */[
                                                              860533910,
                                                              v
                                                            ];
                                                    })
                                                ]),
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$17 = Deserialize$Ocamlprotocplugin.deserialize(spec$35, constructor$16);

var from_proto$17 = Curry.__1(deserialize$17);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), $$Node, {
      name$prime: name$prime$17,
      to_proto: to_proto$17,
      from_proto: from_proto$17
    });

function name$prime$18(param) {
  return "Nars_animated.nars.animated.ValueArgument";
}

var spec$36 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$18 = Serialize$Ocamlprotocplugin.serialize(spec$36);

function to_proto$18(t) {
  return Curry._2(serialize$18, /* () */0, t);
}

function constructor$17(a) {
  return a;
}

var spec$37 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$18 = Deserialize$Ocamlprotocplugin.deserialize(spec$37, constructor$17);

var from_proto$18 = Curry.__1(deserialize$18);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), ValueArgument, {
      name$prime: name$prime$18,
      to_proto: to_proto$18,
      from_proto: from_proto$18
    });

function name$prime$19(param) {
  return "Nars_animated.nars.animated.Primitive";
}

var spec$38 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
            var variant = param[0];
            if (variant !== 365180284) {
              if (variant >= 737456202) {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            3,
                            Spec$Ocamlprotocplugin.Serialize.C.bool,
                            param[1]
                          ]);
              } else {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            2,
                            Spec$Ocamlprotocplugin.Serialize.C.string,
                            param[1]
                          ]);
              }
            } else {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          1,
                          Spec$Ocamlprotocplugin.Serialize.C.$$float,
                          param[1]
                        ]);
            }
          })), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$19 = Serialize$Ocamlprotocplugin.serialize(spec$38);

function to_proto$19(t) {
  return Curry._2(serialize$19, /* () */0, t);
}

function constructor$18(a) {
  return a;
}

var spec$39 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                1,
                Spec$Ocamlprotocplugin.Deserialize.C.$$float,
                (function (v) {
                    return /* `Float */[
                            365180284,
                            v
                          ];
                  })
              ]),
          /* :: */[
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                  2,
                  Spec$Ocamlprotocplugin.Deserialize.C.string,
                  (function (v) {
                      return /* `String */[
                              -976970511,
                              v
                            ];
                    })
                ]),
            /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    3,
                    Spec$Ocamlprotocplugin.Deserialize.C.bool,
                    (function (v) {
                        return /* `Bool */[
                                737456202,
                                v
                              ];
                      })
                  ]),
              /* [] */0
            ]
          ]
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$19 = Deserialize$Ocamlprotocplugin.deserialize(spec$39, constructor$18);

var from_proto$19 = Curry.__1(deserialize$19);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Primitive, {
      name$prime: name$prime$19,
      to_proto: to_proto$19,
      from_proto: from_proto$19
    });

function name$prime$20(param) {
  return "Nars_animated.nars.animated.Adaptable";
}

var spec$40 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
            if (param[0] >= 870528546) {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          2,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1($$Node.to_proto, t);
                                })),
                          param[1]
                        ]);
            } else {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          1,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(Primitive.to_proto, t);
                                })),
                          param[1]
                        ]);
            }
          })), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$20 = Serialize$Ocamlprotocplugin.serialize(spec$40);

function to_proto$20(t) {
  return Curry._2(serialize$20, /* () */0, t);
}

function constructor$19(a) {
  return a;
}

var spec$41 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                1,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                        return Curry._1(Primitive.from_proto, t);
                      })),
                (function (v) {
                    return /* `Primitive */[
                            -919902073,
                            v
                          ];
                  })
              ]),
          /* :: */[
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                  2,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1($$Node.from_proto, t);
                        })),
                  (function (v) {
                      return /* `Node */[
                              870528546,
                              v
                            ];
                    })
                ]),
            /* [] */0
          ]
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$20 = Deserialize$Ocamlprotocplugin.deserialize(spec$41, constructor$19);

var from_proto$20 = Curry.__1(deserialize$20);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Adaptable, {
      name$prime: name$prime$20,
      to_proto: to_proto$20,
      from_proto: from_proto$20
    });

function name$prime$21(param) {
  return "Nars_animated.nars.animated.Call";
}

var spec$42 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                })),
          Spec$Ocamlprotocplugin.Serialize.C.not_packed
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.int32_int,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$21 = Serialize$Ocamlprotocplugin.serialize(spec$42);

function to_proto$21(t) {
  var f$prime = Curry._1(serialize$21, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.args, param.callId);
}

function constructor$20(args, callId) {
  return {
          args: args,
          callId: callId
        };
}

var spec$43 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                })),
          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$21 = Deserialize$Ocamlprotocplugin.deserialize(spec$43, constructor$20);

var from_proto$21 = Curry.__1(deserialize$21);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Call, {
      name$prime: name$prime$21,
      to_proto: to_proto$21,
      from_proto: from_proto$21
    });

function name$prime$22(param) {
  return "Nars_animated.nars.animated.Debug";
}

var spec$44 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1($$Node.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$22 = Serialize$Ocamlprotocplugin.serialize(spec$44);

function to_proto$22(t) {
  var f$prime = Curry._1(serialize$22, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.debugMessage, param.value);
}

function constructor$21(debugMessage, value) {
  return {
          debugMessage: debugMessage,
          value: value
        };
}

var spec$45 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1($$Node.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$22 = Deserialize$Ocamlprotocplugin.deserialize(spec$45, constructor$21);

var from_proto$22 = Curry.__1(deserialize$22);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Debug, {
      name$prime: name$prime$22,
      to_proto: to_proto$22,
      from_proto: from_proto$22
    });

function name$prime$23(param) {
  return "Nars_animated.nars.animated.OnChange";
}

var spec$46 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$23 = Serialize$Ocamlprotocplugin.serialize(spec$46);

function to_proto$23(t) {
  var f$prime = Curry._1(serialize$23, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.value, param.action);
}

function constructor$22(value, action) {
  return {
          value: value,
          action: action
        };
}

var spec$47 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$23 = Deserialize$Ocamlprotocplugin.deserialize(spec$47, constructor$22);

var from_proto$23 = Curry.__1(deserialize$23);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), OnChange, {
      name$prime: name$prime$23,
      to_proto: to_proto$23,
      from_proto: from_proto$23
    });

function name$prime$24(param) {
  return "Nars_animated.nars.animated.Clock";
}

var spec$48 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$24 = Serialize$Ocamlprotocplugin.serialize(spec$48);

function to_proto$24(t) {
  return Curry._2(serialize$24, /* () */0, t);
}

function constructor$23(a) {
  return a;
}

var spec$49 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$24 = Deserialize$Ocamlprotocplugin.deserialize(spec$49, constructor$23);

var from_proto$24 = Curry.__1(deserialize$24);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Clock, {
      name$prime: name$prime$24,
      to_proto: to_proto$24,
      from_proto: from_proto$24
    });

function name$prime$25(param) {
  return "Nars_animated.nars.animated.ClockOperation";
}

var spec$50 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Clock.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.$$enum, ClockOperationType.to_int),
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$25 = Serialize$Ocamlprotocplugin.serialize(spec$50);

function to_proto$25(t) {
  var f$prime = Curry._1(serialize$25, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.clock, param.operation);
}

function constructor$24(clock, operation) {
  return {
          clock: clock,
          operation: operation
        };
}

var spec$51 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Clock.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.$$enum, ClockOperationType.from_int),
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$25 = Deserialize$Ocamlprotocplugin.deserialize(spec$51, constructor$24);

var from_proto$25 = Curry.__1(deserialize$25);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), ClockOperation, {
      name$prime: name$prime$25,
      to_proto: to_proto$25,
      from_proto: from_proto$25
    });

function name$prime$26(param) {
  return "Nars_animated.nars.animated.AnimationState";
}

var spec$52 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Value.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Value.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Value.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$26 = Serialize$Ocamlprotocplugin.serialize(spec$52);

function to_proto$26(t) {
  var f$prime = Curry._1(serialize$26, /* () */0);
  var param = t;
  return Curry._3(f$prime, param.finished, param.position, param.time);
}

function constructor$25(finished, position, time) {
  return {
          finished: finished,
          position: position,
          time: time
        };
}

var spec$53 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Value.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Value.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Value.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$26 = Deserialize$Ocamlprotocplugin.deserialize(spec$53, constructor$25);

var from_proto$26 = Curry.__1(deserialize$26);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), AnimationState, {
      name$prime: name$prime$26,
      to_proto: to_proto$26,
      from_proto: from_proto$26
    });

function name$prime$27(param) {
  return "Nars_animated.nars.animated.PhysicsAnimationState";
}

var spec$54 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(AnimationState.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Value.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$27 = Serialize$Ocamlprotocplugin.serialize(spec$54);

function to_proto$27(t) {
  var f$prime = Curry._1(serialize$27, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.animation, param.velocity);
}

function constructor$26(animation, velocity) {
  return {
          animation: animation,
          velocity: velocity
        };
}

var spec$55 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(AnimationState.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Value.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$27 = Deserialize$Ocamlprotocplugin.deserialize(spec$55, constructor$26);

var from_proto$27 = Curry.__1(deserialize$27);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), PhysicsAnimationState, {
      name$prime: name$prime$27,
      to_proto: to_proto$27,
      from_proto: from_proto$27
    });

function name$prime$28(param) {
  return "Nars_animated.nars.animated.DecayConfig";
}

var spec$56 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$28 = Serialize$Ocamlprotocplugin.serialize(spec$56);

function to_proto$28(t) {
  return Curry._2(serialize$28, /* () */0, t);
}

function constructor$27(a) {
  return a;
}

var spec$57 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$28 = Deserialize$Ocamlprotocplugin.deserialize(spec$57, constructor$27);

var from_proto$28 = Curry.__1(deserialize$28);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), DecayConfig, {
      name$prime: name$prime$28,
      to_proto: to_proto$28,
      from_proto: from_proto$28
    });

function name$prime$29(param) {
  return "Nars_animated.nars.animated.DecayAnimation";
}

var spec$58 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Clock.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(PhysicsAnimationState.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(DecayConfig.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$29 = Serialize$Ocamlprotocplugin.serialize(spec$58);

function to_proto$29(t) {
  var f$prime = Curry._1(serialize$29, /* () */0);
  var param = t;
  return Curry._3(f$prime, param.clock, param.state, param.config);
}

function constructor$28(clock, state, config) {
  return {
          clock: clock,
          state: state,
          config: config
        };
}

var spec$59 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Clock.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(PhysicsAnimationState.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(DecayConfig.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$29 = Deserialize$Ocamlprotocplugin.deserialize(spec$59, constructor$28);

var from_proto$29 = Curry.__1(deserialize$29);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), DecayAnimation, {
      name$prime: name$prime$29,
      to_proto: to_proto$29,
      from_proto: from_proto$29
    });

function name$prime$30(param) {
  return "Nars_animated.nars.animated.TimingState";
}

var spec$60 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(AnimationState.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Value.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$30 = Serialize$Ocamlprotocplugin.serialize(spec$60);

function to_proto$30(t) {
  var f$prime = Curry._1(serialize$30, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.animation, param.frameTime);
}

function constructor$29(animation, frameTime) {
  return {
          animation: animation,
          frameTime: frameTime
        };
}

var spec$61 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(AnimationState.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Value.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$30 = Deserialize$Ocamlprotocplugin.deserialize(spec$61, constructor$29);

var from_proto$30 = Curry.__1(deserialize$30);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), TimingState, {
      name$prime: name$prime$30,
      to_proto: to_proto$30,
      from_proto: from_proto$30
    });

function name$prime$31(param) {
  return "Nars_animated.nars.animated.TimingConfig";
}

var spec$62 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(EasingFunction.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$31 = Serialize$Ocamlprotocplugin.serialize(spec$62);

function to_proto$31(t) {
  var f$prime = Curry._1(serialize$31, /* () */0);
  var param = t;
  return Curry._3(f$prime, param.toValue, param.duration, param.easing);
}

function constructor$30(toValue, duration, easing) {
  return {
          toValue: toValue,
          duration: duration,
          easing: easing
        };
}

var spec$63 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(EasingFunction.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$31 = Deserialize$Ocamlprotocplugin.deserialize(spec$63, constructor$30);

var from_proto$31 = Curry.__1(deserialize$31);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), TimingConfig, {
      name$prime: name$prime$31,
      to_proto: to_proto$31,
      from_proto: from_proto$31
    });

function name$prime$32(param) {
  return "Nars_animated.nars.animated.TimingAnimation";
}

var spec$64 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Clock.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(TimingState.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(TimingConfig.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$32 = Serialize$Ocamlprotocplugin.serialize(spec$64);

function to_proto$32(t) {
  var f$prime = Curry._1(serialize$32, /* () */0);
  var param = t;
  return Curry._3(f$prime, param.clock, param.state, param.config);
}

function constructor$31(clock, state, config) {
  return {
          clock: clock,
          state: state,
          config: config
        };
}

var spec$65 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Clock.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(TimingState.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(TimingConfig.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$32 = Deserialize$Ocamlprotocplugin.deserialize(spec$65, constructor$31);

var from_proto$32 = Curry.__1(deserialize$32);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), TimingAnimation, {
      name$prime: name$prime$32,
      to_proto: to_proto$32,
      from_proto: from_proto$32
    });

function name$prime$33(param) {
  return "Nars_animated.nars.animated.SpringConfig";
}

var spec$66 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Adaptable.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(Adaptable.to_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                              return Curry._1(Adaptable.to_proto, t);
                            }))
                    ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(Adaptable.to_proto, t);
                                }))
                        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                              6,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                      return Curry._1(Adaptable.to_proto, t);
                                    }))
                            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                                  7,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                          return Curry._1(Adaptable.to_proto, t);
                                        }))
                                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)))))));

var serialize$33 = Serialize$Ocamlprotocplugin.serialize(spec$66);

function to_proto$33(t) {
  var f$prime = Curry._1(serialize$33, /* () */0);
  var param = t;
  return Curry._7(f$prime, param.damping, param.mass, param.stiffness, param.overshootClamping, param.restSpeedThreshold, param.restDisplacementThreshold, param.toValue);
}

function constructor$32(damping, mass, stiffness, overshootClamping, restSpeedThreshold, restDisplacementThreshold, toValue) {
  return {
          damping: damping,
          mass: mass,
          stiffness: stiffness,
          overshootClamping: overshootClamping,
          restSpeedThreshold: restSpeedThreshold,
          restDisplacementThreshold: restDisplacementThreshold,
          toValue: toValue
        };
}

var spec$67 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Adaptable.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(Adaptable.from_proto, t);
                        }))
                ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                              return Curry._1(Adaptable.from_proto, t);
                            }))
                    ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                  return Curry._1(Adaptable.from_proto, t);
                                }))
                        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                              6,
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                      return Curry._1(Adaptable.from_proto, t);
                                    }))
                            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                                  7,
                                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                          return Curry._1(Adaptable.from_proto, t);
                                        }))
                                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)))))));

var deserialize$33 = Deserialize$Ocamlprotocplugin.deserialize(spec$67, constructor$32);

var from_proto$33 = Curry.__1(deserialize$33);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), SpringConfig, {
      name$prime: name$prime$33,
      to_proto: to_proto$33,
      from_proto: from_proto$33
    });

function name$prime$34(param) {
  return "Nars_animated.nars.animated.SpringAnimation";
}

var spec$68 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Clock.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(PhysicsAnimationState.to_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                          return Curry._1(SpringConfig.to_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$34 = Serialize$Ocamlprotocplugin.serialize(spec$68);

function to_proto$34(t) {
  var f$prime = Curry._1(serialize$34, /* () */0);
  var param = t;
  return Curry._3(f$prime, param.clock, param.state, param.config);
}

function constructor$33(clock, state, config) {
  return {
          clock: clock,
          state: state,
          config: config
        };
}

var spec$69 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Clock.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(PhysicsAnimationState.from_proto, t);
                    }))
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(SpringConfig.from_proto, t);
                        }))
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$34 = Deserialize$Ocamlprotocplugin.deserialize(spec$69, constructor$33);

var from_proto$34 = Curry.__1(deserialize$34);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), SpringAnimation, {
      name$prime: name$prime$34,
      to_proto: to_proto$34,
      from_proto: from_proto$34
    });

function name$prime$35(param) {
  return "Nars_animated.nars.animated.Animation";
}

var spec$70 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
            var variant = param[0];
            if (variant !== -364023014) {
              if (variant >= -131446035) {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            3,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                    return Curry._1(SpringAnimation.to_proto, t);
                                  })),
                            param[1]
                          ]);
              } else {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            2,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                    return Curry._1(TimingAnimation.to_proto, t);
                                  })),
                            param[1]
                          ]);
              }
            } else {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          1,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(DecayAnimation.to_proto, t);
                                })),
                          param[1]
                        ]);
            }
          })), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$35 = Serialize$Ocamlprotocplugin.serialize(spec$70);

function to_proto$35(t) {
  return Curry._2(serialize$35, /* () */0, t);
}

function constructor$34(a) {
  return a;
}

var spec$71 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                1,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                        return Curry._1(DecayAnimation.from_proto, t);
                      })),
                (function (v) {
                    return /* `Decay */[
                            -364023014,
                            v
                          ];
                  })
              ]),
          /* :: */[
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                  2,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                          return Curry._1(TimingAnimation.from_proto, t);
                        })),
                  (function (v) {
                      return /* `Timing */[
                              -748058966,
                              v
                            ];
                    })
                ]),
            /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                            return Curry._1(SpringAnimation.from_proto, t);
                          })),
                    (function (v) {
                        return /* `Spring */[
                                -131446035,
                                v
                              ];
                      })
                  ]),
              /* [] */0
            ]
          ]
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$35 = Deserialize$Ocamlprotocplugin.deserialize(spec$71, constructor$34);

var from_proto$35 = Curry.__1(deserialize$35);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Animation, {
      name$prime: name$prime$35,
      to_proto: to_proto$35,
      from_proto: from_proto$35
    });

function name$prime$36(param) {
  return "Nars_animated.nars.animated.ListValue";
}

var spec$72 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(ValueOrAnimatedNode.to_proto, t);
                })),
          Spec$Ocamlprotocplugin.Serialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$36 = Serialize$Ocamlprotocplugin.serialize(spec$72);

function to_proto$36(t) {
  return Curry._2(serialize$36, /* () */0, t);
}

function constructor$35(a) {
  return a;
}

var spec$73 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(ValueOrAnimatedNode.from_proto, t);
                })),
          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$36 = Deserialize$Ocamlprotocplugin.deserialize(spec$73, constructor$35);

var from_proto$36 = Curry.__1(deserialize$36);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), ListValue, {
      name$prime: name$prime$36,
      to_proto: to_proto$36,
      from_proto: from_proto$36
    });

function name$prime$37(param) {
  return "Nars_animated.nars.animated.TopLevelNode";
}

var spec$74 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1($$Node.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.int32_int,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$37 = Serialize$Ocamlprotocplugin.serialize(spec$74);

function to_proto$37(t) {
  var f$prime = Curry._1(serialize$37, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.node, param.__nodeID);
}

function constructor$36(node, __nodeID) {
  return {
          node: node,
          __nodeID: __nodeID
        };
}

var spec$75 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1($$Node.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$37 = Deserialize$Ocamlprotocplugin.deserialize(spec$75, constructor$36);

var from_proto$37 = Curry.__1(deserialize$37);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), TopLevelNode, {
      name$prime: name$prime$37,
      to_proto: to_proto$37,
      from_proto: from_proto$37
    });

function name$prime$38(param) {
  return "Nars_animated.nars.animated.ValueOrAnimatedNode";
}

var spec$76 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
            var variant = param[0];
            if (variant >= -654604135) {
              if (variant >= 629889314) {
                if (variant >= 870528546) {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              8,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                      return Curry._1(TopLevelNode.to_proto, t);
                                    })),
                              param[1]
                            ]);
                } else {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              7,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.$$enum, Struct.Google_mirror.Protobuf.UndefinedValue.to_int),
                              param[1]
                            ]);
                }
              } else if (variant >= 258787964) {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            4,
                            Spec$Ocamlprotocplugin.Serialize.C.bool,
                            param[1]
                          ]);
              } else {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            1,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.$$enum, Struct.Google_mirror.Protobuf.NullValue.to_int),
                            param[1]
                          ]);
              }
            } else if (variant >= -724205949) {
              if (variant >= -663343517) {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            3,
                            Spec$Ocamlprotocplugin.Serialize.C.string,
                            param[1]
                          ]);
              } else {
                return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                            5,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                    return Curry._1(Style.to_proto, t);
                                  })),
                            param[1]
                          ]);
              }
            } else if (variant >= -769490512) {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          6,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                                  return Curry._1(ListValue.to_proto, t);
                                })),
                          param[1]
                        ]);
            } else {
              return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                          2,
                          Spec$Ocamlprotocplugin.Serialize.C.$$double,
                          param[1]
                        ]);
            }
          })), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$38 = Serialize$Ocamlprotocplugin.serialize(spec$76);

function to_proto$38(t) {
  return Curry._2(serialize$38, /* () */0, t);
}

function constructor$37(a) {
  return a;
}

var spec$77 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                1,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.$$enum, Struct.Google_mirror.Protobuf.NullValue.from_int),
                (function (v) {
                    return /* `Null_value */[
                            -654604135,
                            v
                          ];
                  })
              ]),
          /* :: */[
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                  2,
                  Spec$Ocamlprotocplugin.Deserialize.C.$$double,
                  (function (v) {
                      return /* `Number_value */[
                              -785426853,
                              v
                            ];
                    })
                ]),
            /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    3,
                    Spec$Ocamlprotocplugin.Deserialize.C.string,
                    (function (v) {
                        return /* `String_value */[
                                -663343517,
                                v
                              ];
                      })
                  ]),
              /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      4,
                      Spec$Ocamlprotocplugin.Deserialize.C.bool,
                      (function (v) {
                          return /* `Bool_value */[
                                  258787964,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        5,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                return Curry._1(Style.from_proto, t);
                              })),
                        (function (v) {
                            return /* `Style_value */[
                                    -724205949,
                                    v
                                  ];
                          })
                      ]),
                  /* :: */[
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                          6,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                  return Curry._1(ListValue.from_proto, t);
                                })),
                          (function (v) {
                              return /* `List_value */[
                                      -769490512,
                                      v
                                    ];
                            })
                        ]),
                    /* :: */[
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                            7,
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.$$enum, Struct.Google_mirror.Protobuf.UndefinedValue.from_int),
                            (function (v) {
                                return /* `Undefined_value */[
                                        629889314,
                                        v
                                      ];
                              })
                          ]),
                      /* :: */[
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                              8,
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                                      return Curry._1(TopLevelNode.from_proto, t);
                                    })),
                              (function (v) {
                                  return /* `Node */[
                                          870528546,
                                          v
                                        ];
                                })
                            ]),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$38 = Deserialize$Ocamlprotocplugin.deserialize(spec$77, constructor$37);

var from_proto$38 = Curry.__1(deserialize$38);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), ValueOrAnimatedNode, {
      name$prime: name$prime$38,
      to_proto: to_proto$38,
      from_proto: from_proto$38
    });

var FieldsEntry = Caml_module.init_mod(/* tuple */[
      "nars_animated.ml",
      1007,
      12
    ], /* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]));

function name$prime$39(param) {
  return "Nars_animated.nars.animated.Style.FieldsEntry";
}

var spec$78 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(ValueOrAnimatedNode.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$39 = Serialize$Ocamlprotocplugin.serialize(spec$78);

function to_proto$39(t) {
  var f = Curry._1(serialize$39, /* () */0);
  var param = t;
  return Curry._2(f, param[0], param[1]);
}

function constructor$38(a, b) {
  return /* tuple */[
          a,
          b
        ];
}

var spec$79 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(ValueOrAnimatedNode.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$39 = Deserialize$Ocamlprotocplugin.deserialize(spec$79, constructor$38);

var from_proto$39 = Curry.__1(deserialize$39);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), FieldsEntry, {
      name$prime: name$prime$39,
      to_proto: to_proto$39,
      from_proto: from_proto$39
    });

function name$prime$40(param) {
  return "Nars_animated.nars.animated.Style";
}

var spec$80 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(FieldsEntry.to_proto, t);
                })),
          Spec$Ocamlprotocplugin.Serialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$40 = Serialize$Ocamlprotocplugin.serialize(spec$80);

function to_proto$40(t) {
  return Curry._2(serialize$40, /* () */0, t);
}

function constructor$39(a) {
  return a;
}

var spec$81 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(FieldsEntry.from_proto, t);
                })),
          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$40 = Deserialize$Ocamlprotocplugin.deserialize(spec$81, constructor$39);

var from_proto$40 = Curry.__1(deserialize$40);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Module */Block.__(0, [/* array */[
                  /* tuple */[
                    /* Function */0,
                    "name'"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "to_proto"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "from_proto"
                  ]
                ]]),
            "FieldsEntry"
          ],
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), Style, {
      FieldsEntry: FieldsEntry,
      name$prime: name$prime$40,
      to_proto: to_proto$40,
      from_proto: from_proto$40
    });

function name$prime$41(param) {
  return "Nars_animated.nars.animated.ValueUpdate";
}

var spec$82 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                  return Curry._1(Value.to_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, (function (t) {
                      return Curry._1(Adaptable.to_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$41 = Serialize$Ocamlprotocplugin.serialize(spec$82);

function to_proto$41(t) {
  var f$prime = Curry._1(serialize$41, /* () */0);
  var param = t;
  return Curry._2(f$prime, param.value, param.toValue);
}

function constructor$40(value, toValue) {
  return {
          value: value,
          toValue: toValue
        };
}

var spec$83 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                  return Curry._1(Value.from_proto, t);
                }))
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, (function (t) {
                      return Curry._1(Adaptable.from_proto, t);
                    }))
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$41 = Deserialize$Ocamlprotocplugin.deserialize(spec$83, constructor$40);

var from_proto$41 = Curry.__1(deserialize$41);

Caml_module.update_mod(/* Module */Block.__(0, [/* array */[
          /* tuple */[
            /* Function */0,
            "name'"
          ],
          /* tuple */[
            /* Function */0,
            "to_proto"
          ],
          /* tuple */[
            /* Function */0,
            "from_proto"
          ]
        ]]), ValueUpdate, {
      name$prime: name$prime$41,
      to_proto: to_proto$41,
      from_proto: from_proto$41
    });

var Animated = {
  UnaryOperatorType: UnaryOperatorType,
  MultiOperatorType: MultiOperatorType,
  UnaryDerivedOperatorType: UnaryDerivedOperatorType,
  BinaryOperatorType: BinaryOperatorType,
  ExtrapolateType: ExtrapolateType,
  ClockOperationType: ClockOperationType,
  EasingCustom: EasingCustom,
  EasingStatic: EasingStatic,
  EasingFunction: EasingFunction,
  UnaryOperator: UnaryOperator,
  MultiOperator: MultiOperator,
  Condition: Condition,
  Value: Value,
  Setter: Setter,
  UnaryDerivedOperator: UnaryDerivedOperator,
  BinaryOperator: BinaryOperator,
  Color: Color,
  DiffClamp: DiffClamp,
  Extrapolate: Extrapolate,
  InterpolationConfig: InterpolationConfig,
  Interpolate: Interpolate,
  Block: Block$1,
  Concat: Concat,
  $$Node: $$Node,
  ValueArgument: ValueArgument,
  Primitive: Primitive,
  Adaptable: Adaptable,
  Call: Call,
  Debug: Debug,
  OnChange: OnChange,
  Clock: Clock,
  ClockOperation: ClockOperation,
  AnimationState: AnimationState,
  PhysicsAnimationState: PhysicsAnimationState,
  DecayConfig: DecayConfig,
  DecayAnimation: DecayAnimation,
  TimingState: TimingState,
  TimingConfig: TimingConfig,
  TimingAnimation: TimingAnimation,
  SpringConfig: SpringConfig,
  SpringAnimation: SpringAnimation,
  Animation: Animation,
  ListValue: ListValue,
  TopLevelNode: TopLevelNode,
  ValueOrAnimatedNode: ValueOrAnimatedNode,
  Style: Style,
  ValueUpdate: ValueUpdate
};

var Nars = {
  Animated: Animated
};

exports.Nars = Nars;
/* UnaryOperatorType Not a pure module */
