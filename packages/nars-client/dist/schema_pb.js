/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var struct_pb = require('./struct_pb.js');
var nars_animated_pb = require('./nars_animated_pb.js');
goog.exportSymbol('proto.AnimatedImage', null, global);
goog.exportSymbol('proto.AnimatedText', null, global);
goog.exportSymbol('proto.AnimatedView', null, global);
goog.exportSymbol('proto.Call', null, global);
goog.exportSymbol('proto.Callback', null, global);
goog.exportSymbol('proto.ClientToServer', null, global);
goog.exportSymbol('proto.CustomComponent', null, global);
goog.exportSymbol('proto.Error', null, global);
goog.exportSymbol('proto.FlatList', null, global);
goog.exportSymbol('proto.FloatValue', null, global);
goog.exportSymbol('proto.Image', null, global);
goog.exportSymbol('proto.Int32Value', null, global);
goog.exportSymbol('proto.LocalProp', null, global);
goog.exportSymbol('proto.RawText', null, global);
goog.exportSymbol('proto.ReactElement', null, global);
goog.exportSymbol('proto.Render', null, global);
goog.exportSymbol('proto.ServerToClient', null, global);
goog.exportSymbol('proto.StringValue', null, global);
goog.exportSymbol('proto.Switch', null, global);
goog.exportSymbol('proto.Text', null, global);
goog.exportSymbol('proto.TextInput', null, global);
goog.exportSymbol('proto.TouchableOpacity', null, global);
goog.exportSymbol('proto.Unmount', null, global);
goog.exportSymbol('proto.Update', null, global);
goog.exportSymbol('proto.View', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StringValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StringValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StringValue.displayName = 'proto.StringValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StringValue.prototype.toObject = function(opt_includeInstance) {
  return proto.StringValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StringValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StringValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StringValue}
 */
proto.StringValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StringValue;
  return proto.StringValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StringValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StringValue}
 */
proto.StringValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StringValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StringValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StringValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StringValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.StringValue.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.StringValue.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Int32Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Int32Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Int32Value.displayName = 'proto.Int32Value';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Int32Value.prototype.toObject = function(opt_includeInstance) {
  return proto.Int32Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Int32Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int32Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Int32Value}
 */
proto.Int32Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Int32Value;
  return proto.Int32Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Int32Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Int32Value}
 */
proto.Int32Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Int32Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Int32Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Int32Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int32Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.Int32Value.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Int32Value.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Callback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Callback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Callback.displayName = 'proto.Callback';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Callback.prototype.toObject = function(opt_includeInstance) {
  return proto.Callback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Callback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Callback.toObject = function(includeInstance, msg) {
  var f, obj = {
    callid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Callback}
 */
proto.Callback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Callback;
  return proto.Callback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Callback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Callback}
 */
proto.Callback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Callback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Callback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Callback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Callback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 callId = 1;
 * @return {number}
 */
proto.Callback.prototype.getCallid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Callback.prototype.setCallid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LocalProp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LocalProp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.LocalProp.displayName = 'proto.LocalProp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LocalProp.prototype.toObject = function(opt_includeInstance) {
  return proto.LocalProp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LocalProp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LocalProp.toObject = function(includeInstance, msg) {
  var f, obj = {
    localkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propkey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LocalProp}
 */
proto.LocalProp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LocalProp;
  return proto.LocalProp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LocalProp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LocalProp}
 */
proto.LocalProp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPropkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LocalProp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LocalProp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LocalProp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LocalProp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string localKey = 1;
 * @return {string}
 */
proto.LocalProp.prototype.getLocalkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.LocalProp.prototype.setLocalkey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string propKey = 2;
 * @return {string}
 */
proto.LocalProp.prototype.getPropkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.LocalProp.prototype.setPropkey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FloatValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FloatValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FloatValue.displayName = 'proto.FloatValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FloatValue.prototype.toObject = function(opt_includeInstance) {
  return proto.FloatValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FloatValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FloatValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FloatValue}
 */
proto.FloatValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FloatValue;
  return proto.FloatValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FloatValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FloatValue}
 */
proto.FloatValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FloatValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FloatValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FloatValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FloatValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.FloatValue.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.FloatValue.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CustomComponent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CustomComponent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CustomComponent.displayName = 'proto.CustomComponent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CustomComponent.prototype.toObject = function(opt_includeInstance) {
  return proto.CustomComponent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CustomComponent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CustomComponent.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contents: msg.getContents_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CustomComponent}
 */
proto.CustomComponent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CustomComponent;
  return proto.CustomComponent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CustomComponent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CustomComponent}
 */
proto.CustomComponent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CustomComponent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CustomComponent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CustomComponent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CustomComponent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string type_id = 1;
 * @return {string}
 */
proto.CustomComponent.prototype.getTypeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CustomComponent.prototype.setTypeId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes contents = 2;
 * @return {!(string|Uint8Array)}
 */
proto.CustomComponent.prototype.getContents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contents = 2;
 * This is a type-conversion wrapper around `getContents()`
 * @return {string}
 */
proto.CustomComponent.prototype.getContents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContents()));
};


/**
 * optional bytes contents = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContents()`
 * @return {!Uint8Array}
 */
proto.CustomComponent.prototype.getContents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContents()));
};


/** @param {!(string|Uint8Array)} value */
proto.CustomComponent.prototype.setContents = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.View = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.View.repeatedFields_, null);
};
goog.inherits(proto.View, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.View.displayName = 'proto.View';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.View.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.View.prototype.toObject = function(opt_includeInstance) {
  return proto.View.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.View} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.View.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && struct_pb.Struct.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.ReactElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.View}
 */
proto.View.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.View;
  return proto.View.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.View} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.View}
 */
proto.View.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new struct_pb.Struct;
      reader.readMessage(value,struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = new proto.ReactElement;
      reader.readMessage(value,proto.ReactElement.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.View.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.View.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.View} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.View.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ReactElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional google_mirror.protobuf.Struct style = 1;
 * @return {?proto.google_mirror.protobuf.Struct}
 */
proto.View.prototype.getStyle = function() {
  return /** @type{?proto.google_mirror.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, struct_pb.Struct, 1));
};


/** @param {?proto.google_mirror.protobuf.Struct|undefined} value */
proto.View.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.View.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.View.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ReactElement children = 2;
 * @return {!Array<!proto.ReactElement>}
 */
proto.View.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.ReactElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReactElement, 2));
};


/** @param {!Array<!proto.ReactElement>} value */
proto.View.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ReactElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReactElement}
 */
proto.View.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ReactElement, opt_index);
};


proto.View.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FlatList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FlatList.repeatedFields_, null);
};
goog.inherits(proto.FlatList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FlatList.displayName = 'proto.FlatList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FlatList.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FlatList.prototype.toObject = function(opt_includeInstance) {
  return proto.FlatList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FlatList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlatList.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && struct_pb.Struct.toObject(includeInstance, f),
    onendreached: (f = msg.getOnendreached()) && proto.Callback.toObject(includeInstance, f),
    onendreachedthreshold: (f = msg.getOnendreachedthreshold()) && proto.Int32Value.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.ReactElement.toObject, includeInstance),
    localpropsList: jspb.Message.toObjectList(msg.getLocalpropsList(),
    proto.LocalProp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FlatList}
 */
proto.FlatList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FlatList;
  return proto.FlatList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FlatList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FlatList}
 */
proto.FlatList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new struct_pb.Struct;
      reader.readMessage(value,struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = new proto.Callback;
      reader.readMessage(value,proto.Callback.deserializeBinaryFromReader);
      msg.setOnendreached(value);
      break;
    case 3:
      var value = new proto.Int32Value;
      reader.readMessage(value,proto.Int32Value.deserializeBinaryFromReader);
      msg.setOnendreachedthreshold(value);
      break;
    case 4:
      var value = new proto.ReactElement;
      reader.readMessage(value,proto.ReactElement.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    case 5:
      var value = new proto.LocalProp;
      reader.readMessage(value,proto.LocalProp.deserializeBinaryFromReader);
      msg.addLocalprops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FlatList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FlatList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FlatList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FlatList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getOnendreached();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Callback.serializeBinaryToWriter
    );
  }
  f = message.getOnendreachedthreshold();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Int32Value.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ReactElement.serializeBinaryToWriter
    );
  }
  f = message.getLocalpropsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.LocalProp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google_mirror.protobuf.Struct style = 1;
 * @return {?proto.google_mirror.protobuf.Struct}
 */
proto.FlatList.prototype.getStyle = function() {
  return /** @type{?proto.google_mirror.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, struct_pb.Struct, 1));
};


/** @param {?proto.google_mirror.protobuf.Struct|undefined} value */
proto.FlatList.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.FlatList.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FlatList.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Callback onEndReached = 2;
 * @return {?proto.Callback}
 */
proto.FlatList.prototype.getOnendreached = function() {
  return /** @type{?proto.Callback} */ (
    jspb.Message.getWrapperField(this, proto.Callback, 2));
};


/** @param {?proto.Callback|undefined} value */
proto.FlatList.prototype.setOnendreached = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.FlatList.prototype.clearOnendreached = function() {
  this.setOnendreached(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FlatList.prototype.hasOnendreached = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Int32Value onEndReachedThreshold = 3;
 * @return {?proto.Int32Value}
 */
proto.FlatList.prototype.getOnendreachedthreshold = function() {
  return /** @type{?proto.Int32Value} */ (
    jspb.Message.getWrapperField(this, proto.Int32Value, 3));
};


/** @param {?proto.Int32Value|undefined} value */
proto.FlatList.prototype.setOnendreachedthreshold = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.FlatList.prototype.clearOnendreachedthreshold = function() {
  this.setOnendreachedthreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FlatList.prototype.hasOnendreachedthreshold = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated ReactElement children = 4;
 * @return {!Array<!proto.ReactElement>}
 */
proto.FlatList.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.ReactElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReactElement, 4));
};


/** @param {!Array<!proto.ReactElement>} value */
proto.FlatList.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ReactElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReactElement}
 */
proto.FlatList.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ReactElement, opt_index);
};


proto.FlatList.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};


/**
 * repeated LocalProp localProps = 5;
 * @return {!Array<!proto.LocalProp>}
 */
proto.FlatList.prototype.getLocalpropsList = function() {
  return /** @type{!Array<!proto.LocalProp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LocalProp, 5));
};


/** @param {!Array<!proto.LocalProp>} value */
proto.FlatList.prototype.setLocalpropsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.LocalProp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LocalProp}
 */
proto.FlatList.prototype.addLocalprops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.LocalProp, opt_index);
};


proto.FlatList.prototype.clearLocalpropsList = function() {
  this.setLocalpropsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TouchableOpacity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TouchableOpacity.repeatedFields_, null);
};
goog.inherits(proto.TouchableOpacity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TouchableOpacity.displayName = 'proto.TouchableOpacity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TouchableOpacity.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TouchableOpacity.prototype.toObject = function(opt_includeInstance) {
  return proto.TouchableOpacity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TouchableOpacity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TouchableOpacity.toObject = function(includeInstance, msg) {
  var f, obj = {
    onpress: (f = msg.getOnpress()) && proto.Callback.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.ReactElement.toObject, includeInstance),
    localpropsList: jspb.Message.toObjectList(msg.getLocalpropsList(),
    proto.LocalProp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TouchableOpacity}
 */
proto.TouchableOpacity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TouchableOpacity;
  return proto.TouchableOpacity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TouchableOpacity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TouchableOpacity}
 */
proto.TouchableOpacity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Callback;
      reader.readMessage(value,proto.Callback.deserializeBinaryFromReader);
      msg.setOnpress(value);
      break;
    case 2:
      var value = new proto.ReactElement;
      reader.readMessage(value,proto.ReactElement.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    case 3:
      var value = new proto.LocalProp;
      reader.readMessage(value,proto.LocalProp.deserializeBinaryFromReader);
      msg.addLocalprops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TouchableOpacity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TouchableOpacity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TouchableOpacity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TouchableOpacity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnpress();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Callback.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ReactElement.serializeBinaryToWriter
    );
  }
  f = message.getLocalpropsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.LocalProp.serializeBinaryToWriter
    );
  }
};


/**
 * optional Callback onPress = 1;
 * @return {?proto.Callback}
 */
proto.TouchableOpacity.prototype.getOnpress = function() {
  return /** @type{?proto.Callback} */ (
    jspb.Message.getWrapperField(this, proto.Callback, 1));
};


/** @param {?proto.Callback|undefined} value */
proto.TouchableOpacity.prototype.setOnpress = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TouchableOpacity.prototype.clearOnpress = function() {
  this.setOnpress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TouchableOpacity.prototype.hasOnpress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ReactElement children = 2;
 * @return {!Array<!proto.ReactElement>}
 */
proto.TouchableOpacity.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.ReactElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReactElement, 2));
};


/** @param {!Array<!proto.ReactElement>} value */
proto.TouchableOpacity.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ReactElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReactElement}
 */
proto.TouchableOpacity.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ReactElement, opt_index);
};


proto.TouchableOpacity.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};


/**
 * repeated LocalProp localProps = 3;
 * @return {!Array<!proto.LocalProp>}
 */
proto.TouchableOpacity.prototype.getLocalpropsList = function() {
  return /** @type{!Array<!proto.LocalProp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LocalProp, 3));
};


/** @param {!Array<!proto.LocalProp>} value */
proto.TouchableOpacity.prototype.setLocalpropsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.LocalProp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LocalProp}
 */
proto.TouchableOpacity.prototype.addLocalprops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.LocalProp, opt_index);
};


proto.TouchableOpacity.prototype.clearLocalpropsList = function() {
  this.setLocalpropsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RawText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RawText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RawText.displayName = 'proto.RawText';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RawText.prototype.toObject = function(opt_includeInstance) {
  return proto.RawText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RawText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RawText.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RawText}
 */
proto.RawText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RawText;
  return proto.RawText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RawText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RawText}
 */
proto.RawText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RawText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RawText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RawText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RawText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.RawText.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RawText.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Text.repeatedFields_, null);
};
goog.inherits(proto.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Text.displayName = 'proto.Text';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Text.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && struct_pb.Struct.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.ReactElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Text}
 */
proto.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Text;
  return proto.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Text}
 */
proto.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new struct_pb.Struct;
      reader.readMessage(value,struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = new proto.ReactElement;
      reader.readMessage(value,proto.ReactElement.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ReactElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional google_mirror.protobuf.Struct style = 1;
 * @return {?proto.google_mirror.protobuf.Struct}
 */
proto.Text.prototype.getStyle = function() {
  return /** @type{?proto.google_mirror.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, struct_pb.Struct, 1));
};


/** @param {?proto.google_mirror.protobuf.Struct|undefined} value */
proto.Text.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Text.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Text.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ReactElement children = 2;
 * @return {!Array<!proto.ReactElement>}
 */
proto.Text.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.ReactElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReactElement, 2));
};


/** @param {!Array<!proto.ReactElement>} value */
proto.Text.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ReactElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReactElement}
 */
proto.Text.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ReactElement, opt_index);
};


proto.Text.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TextInput.repeatedFields_, null);
};
goog.inherits(proto.TextInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TextInput.displayName = 'proto.TextInput';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TextInput.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextInput.prototype.toObject = function(opt_includeInstance) {
  return proto.TextInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && struct_pb.Struct.toObject(includeInstance, f),
    placeholdertextcolor: (f = msg.getPlaceholdertextcolor()) && proto.StringValue.toObject(includeInstance, f),
    placeholder: (f = msg.getPlaceholder()) && proto.StringValue.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 4, ""),
    localpropsList: jspb.Message.toObjectList(msg.getLocalpropsList(),
    proto.LocalProp.toObject, includeInstance),
    onvaluechange: (f = msg.getOnvaluechange()) && proto.Callback.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextInput}
 */
proto.TextInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextInput;
  return proto.TextInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextInput}
 */
proto.TextInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new struct_pb.Struct;
      reader.readMessage(value,struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = new proto.StringValue;
      reader.readMessage(value,proto.StringValue.deserializeBinaryFromReader);
      msg.setPlaceholdertextcolor(value);
      break;
    case 3:
      var value = new proto.StringValue;
      reader.readMessage(value,proto.StringValue.deserializeBinaryFromReader);
      msg.setPlaceholder(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 5:
      var value = new proto.LocalProp;
      reader.readMessage(value,proto.LocalProp.deserializeBinaryFromReader);
      msg.addLocalprops(value);
      break;
    case 6:
      var value = new proto.Callback;
      reader.readMessage(value,proto.Callback.deserializeBinaryFromReader);
      msg.setOnvaluechange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getPlaceholdertextcolor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getPlaceholder();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLocalpropsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.LocalProp.serializeBinaryToWriter
    );
  }
  f = message.getOnvaluechange();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Callback.serializeBinaryToWriter
    );
  }
};


/**
 * optional google_mirror.protobuf.Struct style = 1;
 * @return {?proto.google_mirror.protobuf.Struct}
 */
proto.TextInput.prototype.getStyle = function() {
  return /** @type{?proto.google_mirror.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, struct_pb.Struct, 1));
};


/** @param {?proto.google_mirror.protobuf.Struct|undefined} value */
proto.TextInput.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TextInput.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TextInput.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StringValue placeholderTextColor = 2;
 * @return {?proto.StringValue}
 */
proto.TextInput.prototype.getPlaceholdertextcolor = function() {
  return /** @type{?proto.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.StringValue, 2));
};


/** @param {?proto.StringValue|undefined} value */
proto.TextInput.prototype.setPlaceholdertextcolor = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TextInput.prototype.clearPlaceholdertextcolor = function() {
  this.setPlaceholdertextcolor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TextInput.prototype.hasPlaceholdertextcolor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StringValue placeholder = 3;
 * @return {?proto.StringValue}
 */
proto.TextInput.prototype.getPlaceholder = function() {
  return /** @type{?proto.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.StringValue, 3));
};


/** @param {?proto.StringValue|undefined} value */
proto.TextInput.prototype.setPlaceholder = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TextInput.prototype.clearPlaceholder = function() {
  this.setPlaceholder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TextInput.prototype.hasPlaceholder = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string value = 4;
 * @return {string}
 */
proto.TextInput.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TextInput.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated LocalProp localProps = 5;
 * @return {!Array<!proto.LocalProp>}
 */
proto.TextInput.prototype.getLocalpropsList = function() {
  return /** @type{!Array<!proto.LocalProp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LocalProp, 5));
};


/** @param {!Array<!proto.LocalProp>} value */
proto.TextInput.prototype.setLocalpropsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.LocalProp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LocalProp}
 */
proto.TextInput.prototype.addLocalprops = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.LocalProp, opt_index);
};


proto.TextInput.prototype.clearLocalpropsList = function() {
  this.setLocalpropsList([]);
};


/**
 * optional Callback onValueChange = 6;
 * @return {?proto.Callback}
 */
proto.TextInput.prototype.getOnvaluechange = function() {
  return /** @type{?proto.Callback} */ (
    jspb.Message.getWrapperField(this, proto.Callback, 6));
};


/** @param {?proto.Callback|undefined} value */
proto.TextInput.prototype.setOnvaluechange = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.TextInput.prototype.clearOnvaluechange = function() {
  this.setOnvaluechange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TextInput.prototype.hasOnvaluechange = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Switch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Switch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Switch.displayName = 'proto.Switch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Switch.prototype.toObject = function(opt_includeInstance) {
  return proto.Switch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Switch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Switch.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && struct_pb.Struct.toObject(includeInstance, f),
    value: jspb.Message.getFieldWithDefault(msg, 2, false),
    onvaluechange: (f = msg.getOnvaluechange()) && proto.Callback.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Switch}
 */
proto.Switch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Switch;
  return proto.Switch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Switch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Switch}
 */
proto.Switch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new struct_pb.Struct;
      reader.readMessage(value,struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.Callback;
      reader.readMessage(value,proto.Callback.deserializeBinaryFromReader);
      msg.setOnvaluechange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Switch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Switch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Switch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Switch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getOnvaluechange();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Callback.serializeBinaryToWriter
    );
  }
};


/**
 * optional google_mirror.protobuf.Struct style = 1;
 * @return {?proto.google_mirror.protobuf.Struct}
 */
proto.Switch.prototype.getStyle = function() {
  return /** @type{?proto.google_mirror.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, struct_pb.Struct, 1));
};


/** @param {?proto.google_mirror.protobuf.Struct|undefined} value */
proto.Switch.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Switch.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Switch.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool value = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Switch.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Switch.prototype.setValue = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional Callback onValueChange = 3;
 * @return {?proto.Callback}
 */
proto.Switch.prototype.getOnvaluechange = function() {
  return /** @type{?proto.Callback} */ (
    jspb.Message.getWrapperField(this, proto.Callback, 3));
};


/** @param {?proto.Callback|undefined} value */
proto.Switch.prototype.setOnvaluechange = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Switch.prototype.clearOnvaluechange = function() {
  this.setOnvaluechange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Switch.prototype.hasOnvaluechange = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Image.displayName = 'proto.Image';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && struct_pb.Struct.toObject(includeInstance, f),
    sourceurlstring: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image;
  return proto.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new struct_pb.Struct;
      reader.readMessage(value,struct_pb.Struct.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceurlstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getSourceurlstring();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional google_mirror.protobuf.Struct style = 1;
 * @return {?proto.google_mirror.protobuf.Struct}
 */
proto.Image.prototype.getStyle = function() {
  return /** @type{?proto.google_mirror.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, struct_pb.Struct, 1));
};


/** @param {?proto.google_mirror.protobuf.Struct|undefined} value */
proto.Image.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Image.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Image.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sourceURLString = 2;
 * @return {string}
 */
proto.Image.prototype.getSourceurlstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Image.prototype.setSourceurlstring = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReactElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ReactElement.oneofGroups_);
};
goog.inherits(proto.ReactElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ReactElement.displayName = 'proto.ReactElement';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ReactElement.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.ReactElement.ValueCase = {
  VALUE_NOT_SET: 0,
  CUSTOM: 2,
  VIEW: 3,
  FLATLIST: 4,
  TOUCHABLEOPACITY: 5,
  TEXTINPUT: 6,
  TEXT: 7,
  RAWTEXT: 8,
  SWITCH: 9,
  IMAGE: 10,
  ANIMATEDTEXT: 11,
  ANIMATEDVIEW: 12,
  ANIMATEDIMAGE: 13
};

/**
 * @return {proto.ReactElement.ValueCase}
 */
proto.ReactElement.prototype.getValueCase = function() {
  return /** @type {proto.ReactElement.ValueCase} */(jspb.Message.computeOneofCase(this, proto.ReactElement.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReactElement.prototype.toObject = function(opt_includeInstance) {
  return proto.ReactElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReactElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReactElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.StringValue.toObject(includeInstance, f),
    custom: (f = msg.getCustom()) && proto.CustomComponent.toObject(includeInstance, f),
    view: (f = msg.getView()) && proto.View.toObject(includeInstance, f),
    flatlist: (f = msg.getFlatlist()) && proto.FlatList.toObject(includeInstance, f),
    touchableopacity: (f = msg.getTouchableopacity()) && proto.TouchableOpacity.toObject(includeInstance, f),
    textinput: (f = msg.getTextinput()) && proto.TextInput.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.Text.toObject(includeInstance, f),
    rawtext: (f = msg.getRawtext()) && proto.RawText.toObject(includeInstance, f),
    pb_switch: (f = msg.getSwitch()) && proto.Switch.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.Image.toObject(includeInstance, f),
    animatedtext: (f = msg.getAnimatedtext()) && proto.AnimatedText.toObject(includeInstance, f),
    animatedview: (f = msg.getAnimatedview()) && proto.AnimatedView.toObject(includeInstance, f),
    animatedimage: (f = msg.getAnimatedimage()) && proto.AnimatedImage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReactElement}
 */
proto.ReactElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReactElement;
  return proto.ReactElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReactElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReactElement}
 */
proto.ReactElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.StringValue;
      reader.readMessage(value,proto.StringValue.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.CustomComponent;
      reader.readMessage(value,proto.CustomComponent.deserializeBinaryFromReader);
      msg.setCustom(value);
      break;
    case 3:
      var value = new proto.View;
      reader.readMessage(value,proto.View.deserializeBinaryFromReader);
      msg.setView(value);
      break;
    case 4:
      var value = new proto.FlatList;
      reader.readMessage(value,proto.FlatList.deserializeBinaryFromReader);
      msg.setFlatlist(value);
      break;
    case 5:
      var value = new proto.TouchableOpacity;
      reader.readMessage(value,proto.TouchableOpacity.deserializeBinaryFromReader);
      msg.setTouchableopacity(value);
      break;
    case 6:
      var value = new proto.TextInput;
      reader.readMessage(value,proto.TextInput.deserializeBinaryFromReader);
      msg.setTextinput(value);
      break;
    case 7:
      var value = new proto.Text;
      reader.readMessage(value,proto.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 8:
      var value = new proto.RawText;
      reader.readMessage(value,proto.RawText.deserializeBinaryFromReader);
      msg.setRawtext(value);
      break;
    case 9:
      var value = new proto.Switch;
      reader.readMessage(value,proto.Switch.deserializeBinaryFromReader);
      msg.setSwitch(value);
      break;
    case 10:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 11:
      var value = new proto.AnimatedText;
      reader.readMessage(value,proto.AnimatedText.deserializeBinaryFromReader);
      msg.setAnimatedtext(value);
      break;
    case 12:
      var value = new proto.AnimatedView;
      reader.readMessage(value,proto.AnimatedView.deserializeBinaryFromReader);
      msg.setAnimatedview(value);
      break;
    case 13:
      var value = new proto.AnimatedImage;
      reader.readMessage(value,proto.AnimatedImage.deserializeBinaryFromReader);
      msg.setAnimatedimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReactElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReactElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReactElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReactElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.StringValue.serializeBinaryToWriter
    );
  }
  f = message.getCustom();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CustomComponent.serializeBinaryToWriter
    );
  }
  f = message.getView();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.View.serializeBinaryToWriter
    );
  }
  f = message.getFlatlist();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.FlatList.serializeBinaryToWriter
    );
  }
  f = message.getTouchableopacity();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.TouchableOpacity.serializeBinaryToWriter
    );
  }
  f = message.getTextinput();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TextInput.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Text.serializeBinaryToWriter
    );
  }
  f = message.getRawtext();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.RawText.serializeBinaryToWriter
    );
  }
  f = message.getSwitch();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Switch.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getAnimatedtext();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.AnimatedText.serializeBinaryToWriter
    );
  }
  f = message.getAnimatedview();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.AnimatedView.serializeBinaryToWriter
    );
  }
  f = message.getAnimatedimage();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.AnimatedImage.serializeBinaryToWriter
    );
  }
};


/**
 * optional StringValue key = 1;
 * @return {?proto.StringValue}
 */
proto.ReactElement.prototype.getKey = function() {
  return /** @type{?proto.StringValue} */ (
    jspb.Message.getWrapperField(this, proto.StringValue, 1));
};


/** @param {?proto.StringValue|undefined} value */
proto.ReactElement.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.ReactElement.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CustomComponent custom = 2;
 * @return {?proto.CustomComponent}
 */
proto.ReactElement.prototype.getCustom = function() {
  return /** @type{?proto.CustomComponent} */ (
    jspb.Message.getWrapperField(this, proto.CustomComponent, 2));
};


/** @param {?proto.CustomComponent|undefined} value */
proto.ReactElement.prototype.setCustom = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearCustom = function() {
  this.setCustom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasCustom = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional View view = 3;
 * @return {?proto.View}
 */
proto.ReactElement.prototype.getView = function() {
  return /** @type{?proto.View} */ (
    jspb.Message.getWrapperField(this, proto.View, 3));
};


/** @param {?proto.View|undefined} value */
proto.ReactElement.prototype.setView = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearView = function() {
  this.setView(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasView = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FlatList flatList = 4;
 * @return {?proto.FlatList}
 */
proto.ReactElement.prototype.getFlatlist = function() {
  return /** @type{?proto.FlatList} */ (
    jspb.Message.getWrapperField(this, proto.FlatList, 4));
};


/** @param {?proto.FlatList|undefined} value */
proto.ReactElement.prototype.setFlatlist = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearFlatlist = function() {
  this.setFlatlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasFlatlist = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TouchableOpacity touchableOpacity = 5;
 * @return {?proto.TouchableOpacity}
 */
proto.ReactElement.prototype.getTouchableopacity = function() {
  return /** @type{?proto.TouchableOpacity} */ (
    jspb.Message.getWrapperField(this, proto.TouchableOpacity, 5));
};


/** @param {?proto.TouchableOpacity|undefined} value */
proto.ReactElement.prototype.setTouchableopacity = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearTouchableopacity = function() {
  this.setTouchableopacity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasTouchableopacity = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TextInput textInput = 6;
 * @return {?proto.TextInput}
 */
proto.ReactElement.prototype.getTextinput = function() {
  return /** @type{?proto.TextInput} */ (
    jspb.Message.getWrapperField(this, proto.TextInput, 6));
};


/** @param {?proto.TextInput|undefined} value */
proto.ReactElement.prototype.setTextinput = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearTextinput = function() {
  this.setTextinput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasTextinput = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Text text = 7;
 * @return {?proto.Text}
 */
proto.ReactElement.prototype.getText = function() {
  return /** @type{?proto.Text} */ (
    jspb.Message.getWrapperField(this, proto.Text, 7));
};


/** @param {?proto.Text|undefined} value */
proto.ReactElement.prototype.setText = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearText = function() {
  this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasText = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional RawText rawText = 8;
 * @return {?proto.RawText}
 */
proto.ReactElement.prototype.getRawtext = function() {
  return /** @type{?proto.RawText} */ (
    jspb.Message.getWrapperField(this, proto.RawText, 8));
};


/** @param {?proto.RawText|undefined} value */
proto.ReactElement.prototype.setRawtext = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearRawtext = function() {
  this.setRawtext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasRawtext = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Switch switch = 9;
 * @return {?proto.Switch}
 */
proto.ReactElement.prototype.getSwitch = function() {
  return /** @type{?proto.Switch} */ (
    jspb.Message.getWrapperField(this, proto.Switch, 9));
};


/** @param {?proto.Switch|undefined} value */
proto.ReactElement.prototype.setSwitch = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearSwitch = function() {
  this.setSwitch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasSwitch = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Image image = 10;
 * @return {?proto.Image}
 */
proto.ReactElement.prototype.getImage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 10));
};


/** @param {?proto.Image|undefined} value */
proto.ReactElement.prototype.setImage = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasImage = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional AnimatedText animatedText = 11;
 * @return {?proto.AnimatedText}
 */
proto.ReactElement.prototype.getAnimatedtext = function() {
  return /** @type{?proto.AnimatedText} */ (
    jspb.Message.getWrapperField(this, proto.AnimatedText, 11));
};


/** @param {?proto.AnimatedText|undefined} value */
proto.ReactElement.prototype.setAnimatedtext = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearAnimatedtext = function() {
  this.setAnimatedtext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasAnimatedtext = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AnimatedView animatedView = 12;
 * @return {?proto.AnimatedView}
 */
proto.ReactElement.prototype.getAnimatedview = function() {
  return /** @type{?proto.AnimatedView} */ (
    jspb.Message.getWrapperField(this, proto.AnimatedView, 12));
};


/** @param {?proto.AnimatedView|undefined} value */
proto.ReactElement.prototype.setAnimatedview = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearAnimatedview = function() {
  this.setAnimatedview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasAnimatedview = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional AnimatedImage animatedImage = 13;
 * @return {?proto.AnimatedImage}
 */
proto.ReactElement.prototype.getAnimatedimage = function() {
  return /** @type{?proto.AnimatedImage} */ (
    jspb.Message.getWrapperField(this, proto.AnimatedImage, 13));
};


/** @param {?proto.AnimatedImage|undefined} value */
proto.ReactElement.prototype.setAnimatedimage = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.ReactElement.oneofGroups_[0], value);
};


proto.ReactElement.prototype.clearAnimatedimage = function() {
  this.setAnimatedimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ReactElement.prototype.hasAnimatedimage = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Unmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Unmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Unmount.displayName = 'proto.Unmount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Unmount.prototype.toObject = function(opt_includeInstance) {
  return proto.Unmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Unmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Unmount.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Unmount}
 */
proto.Unmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Unmount;
  return proto.Unmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Unmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Unmount}
 */
proto.Unmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Unmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Unmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Unmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Unmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Render = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Render.repeatedFields_, null);
};
goog.inherits(proto.Render, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Render.displayName = 'proto.Render';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Render.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Render.prototype.toObject = function(opt_includeInstance) {
  return proto.Render.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Render} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Render.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    props: (f = msg.getProps()) && struct_pb.Struct.toObject(includeInstance, f),
    localpropsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Render}
 */
proto.Render.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Render;
  return proto.Render.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Render} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Render}
 */
proto.Render.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new struct_pb.Struct;
      reader.readMessage(value,struct_pb.Struct.deserializeBinaryFromReader);
      msg.setProps(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addLocalprops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Render.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Render.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Render} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Render.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProps();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getLocalpropsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Render.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Render.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google_mirror.protobuf.Struct props = 2;
 * @return {?proto.google_mirror.protobuf.Struct}
 */
proto.Render.prototype.getProps = function() {
  return /** @type{?proto.google_mirror.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, struct_pb.Struct, 2));
};


/** @param {?proto.google_mirror.protobuf.Struct|undefined} value */
proto.Render.prototype.setProps = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Render.prototype.clearProps = function() {
  this.setProps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Render.prototype.hasProps = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string localProps = 3;
 * @return {!Array<string>}
 */
proto.Render.prototype.getLocalpropsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.Render.prototype.setLocalpropsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Render.prototype.addLocalprops = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.Render.prototype.clearLocalpropsList = function() {
  this.setLocalpropsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Call = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Call, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Call.displayName = 'proto.Call';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Call.prototype.toObject = function(opt_includeInstance) {
  return proto.Call.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Call} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Call.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    args: (f = msg.getArgs()) && struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Call}
 */
proto.Call.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Call;
  return proto.Call.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Call} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Call}
 */
proto.Call.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageid(value);
      break;
    case 2:
      var value = new struct_pb.Struct;
      reader.readMessage(value,struct_pb.Struct.deserializeBinaryFromReader);
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Call.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Call.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Call} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Call.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getArgs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 messageId = 1;
 * @return {number}
 */
proto.Call.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Call.prototype.setMessageid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google_mirror.protobuf.Struct args = 2;
 * @return {?proto.google_mirror.protobuf.Struct}
 */
proto.Call.prototype.getArgs = function() {
  return /** @type{?proto.google_mirror.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, struct_pb.Struct, 2));
};


/** @param {?proto.google_mirror.protobuf.Struct|undefined} value */
proto.Call.prototype.setArgs = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Call.prototype.clearArgs = function() {
  this.setArgs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Call.prototype.hasArgs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientToServer.oneofGroups_);
};
goog.inherits(proto.ClientToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientToServer.displayName = 'proto.ClientToServer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientToServer.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.ClientToServer.ValueCase = {
  VALUE_NOT_SET: 0,
  UNMOUNT: 2,
  RENDER: 3,
  CALL: 4
};

/**
 * @return {proto.ClientToServer.ValueCase}
 */
proto.ClientToServer.prototype.getValueCase = function() {
  return /** @type {proto.ClientToServer.ValueCase} */(jspb.Message.computeOneofCase(this, proto.ClientToServer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unmount: (f = msg.getUnmount()) && proto.Unmount.toObject(includeInstance, f),
    render: (f = msg.getRender()) && proto.Render.toObject(includeInstance, f),
    call: (f = msg.getCall()) && proto.Call.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientToServer}
 */
proto.ClientToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientToServer;
  return proto.ClientToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientToServer}
 */
proto.ClientToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRootid(value);
      break;
    case 2:
      var value = new proto.Unmount;
      reader.readMessage(value,proto.Unmount.deserializeBinaryFromReader);
      msg.setUnmount(value);
      break;
    case 3:
      var value = new proto.Render;
      reader.readMessage(value,proto.Render.deserializeBinaryFromReader);
      msg.setRender(value);
      break;
    case 4:
      var value = new proto.Call;
      reader.readMessage(value,proto.Call.deserializeBinaryFromReader);
      msg.setCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUnmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Unmount.serializeBinaryToWriter
    );
  }
  f = message.getRender();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Render.serializeBinaryToWriter
    );
  }
  f = message.getCall();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Call.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 rootId = 1;
 * @return {number}
 */
proto.ClientToServer.prototype.getRootid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ClientToServer.prototype.setRootid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Unmount unmount = 2;
 * @return {?proto.Unmount}
 */
proto.ClientToServer.prototype.getUnmount = function() {
  return /** @type{?proto.Unmount} */ (
    jspb.Message.getWrapperField(this, proto.Unmount, 2));
};


/** @param {?proto.Unmount|undefined} value */
proto.ClientToServer.prototype.setUnmount = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ClientToServer.oneofGroups_[0], value);
};


proto.ClientToServer.prototype.clearUnmount = function() {
  this.setUnmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToServer.prototype.hasUnmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Render render = 3;
 * @return {?proto.Render}
 */
proto.ClientToServer.prototype.getRender = function() {
  return /** @type{?proto.Render} */ (
    jspb.Message.getWrapperField(this, proto.Render, 3));
};


/** @param {?proto.Render|undefined} value */
proto.ClientToServer.prototype.setRender = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ClientToServer.oneofGroups_[0], value);
};


proto.ClientToServer.prototype.clearRender = function() {
  this.setRender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToServer.prototype.hasRender = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Call call = 4;
 * @return {?proto.Call}
 */
proto.ClientToServer.prototype.getCall = function() {
  return /** @type{?proto.Call} */ (
    jspb.Message.getWrapperField(this, proto.Call, 4));
};


/** @param {?proto.Call|undefined} value */
proto.ClientToServer.prototype.setCall = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ClientToServer.oneofGroups_[0], value);
};


proto.ClientToServer.prototype.clearCall = function() {
  this.setCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientToServer.prototype.hasCall = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Error.displayName = 'proto.Error';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Error;
  return proto.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Error}
 */
proto.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Update = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Update.repeatedFields_, null);
};
goog.inherits(proto.Update, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Update.displayName = 'proto.Update';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Update.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Update.prototype.toObject = function(opt_includeInstance) {
  return proto.Update.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Update} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Update.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementList: jspb.Message.toObjectList(msg.getElementList(),
    proto.ReactElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Update}
 */
proto.Update.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Update;
  return proto.Update.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Update} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Update}
 */
proto.Update.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ReactElement;
      reader.readMessage(value,proto.ReactElement.deserializeBinaryFromReader);
      msg.addElement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Update.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Update.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Update} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Update.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ReactElement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ReactElement element = 1;
 * @return {!Array<!proto.ReactElement>}
 */
proto.Update.prototype.getElementList = function() {
  return /** @type{!Array<!proto.ReactElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReactElement, 1));
};


/** @param {!Array<!proto.ReactElement>} value */
proto.Update.prototype.setElementList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ReactElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReactElement}
 */
proto.Update.prototype.addElement = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ReactElement, opt_index);
};


proto.Update.prototype.clearElementList = function() {
  this.setElementList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerToClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerToClient.oneofGroups_);
};
goog.inherits(proto.ServerToClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerToClient.displayName = 'proto.ServerToClient';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerToClient.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.ServerToClient.ValueCase = {
  VALUE_NOT_SET: 0,
  ERROR: 2,
  UPDATE: 3,
  ANIMATEDVALUEUPDATE: 4
};

/**
 * @return {proto.ServerToClient.ValueCase}
 */
proto.ServerToClient.prototype.getValueCase = function() {
  return /** @type {proto.ServerToClient.ValueCase} */(jspb.Message.computeOneofCase(this, proto.ServerToClient.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerToClient.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerToClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerToClient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerToClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && proto.Error.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.Update.toObject(includeInstance, f),
    animatedvalueupdate: (f = msg.getAnimatedvalueupdate()) && nars_animated_pb.ValueUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerToClient}
 */
proto.ServerToClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerToClient;
  return proto.ServerToClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerToClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerToClient}
 */
proto.ServerToClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRootid(value);
      break;
    case 2:
      var value = new proto.Error;
      reader.readMessage(value,proto.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.Update;
      reader.readMessage(value,proto.Update.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    case 4:
      var value = new nars_animated_pb.ValueUpdate;
      reader.readMessage(value,nars_animated_pb.ValueUpdate.deserializeBinaryFromReader);
      msg.setAnimatedvalueupdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerToClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerToClient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerToClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerToClient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Error.serializeBinaryToWriter
    );
  }
  f = message.getUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Update.serializeBinaryToWriter
    );
  }
  f = message.getAnimatedvalueupdate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      nars_animated_pb.ValueUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 rootId = 1;
 * @return {number}
 */
proto.ServerToClient.prototype.getRootid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ServerToClient.prototype.setRootid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Error error = 2;
 * @return {?proto.Error}
 */
proto.ServerToClient.prototype.getError = function() {
  return /** @type{?proto.Error} */ (
    jspb.Message.getWrapperField(this, proto.Error, 2));
};


/** @param {?proto.Error|undefined} value */
proto.ServerToClient.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ServerToClient.oneofGroups_[0], value);
};


proto.ServerToClient.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToClient.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Update update = 3;
 * @return {?proto.Update}
 */
proto.ServerToClient.prototype.getUpdate = function() {
  return /** @type{?proto.Update} */ (
    jspb.Message.getWrapperField(this, proto.Update, 3));
};


/** @param {?proto.Update|undefined} value */
proto.ServerToClient.prototype.setUpdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ServerToClient.oneofGroups_[0], value);
};


proto.ServerToClient.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToClient.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional nars.animated.ValueUpdate animatedValueUpdate = 4;
 * @return {?proto.nars.animated.ValueUpdate}
 */
proto.ServerToClient.prototype.getAnimatedvalueupdate = function() {
  return /** @type{?proto.nars.animated.ValueUpdate} */ (
    jspb.Message.getWrapperField(this, nars_animated_pb.ValueUpdate, 4));
};


/** @param {?proto.nars.animated.ValueUpdate|undefined} value */
proto.ServerToClient.prototype.setAnimatedvalueupdate = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ServerToClient.oneofGroups_[0], value);
};


proto.ServerToClient.prototype.clearAnimatedvalueupdate = function() {
  this.setAnimatedvalueupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerToClient.prototype.hasAnimatedvalueupdate = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnimatedView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AnimatedView.repeatedFields_, null);
};
goog.inherits(proto.AnimatedView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnimatedView.displayName = 'proto.AnimatedView';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AnimatedView.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnimatedView.prototype.toObject = function(opt_includeInstance) {
  return proto.AnimatedView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnimatedView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnimatedView.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && nars_animated_pb.Style.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.ReactElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnimatedView}
 */
proto.AnimatedView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnimatedView;
  return proto.AnimatedView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnimatedView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnimatedView}
 */
proto.AnimatedView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nars_animated_pb.Style;
      reader.readMessage(value,nars_animated_pb.Style.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = new proto.ReactElement;
      reader.readMessage(value,proto.ReactElement.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnimatedView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnimatedView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnimatedView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnimatedView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nars_animated_pb.Style.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ReactElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional nars.animated.Style style = 1;
 * @return {?proto.nars.animated.Style}
 */
proto.AnimatedView.prototype.getStyle = function() {
  return /** @type{?proto.nars.animated.Style} */ (
    jspb.Message.getWrapperField(this, nars_animated_pb.Style, 1));
};


/** @param {?proto.nars.animated.Style|undefined} value */
proto.AnimatedView.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.AnimatedView.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnimatedView.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ReactElement children = 2;
 * @return {!Array<!proto.ReactElement>}
 */
proto.AnimatedView.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.ReactElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReactElement, 2));
};


/** @param {!Array<!proto.ReactElement>} value */
proto.AnimatedView.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ReactElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReactElement}
 */
proto.AnimatedView.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ReactElement, opt_index);
};


proto.AnimatedView.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnimatedText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AnimatedText.repeatedFields_, null);
};
goog.inherits(proto.AnimatedText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnimatedText.displayName = 'proto.AnimatedText';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AnimatedText.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnimatedText.prototype.toObject = function(opt_includeInstance) {
  return proto.AnimatedText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnimatedText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnimatedText.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && nars_animated_pb.Style.toObject(includeInstance, f),
    childrenList: jspb.Message.toObjectList(msg.getChildrenList(),
    proto.ReactElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnimatedText}
 */
proto.AnimatedText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnimatedText;
  return proto.AnimatedText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnimatedText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnimatedText}
 */
proto.AnimatedText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nars_animated_pb.Style;
      reader.readMessage(value,nars_animated_pb.Style.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = new proto.ReactElement;
      reader.readMessage(value,proto.ReactElement.deserializeBinaryFromReader);
      msg.addChildren(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnimatedText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnimatedText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnimatedText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnimatedText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nars_animated_pb.Style.serializeBinaryToWriter
    );
  }
  f = message.getChildrenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ReactElement.serializeBinaryToWriter
    );
  }
};


/**
 * optional nars.animated.Style style = 1;
 * @return {?proto.nars.animated.Style}
 */
proto.AnimatedText.prototype.getStyle = function() {
  return /** @type{?proto.nars.animated.Style} */ (
    jspb.Message.getWrapperField(this, nars_animated_pb.Style, 1));
};


/** @param {?proto.nars.animated.Style|undefined} value */
proto.AnimatedText.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.AnimatedText.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnimatedText.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ReactElement children = 2;
 * @return {!Array<!proto.ReactElement>}
 */
proto.AnimatedText.prototype.getChildrenList = function() {
  return /** @type{!Array<!proto.ReactElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ReactElement, 2));
};


/** @param {!Array<!proto.ReactElement>} value */
proto.AnimatedText.prototype.setChildrenList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ReactElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ReactElement}
 */
proto.AnimatedText.prototype.addChildren = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ReactElement, opt_index);
};


proto.AnimatedText.prototype.clearChildrenList = function() {
  this.setChildrenList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnimatedImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AnimatedImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnimatedImage.displayName = 'proto.AnimatedImage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnimatedImage.prototype.toObject = function(opt_includeInstance) {
  return proto.AnimatedImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnimatedImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnimatedImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    style: (f = msg.getStyle()) && nars_animated_pb.Style.toObject(includeInstance, f),
    sourceurlstring: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnimatedImage}
 */
proto.AnimatedImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnimatedImage;
  return proto.AnimatedImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnimatedImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnimatedImage}
 */
proto.AnimatedImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new nars_animated_pb.Style;
      reader.readMessage(value,nars_animated_pb.Style.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceurlstring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnimatedImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnimatedImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnimatedImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnimatedImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      nars_animated_pb.Style.serializeBinaryToWriter
    );
  }
  f = message.getSourceurlstring();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional nars.animated.Style style = 1;
 * @return {?proto.nars.animated.Style}
 */
proto.AnimatedImage.prototype.getStyle = function() {
  return /** @type{?proto.nars.animated.Style} */ (
    jspb.Message.getWrapperField(this, nars_animated_pb.Style, 1));
};


/** @param {?proto.nars.animated.Style|undefined} value */
proto.AnimatedImage.prototype.setStyle = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.AnimatedImage.prototype.clearStyle = function() {
  this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AnimatedImage.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sourceURLString = 2;
 * @return {string}
 */
proto.AnimatedImage.prototype.getSourceurlstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AnimatedImage.prototype.setSourceurlstring = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto);
