// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function classify(x) {
  var match = typeof x;
  switch (match) {
    case "boolean" :
        return /* Boolean */Block.__(3, [x]);
    case "function" :
        return /* Function */Block.__(5, [x]);
    case "number" :
        return /* Number */Block.__(4, [x]);
    case "object" :
        if (x !== null) {
          var match$1 = Array.isArray(x);
          if (match$1) {
            return /* Array */Block.__(1, [x]);
          } else {
            return /* Object */Block.__(0, [x]);
          }
        } else {
          return /* Null */0;
        }
    case "string" :
        return /* String */Block.__(2, [x]);
    case "undefined" :
        return /* Undefined */1;
    default:
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "JsValue.re",
              38,
              9
            ]
          ];
  }
}

function dictToStruct(dict) {
  return $$Array.to_list(Js_dict.entries(dict).map((function (param) {
                    return /* tuple */[
                            param[0],
                            toValue(param[1])
                          ];
                  })));
}

function toValue(t) {
  var match = classify(t);
  if (typeof match === "number") {
    if (match === /* Null */0) {
      return /* `Null_value */[
              -654604135,
              /* NULL_VALUE */0
            ];
    } else {
      return /* `Undefined_value */[
              629889314,
              /* UNDEFINED_VALUE */0
            ];
    }
  } else {
    switch (match.tag | 0) {
      case /* Object */0 :
          return /* `Struct_value */[
                  -483181849,
                  dictToStruct(match[0])
                ];
      case /* Array */1 :
          return /* `List_value */[
                  -769490512,
                  $$Array.to_list(match[0].map(toValue))
                ];
      case /* String */2 :
          return /* `String_value */[
                  -663343517,
                  match[0]
                ];
      case /* Boolean */3 :
          return /* `Bool_value */[
                  258787964,
                  match[0]
                ];
      case /* Number */4 :
          return /* `Number_value */[
                  -785426853,
                  match[0]
                ];
      case /* Function */5 :
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "JsValue.re",
                  57,
                  19
                ]
              ];
      
    }
  }
}

function valueToT(value) {
  if (typeof value === "number") {
    return undefined;
  } else {
    var variant = value[0];
    if (variant >= -654604135) {
      if (variant >= 258787964) {
        if (variant >= 629889314) {
          return undefined;
        } else {
          return value[1];
        }
      } else if (variant >= -483181849) {
        return structToDict(value[1]);
      } else {
        return null;
      }
    } else if (variant !== -769490512) {
      return value[1];
    } else {
      return $$Array.of_list(List.map(valueToT, value[1]));
    }
  }
}

function structToDict(structDict) {
  var result = { };
  List.iter((function (param) {
          var value = param[1];
          if (value !== undefined) {
            result[param[0]] = valueToT(value);
            return /* () */0;
          } else {
            return /* () */0;
          }
        }), structDict);
  return result;
}

function tToStruct(t) {
  var match = classify(t);
  if (typeof match === "number") {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "JsValue.re",
            110,
            9
          ]
        ];
  } else {
    switch (match.tag | 0) {
      case /* Object */0 :
          return dictToStruct(match[0]);
      case /* Array */1 :
          var styles = { };
          match[0].map(classify).forEach((function (param) {
                  var styleDict = styles;
                  var value = param;
                  if (typeof value === "number") {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "JsValue.re",
                            98,
                            9
                          ]
                        ];
                  } else if (value.tag) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "JsValue.re",
                            98,
                            9
                          ]
                        ];
                  } else {
                    Js_dict.entries(value[0]).forEach((function (param) {
                            styleDict[param[0]] = param[1];
                            return /* () */0;
                          }));
                    return /* () */0;
                  }
                }));
          return dictToStruct(styles);
      default:
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "JsValue.re",
                110,
                9
              ]
            ];
    }
  }
}

exports.toValue = toValue;
exports.dictToStruct = dictToStruct;
exports.tToStruct = tToStruct;
exports.structToDict = structToDict;
/* No side effect */
