// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var JsValue = require("./JsValue.bs.js");
var Belt_HashMapInt = require("bs-platform/lib/js/belt_HashMapInt.js");

function make(param) {
  return {
          counter: 0,
          registry: Belt_HashMapInt.make(50)
        };
}

function add(t, callback) {
  var id = t.counter;
  t.counter = id + 1 | 0;
  Belt_HashMapInt.set(t.registry, id, callback);
  return id;
}

function clear(t) {
  Belt_HashMapInt.clear(t.registry);
  t.counter = 0;
  return /* () */0;
}

function invokeCallback(t, messageId, args) {
  var match = Belt_HashMapInt.get(t.registry, messageId);
  if (match !== undefined) {
    return Curry._1(match, args);
  } else {
    return /* () */0;
  }
}

var CallbackRegistry = {
  HashMap: /* alias */0,
  make: make,
  add: add,
  clear: clear,
  invokeCallback: invokeCallback
};

function toJs(t) {
  return {
          rpcCall: (function (messageId, args) {
              return Curry._2(t.rpcCall, messageId, JsValue.dictToStruct(args));
            }),
          registerCallback: (function (callback) {
              return Curry._1(t.registerCallback, (function (args) {
                            return Curry._1(callback, JsValue.structToDict(args));
                          }));
            })
        };
}

var fromJsRpcArgs = JsValue.dictToStruct;

function make$1(rpcCall, updateAnimatedValue) {
  var registry = {
    counter: 0,
    registry: Belt_HashMapInt.make(50)
  };
  return {
          rpcCall: rpcCall,
          registerCallback: (function (param) {
              return add(registry, param);
            }),
          executeRpcCall: (function (messageId, args) {
              return invokeCallback(registry, messageId, args);
            }),
          updateAnimatedValue: updateAnimatedValue,
          clear: (function (param) {
              return clear(registry);
            })
        };
}

var Struct = /* alias */0;

exports.Struct = Struct;
exports.CallbackRegistry = CallbackRegistry;
exports.toJs = toJs;
exports.fromJsRpcArgs = fromJsRpcArgs;
exports.make = make$1;
/* No side effect */
