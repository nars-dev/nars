/* TypeScript file generated by genType. */
/* eslint-disable import/first */


// tslint:disable-next-line:no-var-requires
const Curry = require('bs-platform/lib/js/curry.js');

// tslint:disable-next-line:no-var-requires
const ComponentRegistryBS = require('./ComponentRegistry.bs');

import {Dict_t as Js_Dict_t} from '../src/shims/Js.shim';

import {OpaqueProp as opaqueProp} from './TsTypes';

import {encodedReactElement as Instance_encodedReactElement} from './Instance.gen';

import {encoder as Instance_encoder} from './Instance.gen';

// tslint:disable-next-line:interface-over-type-literal
export type opaqueProp = opaqueProp;

// tslint:disable-next-line:interface-over-type-literal
export type opaqueProps = Js_Dict_t<opaqueProp>;

// tslint:disable-next-line:interface-over-type-literal
export type createEncoder = (_1:opaqueProps) => Instance_encoder;

export const add: (_1:{ readonly name: string; readonly createEncoder: createEncoder }) => void = function (Arg1: any) {
  const result = Curry._2(ComponentRegistryBS.add, Arg1.name, function (Arg11: any) {
      const result1 = Arg1.createEncoder(Arg11);
      return function (ArgregisterCallback: any, Argchildren: any) {
          const result2 = result1({registerCallback:ArgregisterCallback, children:Argchildren});
          return result2
        }
    });
  return result
};

export const registerRawTextEncodedReactElementInitializer: (_1:((_1:string) => Instance_encodedReactElement)) => void = ComponentRegistryBS.registerRawTextEncodedReactElementInitializer;

export const createRawTextEncodedReactElement: (_1:string) => Instance_encodedReactElement = ComponentRegistryBS.createRawTextEncodedReactElement;
