// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ReasonAnimatedUtils = require("./ReasonAnimatedUtils");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function isAnimatedNode(prim) {
  return ReasonAnimatedUtils.isAnimatedNode(prim);
}

function getProtobufNode(prim, prim$1) {
  return ReasonAnimatedUtils.getProtobufNode(prim, prim$1);
}

function classify(x) {
  var match = typeof x;
  switch (match) {
    case "boolean" :
        return /* Boolean */Block.__(3, [x]);
    case "function" :
        return /* Function */Block.__(5, [x]);
    case "number" :
        return /* Number */Block.__(4, [x]);
    case "object" :
        if (x !== null) {
          if (Array.isArray(x)) {
            return /* Array */Block.__(1, [x]);
          } else if (ReasonAnimatedUtils.isAnimatedNode(x)) {
            return /* Animated */Block.__(6, [x]);
          } else {
            return /* Object */Block.__(0, [x]);
          }
        } else {
          return /* Null */0;
        }
    case "string" :
        return /* String */Block.__(2, [x]);
    case "undefined" :
        return /* Undefined */1;
    default:
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "AnimatedStyle.re",
              59,
              9
            ]
          ];
  }
}

function dictToStruct(idGenerator, dict) {
  return $$Array.to_list(Js_dict.entries(dict).map((function (param) {
                    return /* tuple */[
                            param[0],
                            toValue(idGenerator, param[1])
                          ];
                  })));
}

function toValue(idGenerator, t) {
  var match = classify(t);
  if (typeof match === "number") {
    if (match === /* Null */0) {
      return /* `Null_value */[
              -654604135,
              /* NULL_VALUE */0
            ];
    } else {
      return /* `Undefined_value */[
              629889314,
              /* UNDEFINED_VALUE */0
            ];
    }
  } else {
    switch (match.tag | 0) {
      case /* Object */0 :
          return /* `Style_value */[
                  -724205949,
                  dictToStruct(idGenerator, match[0])
                ];
      case /* Array */1 :
          return /* `List_value */[
                  -769490512,
                  $$Array.to_list(match[0].map((function (param) {
                              return toValue(idGenerator, param);
                            })))
                ];
      case /* String */2 :
          return /* `String_value */[
                  -663343517,
                  match[0]
                ];
      case /* Boolean */3 :
          return /* `Bool_value */[
                  258787964,
                  match[0]
                ];
      case /* Number */4 :
          return /* `Number_value */[
                  -785426853,
                  match[0]
                ];
      case /* Function */5 :
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "AnimatedStyle.re",
                  80,
                  19
                ]
              ];
      case /* Animated */6 :
          return /* `Node */[
                  870528546,
                  {
                    node: ReasonAnimatedUtils.getProtobufNode(idGenerator, match[0]),
                    __nodeID: Curry._1(idGenerator, /* () */0)
                  }
                ];
      
    }
  }
}

var tToStruct = dictToStruct;

var ProtobufAnimated = 0;

var Style = 0;

var Value = 0;

var Struct = 0;

var $$Node = 0;

exports.ProtobufAnimated = ProtobufAnimated;
exports.Style = Style;
exports.Value = Value;
exports.Struct = Struct;
exports.$$Node = $$Node;
exports.isAnimatedNode = isAnimatedNode;
exports.getProtobufNode = getProtobufNode;
exports.classify = classify;
exports.dictToStruct = dictToStruct;
exports.toValue = toValue;
exports.tToStruct = tToStruct;
/* ./ReasonAnimatedUtils Not a pure module */
