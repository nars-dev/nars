// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Struct = require("./struct.bs.js");
var Caml_module = require("bs-platform/lib/js/caml_module.js");
var Spec$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/spec.bs.js");
var Serialize$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/serialize.bs.js");
var Deserialize$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/deserialize.bs.js");

var StringValue = Caml_module.init_mod([
      "schema.ml",
      24,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Int32Value = Caml_module.init_mod([
      "schema.ml",
      45,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Callback = Caml_module.init_mod([
      "schema.ml",
      66,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var LocalProp = Caml_module.init_mod([
      "schema.ml",
      87,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var CustomComponent = Caml_module.init_mod([
      "schema.ml",
      108,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var View = Caml_module.init_mod([
      "schema.ml",
      129,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var FlatList = Caml_module.init_mod([
      "schema.ml",
      150,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var TouchableOpacity = Caml_module.init_mod([
      "schema.ml",
      171,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var RawText = Caml_module.init_mod([
      "schema.ml",
      192,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var $$Text = Caml_module.init_mod([
      "schema.ml",
      213,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var TextInput = Caml_module.init_mod([
      "schema.ml",
      234,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Switch = Caml_module.init_mod([
      "schema.ml",
      255,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var $$Image = Caml_module.init_mod([
      "schema.ml",
      276,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var ReactElement = Caml_module.init_mod([
      "schema.ml",
      297,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Unmount = Caml_module.init_mod([
      "schema.ml",
      318,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Render = Caml_module.init_mod([
      "schema.ml",
      339,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Call = Caml_module.init_mod([
      "schema.ml",
      360,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var ClientToServer = Caml_module.init_mod([
      "schema.ml",
      381,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var $$Error = Caml_module.init_mod([
      "schema.ml",
      402,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Update = Caml_module.init_mod([
      "schema.ml",
      423,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var ServerToClient = Caml_module.init_mod([
      "schema.ml",
      444,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

function name$prime(param) {
  return "Schema.StringValue";
}

function to_proto(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.string,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Spec$Ocamlprotocplugin.Serialize.C.nil);
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  return Curry._2(serialize, /* () */0, t);
}

function from_proto(writer) {
  var constructor = function (a) {
    return a;
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.string,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], StringValue, {
      name$prime: name$prime,
      to_proto: to_proto,
      from_proto: from_proto
    });

function name$prime$1(param) {
  return "Schema.Int32Value";
}

function to_proto$1(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.int32_int,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Spec$Ocamlprotocplugin.Serialize.C.nil);
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  return Curry._2(serialize, /* () */0, t);
}

function from_proto$1(writer) {
  var constructor = function (a) {
    return a;
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Int32Value, {
      name$prime: name$prime$1,
      to_proto: to_proto$1,
      from_proto: from_proto$1
    });

function name$prime$2(param) {
  return "Schema.Callback";
}

function to_proto$2(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.int32_int,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Spec$Ocamlprotocplugin.Serialize.C.nil);
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  return Curry._2(serialize, /* () */0, t);
}

function from_proto$2(writer) {
  var constructor = function (a) {
    return a;
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Callback, {
      name$prime: name$prime$2,
      to_proto: to_proto$2,
      from_proto: from_proto$2
    });

function name$prime$3(param) {
  return "Schema.LocalProp";
}

function to_proto$3(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.string,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
                2,
                Spec$Ocamlprotocplugin.Serialize.C.string,
                Spec$Ocamlprotocplugin.Serialize.C.proto3
              ]), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* localKey */0], param[/* propKey */1]);
}

function from_proto$3(writer) {
  var constructor = function (localKey, propKey) {
    return /* record */[
            /* localKey */localKey,
            /* propKey */propKey
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.string,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
                2,
                Spec$Ocamlprotocplugin.Deserialize.C.string,
                Spec$Ocamlprotocplugin.Deserialize.C.proto3
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], LocalProp, {
      name$prime: name$prime$3,
      to_proto: to_proto$3,
      from_proto: from_proto$3
    });

function name$prime$4(param) {
  return "Schema.CustomComponent";
}

function to_proto$4(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.string,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
                2,
                Spec$Ocamlprotocplugin.Serialize.C.bytes,
                Spec$Ocamlprotocplugin.Serialize.C.proto3
              ]), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* type_id */0], param[/* contents */1]);
}

function from_proto$4(writer) {
  var constructor = function (type_id, contents) {
    return /* record */[
            /* type_id */type_id,
            /* contents */contents
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.string,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
                2,
                Spec$Ocamlprotocplugin.Deserialize.C.bytes,
                Spec$Ocamlprotocplugin.Deserialize.C.proto3
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], CustomComponent, {
      name$prime: name$prime$4,
      to_proto: to_proto$4,
      from_proto: from_proto$4
    });

function name$prime$5(param) {
  return "Schema.View";
}

function to_proto$5(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Struct.Google_mirror.Protobuf.Struct.to_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
                Spec$Ocamlprotocplugin.Serialize.C.not_packed
              ]), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* style */0], param[/* children */1]);
}

function from_proto$5(writer) {
  var constructor = function (style, children) {
    return /* record */[
            /* style */style,
            /* children */children
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Struct.Google_mirror.Protobuf.Struct.from_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
                Spec$Ocamlprotocplugin.Deserialize.C.not_packed
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], View, {
      name$prime: name$prime$5,
      to_proto: to_proto$5,
      from_proto: from_proto$5
    });

function name$prime$6(param) {
  return "Schema.FlatList";
}

function to_proto$6(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Struct.Google_mirror.Protobuf.Struct.to_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Callback.to_proto)
              ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Int32Value.to_proto)
                  ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                        4,
                        Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
                        Spec$Ocamlprotocplugin.Serialize.C.not_packed
                      ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                            5,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, LocalProp.to_proto),
                            Spec$Ocamlprotocplugin.Serialize.C.not_packed
                          ]), Spec$Ocamlprotocplugin.Serialize.C.nil)))));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._5(f$prime, param[/* style */0], param[/* onEndReached */1], param[/* onEndReachedThreshold */2], param[/* children */3], param[/* localProps */4]);
}

function from_proto$6(writer) {
  var constructor = function (style, onEndReached, onEndReachedThreshold, children, localProps) {
    return /* record */[
            /* style */style,
            /* onEndReached */onEndReached,
            /* onEndReachedThreshold */onEndReachedThreshold,
            /* children */children,
            /* localProps */localProps
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Struct.Google_mirror.Protobuf.Struct.from_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Callback.from_proto)
              ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Int32Value.from_proto)
                  ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                        4,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
                        Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                      ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                            5,
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, LocalProp.from_proto),
                            Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                          ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)))));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], FlatList, {
      name$prime: name$prime$6,
      to_proto: to_proto$6,
      from_proto: from_proto$6
    });

function name$prime$7(param) {
  return "Schema.TouchableOpacity";
}

function to_proto$7(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Callback.to_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
                Spec$Ocamlprotocplugin.Serialize.C.not_packed
              ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, LocalProp.to_proto),
                    Spec$Ocamlprotocplugin.Serialize.C.not_packed
                  ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._3(f$prime, param[/* onPress */0], param[/* children */1], param[/* localProps */2]);
}

function from_proto$7(writer) {
  var constructor = function (onPress, children, localProps) {
    return /* record */[
            /* onPress */onPress,
            /* children */children,
            /* localProps */localProps
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Callback.from_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
                Spec$Ocamlprotocplugin.Deserialize.C.not_packed
              ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, LocalProp.from_proto),
                    Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                  ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], TouchableOpacity, {
      name$prime: name$prime$7,
      to_proto: to_proto$7,
      from_proto: from_proto$7
    });

function name$prime$8(param) {
  return "Schema.RawText";
}

function to_proto$8(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.string,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Spec$Ocamlprotocplugin.Serialize.C.nil);
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  return Curry._2(serialize, /* () */0, t);
}

function from_proto$8(writer) {
  var constructor = function (a) {
    return a;
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.string,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], RawText, {
      name$prime: name$prime$8,
      to_proto: to_proto$8,
      from_proto: from_proto$8
    });

function name$prime$9(param) {
  return "Schema.Text";
}

function to_proto$9(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Struct.Google_mirror.Protobuf.Struct.to_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
                Spec$Ocamlprotocplugin.Serialize.C.not_packed
              ]), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* style */0], param[/* children */1]);
}

function from_proto$9(writer) {
  var constructor = function (style, children) {
    return /* record */[
            /* style */style,
            /* children */children
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Struct.Google_mirror.Protobuf.Struct.from_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
                Spec$Ocamlprotocplugin.Deserialize.C.not_packed
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], $$Text, {
      name$prime: name$prime$9,
      to_proto: to_proto$9,
      from_proto: from_proto$9
    });

function name$prime$10(param) {
  return "Schema.TextInput";
}

function to_proto$10(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Struct.Google_mirror.Protobuf.Struct.to_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, StringValue.to_proto)
              ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, StringValue.to_proto)
                  ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
                        4,
                        Spec$Ocamlprotocplugin.Serialize.C.string,
                        Spec$Ocamlprotocplugin.Serialize.C.proto3
                      ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                            5,
                            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, LocalProp.to_proto),
                            Spec$Ocamlprotocplugin.Serialize.C.not_packed
                          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                                6,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Callback.to_proto)
                              ]), Spec$Ocamlprotocplugin.Serialize.C.nil))))));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._6(f$prime, param[/* style */0], param[/* placeholderTextColor */1], param[/* placeholder */2], param[/* value */3], param[/* localProps */4], param[/* onValueChange */5]);
}

function from_proto$10(writer) {
  var constructor = function (style, placeholderTextColor, placeholder, value, localProps, onValueChange) {
    return /* record */[
            /* style */style,
            /* placeholderTextColor */placeholderTextColor,
            /* placeholder */placeholder,
            /* value */value,
            /* localProps */localProps,
            /* onValueChange */onValueChange
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Struct.Google_mirror.Protobuf.Struct.from_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, StringValue.from_proto)
              ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, StringValue.from_proto)
                  ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
                        4,
                        Spec$Ocamlprotocplugin.Deserialize.C.string,
                        Spec$Ocamlprotocplugin.Deserialize.C.proto3
                      ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                            5,
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, LocalProp.from_proto),
                            Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                                6,
                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Callback.from_proto)
                              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil))))));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], TextInput, {
      name$prime: name$prime$10,
      to_proto: to_proto$10,
      from_proto: from_proto$10
    });

function name$prime$11(param) {
  return "Schema.Switch";
}

function to_proto$11(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Struct.Google_mirror.Protobuf.Struct.to_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
                2,
                Spec$Ocamlprotocplugin.Serialize.C.bool,
                Spec$Ocamlprotocplugin.Serialize.C.proto3
              ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Callback.to_proto)
                  ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._3(f$prime, param[/* style */0], param[/* value */1], param[/* onValueChange */2]);
}

function from_proto$11(writer) {
  var constructor = function (style, value, onValueChange) {
    return /* record */[
            /* style */style,
            /* value */value,
            /* onValueChange */onValueChange
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Struct.Google_mirror.Protobuf.Struct.from_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
                2,
                Spec$Ocamlprotocplugin.Deserialize.C.bool,
                Spec$Ocamlprotocplugin.Deserialize.C.proto3
              ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                    3,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Callback.from_proto)
                  ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Switch, {
      name$prime: name$prime$11,
      to_proto: to_proto$11,
      from_proto: from_proto$11
    });

function name$prime$12(param) {
  return "Schema.Image";
}

function to_proto$12(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Struct.Google_mirror.Protobuf.Struct.to_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
                2,
                Spec$Ocamlprotocplugin.Serialize.C.string,
                Spec$Ocamlprotocplugin.Serialize.C.proto3
              ]), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* style */0], param[/* sourceURLString */1]);
}

function from_proto$12(writer) {
  var constructor = function (style, sourceURLString) {
    return /* record */[
            /* style */style,
            /* sourceURLString */sourceURLString
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Struct.Google_mirror.Protobuf.Struct.from_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
                2,
                Spec$Ocamlprotocplugin.Deserialize.C.string,
                Spec$Ocamlprotocplugin.Deserialize.C.proto3
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], $$Image, {
      name$prime: name$prime$12,
      to_proto: to_proto$12,
      from_proto: from_proto$12
    });

function name$prime$13(param) {
  return "Schema.ReactElement";
}

function to_proto$13(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, StringValue.to_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                  var variant = param[0];
                  if (variant >= -193011497) {
                    if (variant !== -119655427) {
                      if (variant >= 936573133) {
                        if (variant >= 958946949) {
                          return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                      3,
                                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, View.to_proto),
                                      param[1]
                                    ]);
                        } else {
                          return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                      7,
                                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, $$Text.to_proto),
                                      param[1]
                                    ]);
                        }
                      } else if (variant >= -99762668) {
                        return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                    9,
                                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Switch.to_proto),
                                    param[1]
                                  ]);
                      } else {
                        return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                    4,
                                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, FlatList.to_proto),
                                    param[1]
                                  ]);
                      }
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  6,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, TextInput.to_proto),
                                  param[1]
                                ]);
                    }
                  } else if (variant >= -687863147) {
                    if (variant >= -198771759) {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  2,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, CustomComponent.to_proto),
                                  param[1]
                                ]);
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  8,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, RawText.to_proto),
                                  param[1]
                                ]);
                    }
                  } else if (variant >= -711832046) {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                5,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, TouchableOpacity.to_proto),
                                param[1]
                              ]);
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                10,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, $$Image.to_proto),
                                param[1]
                              ]);
                  }
                })), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* key */0], param[/* value */1]);
}

function from_proto$13(writer) {
  var constructor = function (key, value) {
    return /* record */[
            /* key */key,
            /* value */value
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, StringValue.from_proto)
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      2,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, CustomComponent.from_proto),
                      (function (v) {
                          return /* `Custom */[
                                  -198771759,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        3,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, View.from_proto),
                        (function (v) {
                            return /* `View */[
                                    958946949,
                                    v
                                  ];
                          })
                      ]),
                  /* :: */[
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                          4,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, FlatList.from_proto),
                          (function (v) {
                              return /* `FlatList */[
                                      -193011497,
                                      v
                                    ];
                            })
                        ]),
                    /* :: */[
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                            5,
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, TouchableOpacity.from_proto),
                            (function (v) {
                                return /* `TouchableOpacity */[
                                        -711832046,
                                        v
                                      ];
                              })
                          ]),
                      /* :: */[
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                              6,
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, TextInput.from_proto),
                              (function (v) {
                                  return /* `TextInput */[
                                          -119655427,
                                          v
                                        ];
                                })
                            ]),
                        /* :: */[
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                7,
                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, $$Text.from_proto),
                                (function (v) {
                                    return /* `Text */[
                                            936573133,
                                            v
                                          ];
                                  })
                              ]),
                          /* :: */[
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                  8,
                                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, RawText.from_proto),
                                  (function (v) {
                                      return /* `RawText */[
                                              -687863147,
                                              v
                                            ];
                                    })
                                ]),
                            /* :: */[
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                    9,
                                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Switch.from_proto),
                                    (function (v) {
                                        return /* `Switch */[
                                                -99762668,
                                                v
                                              ];
                                      })
                                  ]),
                              /* :: */[
                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                      10,
                                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, $$Image.from_proto),
                                      (function (v) {
                                          return /* `Image */[
                                                  -795439301,
                                                  v
                                                ];
                                        })
                                    ]),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], ReactElement, {
      name$prime: name$prime$13,
      to_proto: to_proto$13,
      from_proto: from_proto$13
    });

function name$prime$14(param) {
  return "Schema.Unmount";
}

function to_proto$14(t) {
  var spec = Spec$Ocamlprotocplugin.Serialize.C.nil;
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  return Curry._1(serialize, /* () */0);
}

function from_proto$14(writer) {
  var spec = Spec$Ocamlprotocplugin.Deserialize.C.nil;
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, /* () */0);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Unmount, {
      name$prime: name$prime$14,
      to_proto: to_proto$14,
      from_proto: from_proto$14
    });

function name$prime$15(param) {
  return "Schema.Render";
}

function to_proto$15(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.string,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Struct.Google_mirror.Protobuf.Struct.to_proto)
              ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                    3,
                    Spec$Ocamlprotocplugin.Serialize.C.string,
                    Spec$Ocamlprotocplugin.Serialize.C.packed
                  ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._3(f$prime, param[/* name */0], param[/* props */1], param[/* localProps */2]);
}

function from_proto$15(writer) {
  var constructor = function (name, props, localProps) {
    return /* record */[
            /* name */name,
            /* props */props,
            /* localProps */localProps
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.string,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Struct.Google_mirror.Protobuf.Struct.from_proto)
              ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                    3,
                    Spec$Ocamlprotocplugin.Deserialize.C.string,
                    Spec$Ocamlprotocplugin.Deserialize.C.packed
                  ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Render, {
      name$prime: name$prime$15,
      to_proto: to_proto$15,
      from_proto: from_proto$15
    });

function name$prime$16(param) {
  return "Schema.Call";
}

function to_proto$16(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.int32_int,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Struct.Google_mirror.Protobuf.Struct.to_proto)
              ]), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* messageId */0], param[/* args */1]);
}

function from_proto$16(writer) {
  var constructor = function (messageId, args) {
    return /* record */[
            /* messageId */messageId,
            /* args */args
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                2,
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Struct.Google_mirror.Protobuf.Struct.from_proto)
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Call, {
      name$prime: name$prime$16,
      to_proto: to_proto$16,
      from_proto: from_proto$16
    });

function name$prime$17(param) {
  return "Schema.ClientToServer";
}

function to_proto$17(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.int32_int,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                  var variant = param[0];
                  if (variant !== 747848894) {
                    if (variant >= 968744822) {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  3,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Render.to_proto),
                                  param[1]
                                ]);
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  2,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Unmount.to_proto),
                                  param[1]
                                ]);
                    }
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                4,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Call.to_proto),
                                param[1]
                              ]);
                  }
                })), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* rootId */0], param[/* value */1]);
}

function from_proto$17(writer) {
  var constructor = function (rootId, value) {
    return /* record */[
            /* rootId */rootId,
            /* value */value
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      2,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Unmount.from_proto),
                      (function (v) {
                          return /* `Unmount */[
                                  -699977536,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        3,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Render.from_proto),
                        (function (v) {
                            return /* `Render */[
                                    968744822,
                                    v
                                  ];
                          })
                      ]),
                  /* :: */[
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                          4,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Call.from_proto),
                          (function (v) {
                              return /* `Call */[
                                      747848894,
                                      v
                                    ];
                            })
                        ]),
                    /* [] */0
                  ]
                ]
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], ClientToServer, {
      name$prime: name$prime$17,
      to_proto: to_proto$17,
      from_proto: from_proto$17
    });

function name$prime$18(param) {
  return "Schema.Error";
}

function to_proto$18(t) {
  var spec = Spec$Ocamlprotocplugin.Serialize.C.nil;
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  return Curry._1(serialize, /* () */0);
}

function from_proto$18(writer) {
  var spec = Spec$Ocamlprotocplugin.Deserialize.C.nil;
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, /* () */0);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], $$Error, {
      name$prime: name$prime$18,
      to_proto: to_proto$18,
      from_proto: from_proto$18
    });

function name$prime$19(param) {
  return "Schema.Update";
}

function to_proto$19(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
            Spec$Ocamlprotocplugin.Serialize.C.not_packed
          ]), Spec$Ocamlprotocplugin.Serialize.C.nil);
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  return Curry._2(serialize, /* () */0, t);
}

function from_proto$19(writer) {
  var constructor = function (a) {
    return a;
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
            1,
            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
            Spec$Ocamlprotocplugin.Deserialize.C.not_packed
          ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Update, {
      name$prime: name$prime$19,
      to_proto: to_proto$19,
      from_proto: from_proto$19
    });

function name$prime$20(param) {
  return "Schema.ServerToClient";
}

function to_proto$20(t) {
  var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Serialize.C.int32_int,
            Spec$Ocamlprotocplugin.Serialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                  if (param[0] >= 999946793) {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                3,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Update.to_proto),
                                param[1]
                              ]);
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                2,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, $$Error.to_proto),
                                param[1]
                              ]);
                  }
                })), Spec$Ocamlprotocplugin.Serialize.C.nil));
  var serialize = Serialize$Ocamlprotocplugin.serialize(spec);
  var f$prime = Curry._1(serialize, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* rootId */0], param[/* value */1]);
}

function from_proto$20(writer) {
  var constructor = function (rootId, value) {
    return /* record */[
            /* rootId */rootId,
            /* value */value
          ];
  };
  var spec = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
            1,
            Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
            Spec$Ocamlprotocplugin.Deserialize.C.proto3
          ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      2,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, $$Error.from_proto),
                      (function (v) {
                          return /* `Error */[
                                  106380200,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        3,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Update.from_proto),
                        (function (v) {
                            return /* `Update */[
                                    999946793,
                                    v
                                  ];
                          })
                      ]),
                  /* [] */0
                ]
              ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));
  var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec, constructor);
  return Curry._1(deserialize, writer);
}

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], ServerToClient, {
      name$prime: name$prime$20,
      to_proto: to_proto$20,
      from_proto: from_proto$20
    });

exports.StringValue = StringValue;
exports.Int32Value = Int32Value;
exports.Callback = Callback;
exports.LocalProp = LocalProp;
exports.CustomComponent = CustomComponent;
exports.View = View;
exports.FlatList = FlatList;
exports.TouchableOpacity = TouchableOpacity;
exports.RawText = RawText;
exports.$$Text = $$Text;
exports.TextInput = TextInput;
exports.Switch = Switch;
exports.$$Image = $$Image;
exports.ReactElement = ReactElement;
exports.Unmount = Unmount;
exports.Render = Render;
exports.Call = Call;
exports.ClientToServer = ClientToServer;
exports.$$Error = $$Error;
exports.Update = Update;
exports.ServerToClient = ServerToClient;
/* StringValue Not a pure module */
